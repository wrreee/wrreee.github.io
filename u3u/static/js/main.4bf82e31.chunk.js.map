{"version":3,"sources":["components/_shared/Button.tsx","utils/imageData.ts","store/patterns/actions.ts","store/tool/types.ts","components/Pattern/HistoryControls.tsx","utils/path.ts","utils/geometry.ts","components/_shared/SVG.tsx","utils/utils.ts","store/selectTool/types.ts","store/brush/types.ts","components/Area/Selection.tsx","components/_shared/Canvas.tsx","store/line/types.ts","store/change/actions.ts","store/changing/types.ts","store/changing/actions.ts","store/patterns/types.ts","utils/draw.ts","components/Area/Draw.tsx","components/_shared/InputNumber.tsx","components/Area/index.tsx","components/_shared/InputText.tsx","components/_shared/ButtonSelect.tsx","utils/mouse.ts","store/changeFunctions/types.ts","components/_shared/Key.tsx","components/_shared/ButtonNumber.tsx","store/changingValues/actions.ts","components/_shared/SelectButtons.tsx","components/_shared/SelectDrop.tsx","components/_shared/HoverHideable.tsx","components/_shared/ShortcutInput.tsx","components/_shared/ButtonNumberCF.tsx","components/Area/MaskDraw.tsx","components/Pattern/RotatingControls.tsx","components/Pattern/RepeatingControls.tsx","components/Pattern/index.tsx","store/tool/actions.ts","components/Patterns.tsx","store/patterns/service.ts","store/brush/actions.ts","store/patterns/selectors.ts","components/Tools/Brush.tsx","store/line/actions.ts","components/Tools/Line.tsx","store/selectTool/actions.ts","components/Tools/SelectTool.tsx","store/fullscreen/index.ts","store/rooms/actions.ts","components/Tools/index.tsx","store/changeFunctions/actions.ts","components/Rooms.tsx","store/rooms/service.ts","components/ChangeF/SinCF.tsx","components/ChangeF/LoopCF.tsx","components/ChangeF/index.tsx","components/Layout.tsx","components/Main.tsx","utils/state.ts","store/patterns/helpers.ts","store/patterns/reducer.ts","store/tool/reducer.ts","components/_shared/Params.tsx","store/brush/helpers.ts","store/brush/reducer.ts","store/line/helpers.ts","store/line/reducer.ts","store/selectTool/helpers.ts","store/selectTool/reducer.ts","store/rooms/reducer.ts","store/changeFunctions/helpers.ts","store/changeFunctions/reducer.ts","store/changingValues/reducer.ts","store/changing/reducer.ts","store/color/actions.ts","store/color/reducer.ts","store/change/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","children","onClick","onMouseDown","onMouseUp","disabled","width","className","value","name","classNames","e","style","canvasToImageData","canvas","getContext","getImageData","height","imageDataToCanvas","imageData","document","createElement","ctx","putImageData","EPatternsAction","EPatternAction","resizeImageData","oldCanvas","newCanvas","drawImage","imageDataToBase64","toDataURL","maskedImage","maskImageData","globalCompositeOperation","EToolType","updateImage","id","emit","dispatch","getState","socket","patterns","type","UPDATE_IMAGE","HistoryControls","onUndo","onRedo","history","before","length","after","ESegType","EPathModeType","selectionTools","Select","pointsDistance","x1","y1","x2","y2","Math","sqrt","pow","SVG","props","elementRef","pre","mouseDownHandler","setState","dragging","onDown","mouseUpHandler","state","onUp","mouseMoveHandler","onDrag","onMove","React","createRef","this","current","addEventListener","ref","PureComponent","Path","M","path","x","y","values","L","Z","Rect","n","findSliceBounds","sliceStart","sliceEnd","slice","Slice","m","i","j","getLastSlice","getNearestSegment","nearest","reduce","res","segment","index","distance","startInSlice","sliceN","stringToPathData","string","createElementNS","setAttribute","getPathData","ECurveType","defaultValue","key","objectToSelectItems","object","text","withNull","nullText","items","Object","keys","map","defaultArrayValue","item","arrayToSelectItems","array","ESelectionMode","CurveValueName","CurveBundle","CurveCardinal","CurveCatmullRom","EBrushType","EBrushCompositeOperation","lineFunction","d3","defined","HANDLER_SIZE","selectionModesSelectItems","Line","Points","curveTypesSelectItems","CanvasSelectionComponent","canvasRef","pathRef","pathPointsRef","maskPathRef","maskRef","commitChanges","onChange","selectToolHandlers","down","offsetX","offsetY","startX","startY","currentSliceN","oppositeIndex","oppositeSeg","drag","up","filter","exit","nextMode","SimplePoints","curvePath","subFirst","reverse","newCurvePath","line","selectToolParams","curveType","curveValue","curve","indexOf","points","closed","prevPath","Array","isArray","prevProps","mode","console","log","isActive","setPathData","fill","fillOpacity","mask","stroke","nextProps","prevState","Selection","connect","selectTool","params","currentTool","tool","Canvas","drawing","event","clickProcess","removeEventListener","releaseProcess","drawProcess","moveProcess","ImageData","ELineType","ELineCompositeOperation","EChangeAction","ChangingMode","EChangingAction","toStartValue","TO_START_VALUE","allToStartValue","ALL_TO_START_VALUE","EPatternType","ERepeatingType","requestID","startChanging","cancelAnimationFrame","startTime","performance","now","requestAnimationFrame","changing","time","CHANGE","change","START","stopChanging","STOP","startDrawChanging","OnDraw","stopDrawChanging","getRepeatingCoords","pattern","repeating","Grid","gridParams","xn","yn","xd","yd","push","getRandomColor","color","floor","random","timer","CanvasDrawComponent","handlers","Brush","Square","squareBrush","ev","patternId","brush","size","opacity","compositeOperation","fillStyle","globalAlpha","forEach","fillRect","SourceOver","draw","click","Circle","circleBrush","beginPath","arc","PI","Pattern","patternBrush","patternSize","rotation","p","resultImage","translate","offset","rotate","angle","Default","strokeStyle","lineWidth","moveTo","lineTo","release","closePath","Interrupted","InterruptedOneStroke","getType","getTypeField","handlersByTool","get","mapDispatchToProps","Draw","getStyle","transform","AreaComponent","imageValue","selectionValue","selectionParams","onImageChange","onSelectionChange","Area","InputNumber","min","max","step","delay","notZero","_value","set_value","n_value","target","clearTimeout","setTimeout","InputText","onFocus","onBlur","curtop","ECFType","ButtonSelect","selected","data","Key","handlePress","preventRepeat","onPress","handleRelease","onRelease","keyboardjs","mousePositionElement","mousePosDoc","posx","posy","window","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","mousePositionDocument","targetPos","obj","curleft","offsetParent","offsetLeft","offsetTop","left","top","findPos","targ","srcElement","nodeType","parentNode","mouseTarget","EChangingValuesAction","DEFAULT_WIDTH","defaultGetText","toFixed","ValueD","VerticalLinear","oldValue","dx","dy","ButtonNumber","handleDown","startValue","persist","startPoint","handleMove","handleUp","calcValue","changingStartValue","precision","range","one","abs","handlePressed","valueD","integer","nextValue","round","nextState","changeFunctionParams","changeFunctionId","shortcut","changeFunctionType","getText","otherProps","Amplitude","amplitudeComponent","SIN","startVPerc","ampWidth","a","LOOP","end","start","defaultGetValue","SelectButtons","handleClick","getValue","nullAble","br","SelectDrop","HoverHideable","button","ShortcutInput","handleChange","handleFocus","handleBlur","ButtonNumberCFComponent","changeFunctionsItems","changeFunctions","active","handleCFChange","setValueInChangingList","setStartValue","handleStartManualChanging","deactivateValueChanging","handleStopManualChanging","activateValueChanging","handleShortcutChange","changingValues","buttonNumberProps","othersButtonNumberProps","changingValueData","changingParams","changingType","SET_VALUE_IN_CHANGING_LIST","DEACTIVATE_VALUE_CHANGING","ACTIVATE_VALUE_CHANGING","SET_START_VALUE","ButtonNumberCF","opacityRange","ECompositeOperation","BLACK","MaskDrawComponent","black","destinationOver","destinationOut","sourceOver","handleOpacityChange","onParamsChange","handleBlackChange","MaskDraw","angleRange","angleValueD","offsetRange","offsetValueD","RotationControls","handleAngleChange","handleOffsetChange","repeatingRange","repeatingValueD","RepeatingControls","handleGridParamsChange","EToolAction","inputNumberProps","roomName","handleImageChange","handleMaskChange","onMaskChange","handleSelectionChange","handleClearSelection","handleRemove","onRemove","handleUndo","handleRedo","handleSetWidth","onSetWidth","handleSetHeight","onSetHeight","handleMaskParamsChange","onMaskParamsChange","handleCreateRoom","onCreateRoom","handleConfigToggle","onConfigChange","config","handleRotationChange","onRotationChange","handleRepeatingChange","onRepeatingChange","connected","maskValue","maskParams","selection","store","PatternsComponent","handleAddClick","addPattern","createRoom","removePattern","updateMask","setMaskParams","updateSelection","undo","redo","setWidth","setHeight","editConfig","setRotation","setRepeating","SET_MASK_PARAMS","io","query","on","base64","src","Promise","resolve","image","Image","onload","base64ToImageData","then","CREATE_ROOM","ADD_PATTERN","REMOVE_PATTERN","UPDATE_SELECTION","REDO","UNDO","SET_WIDTH","SET_HEIGHT","EDIT_CONFIG","UPDATE_MASK","SET_ROTATION","SET_REPEATING","Patterns","EBrushAction","getPatternsSelectItems","createSelector","ELineAction","sizeRange","sizeValueD","patternSizeRange","patternSizeValueD","opacityValueD","BrushComponent","handleSizeChange","setBrushParams","paramsValue","handlePatternChange","handleCompositeChange","handleTypeChange","handleParamChange","paramsConfigMap","paramsConfig","patternsSelectItems","paramsConfigMapSelector","paramConfig","SET_PARAMS","ESelectToolAction","LineComponent","setLineParams","Pattren","EFullScreenAction","SelectToolComponent","setSelectToolParams","otherParams","SelectTool","ERoomsAction","fullscreenReducer","handleActions","ON","OFF","SET","s","REVERSE","ToolsParams","component","setCurrentTool","SET_CURRENT","reverseFullScreen","Tools","ToolControls","toolType","EChangeFunctionsAction","RoomsComponent","handleRoomConnect","room","roomsConnect","rooms","UPDATE_ROOMS","updateRooms","CONNECT_ROOMS","Rooms","SinCF","t","tRange","tValueD","seRange","seValueD","LoopCF","CFComponentByType","modesItems","enumToSelectItems","ChangeFComponent","changeCFParams","handleAddSin","addCF","handleAddLoop","handleModeChange","setChangingMode","cfs","changingMode","cf","Component","CHANGE_PARAMS","cfType","ADD_CF","prevMode","On","Off","SET_MODE","ChangeF","Layout","full","fullScreen","setFullScreen","enabled","Main","createCleanCanvasState","createImageData","getFunctionState","initialValue","initialParams","getHistoryState","getStoreState","getSelectionState","getMaskState","getRotationState","getRepeatingState","reducePattern","reducer","action","historyPush","historyLength","beforeNext","shift","patternsReducer","toString","undefined","createPatternInitialState","omit","updatePatternState","undoResult","prev","historyUndo","redoResult","next","historyRedo","EParamType","toolReducer","ParamComponents","Boolean","Number","typeSelectItems","compositeOperationSelectItems","getBrushParamsConfig","brushReducer","getLineParamsConfig","lineReducer","getSelectToolParamsConfig","selectToolReducer","CurveLinear","roomsReducer","chInitialParams","chParamsConfig","changeFunctionByType","sin","changeFunctionsReducer","getId","cfId","createCFInitialState","changingValuesReducer","EColorAction","changingReducer","isChanging","colorReducer","changeReducer","changeFunctionData","changeFunction","set","immutable","rootReducer","reduceReducers","combineReducers","createStore","applyMiddleware","thunk","logger","App","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bf82e31.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/button.scss\";\nimport {EventData} from \"../../utils/types\";\n\nexport interface ButtonEventData extends EventData {\n}\n\nexport interface ButtonProps {\n    onClick?(data?: ButtonEventData)\n\n    onMouseDown?(data?: ButtonEventData)\n\n    onMouseUp?(data?: ButtonEventData)\n\n    value?: any\n    name?: string\n\n    className?: string\n    children?: React.ReactNode,\n    disabled?: boolean\n    width?: number\n}\n\nexport const Button: React.FC<ButtonProps> = ({children, onClick, onMouseDown, onMouseUp, disabled, width, className, value, name}) => {\n    return (\n        <button\n            className={classNames(\"button\", className)}\n            onClick={e => onClick && onClick({e, value, name})}\n            onMouseUp={e => onMouseUp && onMouseUp({e, value, name})}\n            onMouseDown={e => onMouseDown && onMouseDown({e, value, name})}\n            style={{width}}\n            disabled={disabled}>\n            {children}\n        </button>\n    )\n};","export const canvasToImageData = (canvas: HTMLCanvasElement): ImageData =>\n    canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas;\n}\n\nexport const resizeImageData = (imageData: ImageData, width: number, height: number): ImageData => {\n    const oldCanvas = imageDataToCanvas(imageData);\n    const newCanvas = document.createElement('canvas');\n    newCanvas.width = width;\n    newCanvas.height = height;\n\n    newCanvas.getContext(\"2d\").drawImage(oldCanvas, 0, 0, width, height);\n\n    return canvasToImageData(newCanvas);\n};\n\nexport const imageDataToBase64 = (imageData: ImageData): string => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n};\n\nexport const base64ToImageData = (src: string): Promise<ImageData> => {\n    return new Promise(resolve => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => {\n\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n\n            if (!ctx) {\n                return null;\n            }\n\n            canvas.width = image.width;\n            canvas.height = image.height;\n            ctx.drawImage(image, 0, 0);\n\n            resolve(ctx.getImageData(0, 0, canvas.width, canvas.height))\n\n        }\n    });\n};\n\nexport const maskedImage = (imageData: ImageData, maskImageData: ImageData): HTMLCanvasElement => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n\n    if (maskImageData) {\n        ctx.putImageData(maskImageData, 0, 0);\n        ctx.globalCompositeOperation = \"source-in\";\n    }\n    ctx.drawImage(imageDataToCanvas(imageData), 0, 0, imageData.width, imageData.height);\n\n    return canvas;\n\n};","import {\n    AddPatternAction,\n    CreateRoomAction,\n    EditPatternConfigAction,\n    MaskParams,\n    PatternRedoAction,\n    PatternUndoAction,\n    RemovePatternAction, RepeatingParams, RotationValue,\n    SetMaskParamsAction,\n    SetPatternHeightAction,\n    SetPatternWidthAction, SetRepeatingAction,\n    SetRotationAction,\n    UpdatePatternImageAction,\n    UpdatePatternMaskAction,\n    UpdatePatternSelectionAction\n} from \"./types\";\nimport {SelectionValue} from \"./types\";\nimport {PatternConfig} from \"./types\";\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\nimport {AppState} from \"../index\";\nimport {Action} from \"redux\";\nimport {createRoom_s} from \"./service\";\nimport {base64ToImageData, imageDataToBase64} from \"../../utils/imageData\";\nimport {dispatch} from \"d3-dispatch\";\n\ntype ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\n\nexport enum EPatternsAction {\n    ADD_PATTERN = \"patterns/add\",\n    REMOVE_PATTERN = \"patterns/remove\",\n}\n\nexport enum EPatternAction {\n    UPDATE_IMAGE = \"pattern/update-image\",\n    UPDATE_MASK = \"pattern/update-mask\",\n    UPDATE_SELECTION = \"pattern/update-selection\",\n    SET_MASK_PARAMS = \"pattern/set-mask-params\",\n    EDIT_CONFIG = \"pattern/edit-config\",\n    UNDO = \"pattern/undo\",\n    REDO = \"pattern/redo\",\n    STORE_IMAGE = \"pattern/store-image\",\n    UNSTORE_IMAGE = \"pattern/unstore-image\",\n    SET_WIDTH = \"pattern/set-width\",\n    SET_HEIGHT = \"pattern/set-height\",\n    SET_SELECTION_PARAMS = \"pattern/set-selection-params\",\n    SET_ROTATION = \"pattern/set-rotation\",\n    SET_REPEATING = \"pattern/set-repeating\",\n\n    CREATE_ROOM = \"pattern/create-room\",\n}\n\nexport const addPattern = (config?: PatternConfig): AddPatternAction =>\n    ({type: EPatternsAction.ADD_PATTERN, config});\n\nexport const removePattern = (id: string): RemovePatternAction =>\n    ({type: EPatternsAction.REMOVE_PATTERN, id});\n\nexport const updateImage = (id: string, imageData: ImageData, emit: boolean = true): ThunkResult<UpdatePatternImageAction> =>\n    (dispatch, getState) => {\n\n        const socket = getState().patterns[id].socket;\n\n        emit && socket && socket.emit(\"image\", imageDataToBase64(imageData));\n\n        return dispatch({type: EPatternAction.UPDATE_IMAGE, imageData, id});\n    };\n\nexport const updateMask = (id: string, imageData: ImageData): UpdatePatternMaskAction =>\n    ({type: EPatternAction.UPDATE_MASK, imageData, id});\n\nexport const setMaskParams = (id: string, params: MaskParams): SetMaskParamsAction =>\n    ({type: EPatternAction.SET_MASK_PARAMS, id, params});\n\nexport const updateSelection = (id: string, value: SelectionValue): UpdatePatternSelectionAction =>\n    ({type: EPatternAction.UPDATE_SELECTION, value, id});\n\nexport const editConfig = (id: string, config: PatternConfig): EditPatternConfigAction =>\n    ({type: EPatternAction.EDIT_CONFIG, id, config});\n\nexport const undo = (id: string): PatternUndoAction =>\n    ({type: EPatternAction.UNDO, id});\nexport const redo = (id: string): PatternRedoAction =>\n    ({type: EPatternAction.REDO, id});\n\nexport const setWidth = (id: string, width: number): SetPatternWidthAction =>\n    ({type: EPatternAction.SET_WIDTH, id, width});\nexport const setHeight = (id: string, height: number): SetPatternHeightAction =>\n    ({type: EPatternAction.SET_HEIGHT, id, height});\n\n\nexport const setRotation = (id: string, rotation: RotationValue): SetRotationAction =>\n    ({type: EPatternAction.SET_ROTATION, id, rotation});\n\n\nexport const setRepeating = (id: string, repeating: RepeatingParams): SetRepeatingAction =>\n    ({type: EPatternAction.SET_REPEATING, id, repeating});\n\n\nexport const createRoom = (id: string, roomName: string): ThunkResult<CreateRoomAction> =>\n    dispatch => {\n        const socket = createRoom_s(roomName);\n\n        socket.on(\"image\", base64 => {\n            base64ToImageData(base64).then(imageData => {\n                dispatch(updateImage(id, imageData, false));\n            });\n        });\n\n        return dispatch({type: EPatternAction.CREATE_ROOM, id, roomName, socket})\n    };\n\n// export const storeImage = (id: string): PatternStoreAction => ({type: EPatternsAction.STORE_IMAGE});\n// export const unstoreImage = (id: string): PatternUnstoreAction => ({type: EPatternsAction.UNSTORE_IMAGE});\n\n// export const setSelection = (selection: SelectionValue): SetPatternSelectionAction =>\n//     ({type: EPatternsAction.SET_SELECTION, selection});\n// export const setSelectionParams = (params: object): SetPatternSelectionParamsAction =>\n//     ({type: EPatternsAction.SET_SELECTION_PARAMS, params});","import {Action} from \"redux\";\n\nexport enum EToolType {\n    Brush = \"Brush\",\n    Select = \"Select\",\n    Line = \"Line\",\n}\n\nexport interface SetCurrentToolAction extends Action {\n    tool: EToolType\n}\n\nexport const selectionTools = [EToolType.Select];","import * as React from \"react\";\nimport {Button} from \"../_shared/Button\";\nimport {HistoryValue} from \"../../store/patterns/types\";\n\nexport interface HistoryControlsProps {\n\n    history: HistoryValue\n\n    onUndo()\n\n    onRedo()\n}\n\nexport const HistoryControls: React.FC<HistoryControlsProps> = ({onUndo, onRedo, history}) => {\n\n    return (\n        <>\n            <Button\n                onClick={onUndo}\n                disabled={!history.before.length}\n                width={70}>\n                undo{history.before.length ? `(${history.before.length})` : \"\"}</Button>\n            <Button\n                onClick={onRedo}\n                disabled={!history.after.length}\n                width={70}>\n                redo{history.after.length ? `(${history.after.length})` : \"\"}</Button>\n        </>\n    );\n};","import {pointsDistance} from \"./geometry\";\n\nexport enum ESegType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n}\n\nexport enum EPathModeType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n    Rect = \"Rect\",\n    Slice = \"Slice\",\n}\n\nexport interface Segment {\n    type: ESegType\n    values?: number[]\n}\n\nexport const RECT_LENGTH = 5;\n\nexport const Path = {\n    [EPathModeType.M]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.M, values: [x, y]}],\n    [EPathModeType.L]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.L, values: [x, y]}],\n    [EPathModeType.Z]: (path: Segment[]): Segment[] =>\n        [...path, {type: ESegType.Z}],\n    [EPathModeType.Rect]: (path: Segment[], [x1, y1, x2, y2]: number[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            {type: ESegType.M, values: [x1, y1]},\n            {type: ESegType.L, values: [x2, y1]},\n            {type: ESegType.L, values: [x2, y2]},\n            {type: ESegType.L, values: [x1, y2]},\n            {type: ESegType.Z},\n            ...path.slice(sliceEnd + 1)\n        ]\n    },\n    [EPathModeType.Slice]: (path: Segment[], slice: Segment[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            ...slice,\n            ...path.slice(sliceEnd + 1)\n        ]\n    }\n};\n\nexport const findSliceBounds = (path, n) => {\n    let sliceStart, sliceEnd;\n    let m = 0;\n    for (let i = 0; i < path.length; i++) {\n        if (path[i].type === ESegType.M) {\n            if (m === n) {\n                sliceStart = i;\n                for (let j = i; j < path.length; j++) {\n                    if (path[j].type === ESegType.Z) {\n                        sliceEnd = j;\n                        break;\n                    }\n                }\n                break;\n            }\n            m++;\n        }\n    }\n\n    return {\n        sliceStart: typeof sliceStart === \"undefined\" ? path.length : sliceStart,\n        sliceEnd: typeof sliceEnd === \"undefined\" ? path.length : sliceEnd,\n    }\n};\n\nexport const getLastSlice = (path: Segment[]) => {\n    let i;\n    for (i = path.length - 1; i >= 0; i--) {\n        if (path[i].type === ESegType.M) {\n            break;\n        }\n    }\n\n    return path.slice(i);\n};\n\nexport interface NearestSegmentData {\n    index: number,\n    segment: Segment,\n    distance: number\n    startInSlice?: number,\n    sliceStart?: number\n    sliceEnd?: number\n    sliceN?: number\n    slice?: Segment[]\n}\n\nexport const getNearestSegment = (path: Segment[], x: number, y: number): NearestSegmentData => {\n    if (!path || !path.length)\n        return;\n\n    const nearest: NearestSegmentData = path.slice(1).reduce((res: NearestSegmentData, segment, index) => {\n        index++;\n\n        if (!segment.values)\n            return res;\n\n        const distance = pointsDistance(x, y, segment.values[0], segment.values[1]);\n\n        return distance < res.distance ? {\n            distance, segment,\n            index\n        } : res;\n    }, {\n        sliceStart: 0,\n        sliceEnd: 0,\n        startInSlice: 0,\n        index: 0,\n        segment: path[0],\n        distance: pointsDistance(x, y, path[0].values[0], path[0].values[1])\n    });\n\n    let sliceStart, sliceEnd;\n    nearest.sliceN = -1;\n    for (let i = 0; i < path.length; i++) {\n\n        if (path[i].type === ESegType.M && i <= nearest.index) {\n            sliceStart = i;\n            nearest.sliceN += 1;\n        }\n        if (path[i].type === ESegType.Z && i > nearest.index && !sliceEnd) {\n            sliceEnd = i;\n        }\n    }\n\n    nearest.sliceStart = sliceStart;\n    nearest.sliceEnd = sliceEnd;\n    nearest.startInSlice = sliceStart ? nearest.index % sliceStart : nearest.index;\n\n    nearest.slice = path.slice(nearest.sliceStart, nearest.sliceEnd + 1);\n\n\n    return nearest;\n};\n\nexport const pathDataToString = (pathData): string => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n    (path as any).setPathData(pathData);\n\n    return path.getAttribute(\"d\");\n};\n\nexport const stringToPathData = (string: string) => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n\n    path.setAttribute(\"d\", string);\n\n    return (path as any).getPathData();\n};","export const pointsDistance = (x1, y1, x2, y2) => {\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n};","import React from 'react';\nimport {canvasToImageData} from \"../../utils/imageData\";\n\nexport interface CanvasSVGProps {\n    children?: React.ReactNode\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    onDrag?(e: MouseEvent, pre: MouseEvent)\n\n    onMove?(e: MouseEvent, pre: MouseEvent)\n\n    onDown?(e: MouseEvent)\n\n    onUp?(e: MouseEvent)\n}\n\nexport interface CanvasSVGState {\n    dragging: boolean\n}\n\nexport class SVG extends React.PureComponent<CanvasSVGProps, CanvasSVGState> {\n\n    elementRef;\n    pre;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: false\n        };\n\n        this.elementRef = React.createRef();\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.elementRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        this.elementRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n    }\n\n    // selectToolHandlers\n\n    private mouseDownHandler = e => {\n        this.setState({dragging: true});\n\n        const {onDown} = this.props;\n\n        onDown && onDown(e);\n    };\n\n    private mouseUpHandler = e => {\n        if (this.state.dragging) {\n            this.setState({dragging: false});\n\n            this.pre = null;\n            const {onUp} = this.props;\n\n            onUp && onUp(e);\n        }\n    };\n\n    private mouseMoveHandler = e => {\n        const {onDrag, onMove} = this.props;\n\n        this.state.dragging && onDrag && onDrag(e, this.pre);\n\n        onMove && onMove(e, this.pre);\n\n        this.pre = e;\n    };\n\n    render() {\n        const {children, width, height, className, style} = this.props;\n        return (\n            <svg\n                ref={this.elementRef}\n                width={width}\n                height={height}\n                className={className}\n                style={style}>\n                {children}\n            </svg>\n        )\n    }\n}","const defaultValue = (value, key?) => key;\nexport const objectToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = defaultValue,\n    text: (value: any, key: string) => string = defaultValue,\n    withNull?: boolean,\n    nullText?: string\n) => {\n    const items = Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));\n\n    return withNull\n        ? [{\n            value: null,\n            text: nullText || \"-\"\n        }, ...items] : items;\n\n};\n\nconst defaultArrayValue = (item) => item;\nexport const arrayToSelectItems = (\n    array: any[],\n    value: (item: any) => any = defaultArrayValue,\n    text: (item: any) => string = defaultArrayValue\n) =>\n    array.map(item => ({\n        value: value(item),\n        text: text(item),\n    }));\n\nconst defaultKey = ({name}) => name;\nexport const arrayToObject = (\n    array: any[],\n    key: (item: any) => string = defaultKey,\n    value: (item: any) => any = defaultValue\n) =>\n    array.reduce((res, item) => ({\n        ...res,\n        [key(item)]: value(item),\n    }), {});\n\n\nexport const enumToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = value => value,\n    text: (value: any, key: string) => string = value => value\n) =>\n    Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));","import {Action} from \"redux\";\n\nexport enum ECurveType {\n    CurveBasis = \"curveBasis\",\n    CurveBundle = \"curveBundle\",\n    CurveCardinal = \"curveCardinal\",\n    CurveCatmullRom = \"curveCatmullRom\",\n    CurveLinear = \"curveLinear\",\n    CurveMonotoneX = \"curveMonotoneX\",\n    CurveMonotoneY = \"curveMonotoneY\",\n    CurveNatural = \"curveNatural\",\n    CurveStep = \"curveStep\",\n    CurveStepBefore = \"curveStepBefore\",\n    CurveStepAfter = \"curveStepAfter\",\n}\n\nexport const CurveValueName = {\n    [ECurveType.CurveBundle]: \"beta\",\n    [ECurveType.CurveCardinal]: \"tension\",\n    [ECurveType.CurveCatmullRom]: \"alpha\"\n};\n\nexport enum ESelectionMode {\n    Line = \"Line\",\n    Rect = \"Rect\",\n    SimplePoints = \"SimplePoints\",\n    Points = \"Points\"\n}\n\nexport interface SelectToolParams {\n    mode: ESelectionMode\n    curveType?: ECurveType\n    curveValue?: number\n}\n\nexport interface SetSelectToolParamsAction extends Action {\n    params: SelectToolParams\n}","import {Action} from \"redux\";\n\nexport enum EBrushType {\n    Square = \"Square\",\n    Circle = \"Circle\",\n    Pattern = \"Pattern\",\n}\n\nexport interface BrushParams {\n    size: number\n    patternSize: number\n    opacity: number\n    type: EBrushType\n    pattern: number\n    compositeOperation: EBrushCompositeOperation\n}\n\nexport interface SetBrushParamsAction extends Action {\n    params: BrushParams\n}\n\n\nexport interface SetSizeAction extends Action {\n    size: number\n}\n\nexport interface SetOpacityAction extends Action {\n    opacity: number\n}\n\nexport interface SetTypeAction extends Action {\n    brushType: EBrushType\n}\n\nexport interface SetPatternSizeAction extends Action {\n    patternSize: number\n}\n\n\nexport enum EBrushCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n}","import * as React from \"react\";\nimport {pointsDistance} from \"../../utils/geometry\";\nimport {SVG} from \"../_shared/SVG\";\nimport * as d3 from \"d3\";\nimport {\n    EPathModeType,\n    ESegType,\n    getLastSlice,\n    getNearestSegment,\n    NearestSegmentData,\n    Path,\n    Segment,\n    stringToPathData\n} from \"../../utils/path\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport classNames from \"classnames\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {ESelectionMode, ECurveType, CurveValueName, SelectToolParams} from \"../../store/selectTool/types\";\nimport {SelectionValue} from '../../store/patterns/types';\nimport {SelectionParams} from \"../../store/patterns/types\";\nimport \"../../styles/selection.scss\"\n\n\nconst lineFunction = d3\n    .line<Segment>()\n    .x(({values}) => values ? values[0] : 0)\n    .y(({values}) => values ? values[1] : 0)\n    .defined(({values}) => !!values);\n\n\nconst HANDLER_SIZE = 5;\n\n\nexport const selectionModesSelectItems = arrayToSelectItems(\n    [ESelectionMode.Rect, ESelectionMode.Line, ESelectionMode.Points]);\n\nexport const curveTypesSelectItems = arrayToSelectItems(Object.values(ECurveType));\n\nexport interface CanvasSelectionStateProps {\n    currentTool: EToolType\n    selectToolParams: SelectToolParams\n}\n\nexport interface CanvasSelectionActionProps {\n}\n\nexport interface CanvasSelectionOwnProps {\n    isActive: boolean\n    params: SelectionParams\n\n    name: any\n    width: number\n    height: number\n\n    value?: SelectionValue\n    className?: string\n    style?:any\n\n    onChange?(value?: any)\n}\n\nexport interface CanvasSelectionProps extends CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps {\n\n}\n\nexport interface CanvasSelectionState {\n\n    startX: number\n    startY: number\n    offsetX: number\n    offsetY: number\n    points: any[]\n    closed: boolean\n    path: any[]\n    prevPath: any[] // нужно чтобы знать когда обновлять стейт из пропсов\n    curvePath: any[]\n    currentSliceN: number\n}\n\nclass CanvasSelectionComponent extends React.PureComponent<CanvasSelectionProps, CanvasSelectionState> {\n\n    canvasRef;\n    pathRef;\n    pathPointsRef;\n    maskPathRef;\n    maskRef;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n        this.pathRef = React.createRef();\n        this.pathPointsRef = React.createRef();\n        this.maskPathRef = React.createRef();\n        this.maskRef = React.createRef();\n\n        this.state = {\n            startX: null,\n            startY: null,\n            offsetX: null,\n            offsetY: null,\n            points: [],\n            closed: true,\n            path: [],\n            prevPath: null,\n            curvePath: [],\n            currentSliceN: 0\n        };\n    }\n\n    componentDidMount() {\n        const {value} = this.props;\n        Array.isArray(value) && this.setState({\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length\n        })\n    }\n\n    componentDidUpdate(prevProps: CanvasSelectionProps) {\n        if (prevProps.selectToolParams.mode !== this.props.selectToolParams.mode) {\n            this.selectToolHandlers[prevProps.selectToolParams.mode].exit(this.props.selectToolParams.mode)\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps: CanvasSelectionProps, prevState) {\n        const {value} = nextProps;\n        return Array.isArray(value) && value !== prevState.prevPath ? {\n            prevPath: value,\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length,\n        } : {}\n    }\n\n    commitChanges = () => {\n        const {onChange} = this.props;\n\n        onChange && onChange(this.state.path);\n    };\n\n    selectToolHandlers = {\n        [ESelectionMode.Rect]: ({\n            down: e => {\n                const {path} = this.state;\n\n                if (path.length) {\n\n                    const nearest: NearestSegmentData = getNearestSegment(path, e.offsetX, e.offsetY);\n\n                    if (nearest && nearest.distance < HANDLER_SIZE * 2) {\n\n                        if (nearest.slice.length !== 5) {\n                            return this.setState(state => ({\n                                startX: e.offsetX,\n                                startY: e.offsetY,\n                                offsetX: 0,\n                                offsetY: 0,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], nearest.sliceN)\n                            }));\n                        } else {\n\n                            const oppositeIndex = (nearest.startInSlice + 2) % 4;\n                            const oppositeSeg = nearest.slice[oppositeIndex];\n\n                            const offsetX = nearest.segment.values[0] - e.offsetX;\n                            const offsetY = nearest.segment.values[1] - e.offsetY;\n\n                            const startX = oppositeSeg.values[0];\n                            const startY = oppositeSeg.values[1];\n\n                            return this.setState(state => ({\n                                startX, startY,\n                                offsetX, offsetY,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [startX, startY, e.offsetX + offsetX, e.offsetY + offsetY], nearest.sliceN)\n                            }));\n                        }\n                    }\n                }\n                this.setState(({currentSliceN, path}) => ({\n                    offsetX: 0,\n                    offsetY: 0,\n                    startX: e.offsetX,\n                    startY: e.offsetY,\n                    path: Path[EPathModeType.Rect](path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n\n            },\n            drag: e => {\n                this.setState(({path, startX, startY, offsetX, offsetY, currentSliceN}) => ({\n                    path: Path[EPathModeType.Rect](path, [startX, startY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n            },\n            up: () => {\n                this.setState(state => ({\n                    startX: 0, startY: 0, offsetX: 0, offsetY: 0,\n                    currentSliceN: state.path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }),\n        [ESelectionMode.SimplePoints]: {\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    this.setState(({path}) => ({\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n\n                    if (curvePath.length) {\n                        this.setState(({path, currentSliceN}) => ({\n                            curvePath: [],\n                            path: Path[EPathModeType.Slice](path, curvePath, currentSliceN)\n                        }))\n                    }\n\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.Z](path),\n                            currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                        }), this.commitChanges);\n                    } else {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                        }));\n                    }\n                }\n            },\n            drag: () => undefined,\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        },\n        [ESelectionMode.Points]: ({\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    // если пустой путь или закрытый\n\n                    const curvePath = Path[EPathModeType.M](this.state.curvePath, [e.offsetX, e.offsetY]);\n\n                    this.setState(({path}) => ({\n                        curvePath,\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n                    if (!curvePath.length) {\n                        this.setState(({path}) => ({curvePath: getLastSlice(path)}))\n                    }\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        // если пришли к началу\n\n                        this.setState(({path, curvePath}) => {\n                            let newCurvePath = Path[EPathModeType.L](curvePath, [subFirst.values[0], subFirst.values[1]]);\n                            newCurvePath = Path[EPathModeType.Z](newCurvePath);\n\n                            return {\n                                curvePath: [],\n                                path: Path[EPathModeType.Z](this.line(path, newCurvePath)),\n                                currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                            }\n                        }, this.commitChanges);\n                    } else {\n                        // следующая точкка\n\n                        this.setState(({path, curvePath}) => {\n                            const newCurvePath = Path[EPathModeType.L](curvePath, [e.offsetX, e.offsetY]);\n\n                            return {\n                                curvePath: newCurvePath,\n                                path: this.line(path, newCurvePath)\n                            }\n                        });\n                    }\n                }\n            },\n            drag: () => undefined, // можно сделать чтобы последняя точка перетаскивалась пока держишь\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        }),\n        [ESelectionMode.Line]: {\n            down: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            drag: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            up: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.Z](path),\n                    currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }\n    };\n\n    line = (path, line) => {\n        const {selectToolParams} = this.props;\n        const {curveType} = selectToolParams;\n        const curveValue = selectToolParams[CurveValueName[curveType]];\n\n        let curve = d3[curveType || \"curveLinear\"];\n        if (Object.keys(CurveValueName).indexOf(curveType) !== -1)\n            curve = curve[CurveValueName[curveType]](curveValue);\n\n        return Path[EPathModeType.Slice](\n            path,\n            stringToPathData(\n                lineFunction.curve(curve)(getLastSlice(line))),\n            this.state.currentSliceN);\n    };\n\n    render() {\n        console.log(\"selector render\", this.state.path);\n        const {width, height, selectToolParams: {mode}, isActive, name, style} = this.props;\n\n        this.pathRef.current && this.pathRef.current.setPathData(this.state.path);\n        this.maskPathRef.current && this.maskPathRef.current.setPathData(this.state.path);\n\n        return (\n            <div\n                style={style}\n                className={classNames(\"selection\", {\n                    [\"selectionActive\"]: isActive\n                })}>\n                <SVG\n                    width={width}\n                    height={height}\n                    onDown={this.selectToolHandlers[mode].down}\n                    onDrag={this.selectToolHandlers[mode].drag}\n                    onUp={this.selectToolHandlers[mode].up}>\n                    {this.state.path && this.state.path.length && <>\n                        <mask\n                            id={`selectionMask${name}`}\n                            ref={this.maskRef}>\n                            <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\"/>\n                            <path\n                                ref={this.maskPathRef}\n                                fillOpacity={1}\n                                fill=\"black\"/>\n                        </mask>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" fillOpacity={0.3}\n                              mask={`url(#selectionMask${name})`}/>\n                        <path\n                            ref={this.pathRef}\n                            fillOpacity={0}\n                            fill=\"black\"\n                            stroke=\"red\"/>\n                    </>}\n                </SVG>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps: MapStateToProps<CanvasSelectionStateProps, CanvasSelectionOwnProps, AppState> = state => ({\n    selectToolParams: state.selectTool.params,\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasSelectionActionProps, CanvasSelectionOwnProps> = {};\n\nexport const Selection = connect<CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasSelectionComponent);","import React from 'react';\nimport {canvasToImageData} from \"../../utils/imageData\";\nimport \"../../styles/canvas.scss\";\nimport * as classNames from \"classnames\";\n\nexport interface CanvasEvent {\n    e: MouseEvent\n    pre?: MouseEvent\n    ctx: CanvasRenderingContext2D\n    canvas: HTMLCanvasElement\n    drawing?: boolean\n}\n\nexport interface CanvasProps {\n    value?: ImageData\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    children?: React.ReactNode\n\n    updateOnDrag?: boolean\n\n    onDown?(e: CanvasEvent)\n    onUp?(e: CanvasEvent)\n    onDraw?(e: CanvasEvent)\n\n    drawProcess?(e: CanvasEvent)\n\n    clickProcess?(e: CanvasEvent)\n\n    moveProcess?(e: CanvasEvent)\n\n    releaseProcess?(e: CanvasEvent)\n\n    onChange?(imageData?: ImageData)\n\n\n}\n\nexport interface CanvasState {\n    drawing: boolean\n}\n\nexport class Canvas extends React.PureComponent<CanvasProps, CanvasState> {\n\n    canvasRef;\n    ctx;\n    pre;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            drawing: false\n        };\n\n        this.canvasRef = React.createRef();\n        this.ctx = null;\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.ctx = this.canvasRef.current.getContext(\"2d\");\n\n\n        this.canvasRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n\n        if (this.props.value instanceof ImageData) {\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        this.canvasRef.current.removeEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        // console.log(Object.keys(this.props).reduce((res, key) => ({\n        //     ...res,\n        //     [key]: prevProps[key] !== this.props[key]\n        // }), {}));\n        //\n        // console.log(prevProps.value !== this.props.value ||\n        //     prevProps.width !== this.props.width ||\n        //     prevProps.height !== this.props.height);\n        if ((\n            prevProps.value !== this.props.value ||\n            prevProps.width !== this.props.width ||\n            prevProps.height !== this.props.height\n        ) && this.props.value instanceof ImageData) {\n            this.ctx = this.canvasRef.current.getContext(\"2d\");\n            console.log()\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    private mouseDownHandler = e => {\n        console.log('canvas down');\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        this.setState({drawing: true});\n\n        const event = {\n            e,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: true\n        };\n\n        const {onDown} = this.props;\n\n        onDown && onDown(event);\n\n        const {clickProcess} = this.props;\n\n        clickProcess && clickProcess(event);\n\n\n    };\n\n    private mouseUpHandler = e => {\n        console.log('canvas up');\n        document.removeEventListener(\"mouseup\", this.mouseUpHandler);\n        if (this.state.drawing) {\n            this.setState({drawing: false});\n\n            this.pre = null;\n            const {onChange} = this.props;\n\n            onChange && onChange(canvasToImageData(this.canvasRef.current));\n\n            const event = {\n                e,\n                ctx: this.ctx,\n                canvas: this.canvasRef.current,\n                drawing: false\n            };\n\n            const {onUp} = this.props;\n\n            onUp && onUp(event);\n\n            const {releaseProcess} = this.props;\n\n            releaseProcess && releaseProcess(event);\n        }\n    };\n\n    private mouseMoveHandler = e => {\n        const {drawProcess, moveProcess} = this.props;\n\n        this.state.drawing && drawProcess && drawProcess({\n            e,\n            pre: this.pre,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: true\n        });\n\n        moveProcess && moveProcess({\n            e,\n            pre: this.pre,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: this.state.drawing\n        });\n\n        // обновление стxейта, может понадобиться для мультиплеера\n        // const {onChange, updateOnDrag = true} = this.props;\n        // updateOnDrag && this.state.drawing && onChange && onChange(canvasToImageData(this.canvasRef.current));\n\n        this.pre = e;\n    };\n\n    // public\n\n    // public setImageData = image =>\n    //     this.ctx.putImageData(image, 0, 0);\n    //\n    // public drawImage = (...p) =>\n    //     this.ctx.drawImage(...p);\n    // public getCtx = () =>\n    //     this.ctx;\n    //\n    // public getImageData = () =>\n    //     this.ctx.getImageData(0, 0, this.props.width, this.props.height);\n    //\n    // public clear = () => {\n    //     this.ctx.clearRect(0, 0, this.props.width, this.props.height);\n    // };\n\n    render() {\n        const {value, width, height, className, style, children} = this.props;\n        console.log(\"canvas render\", style);\n        return (\n            <div style={style} className={classNames(className, \"canvas\")}>\n                <canvas\n                    ref={this.canvasRef}\n                    width={width || (value ? value.width : 300)}\n                    height={height || (value ? value.height : 300)}/>\n                {children}\n            </div>\n        )\n    }\n}","import {Action} from \"redux\";\nimport {EBrushType} from \"../brush/types\";\n\nexport enum ELineType {\n    Default = \"Default\",\n    Interrupted = \"Interrupted\",\n    InterruptedOneStroke = \"InterruptedOneStroke\",\n    Pattren = \"Pattren\",\n}\n\nexport enum ELineCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n}\n\nexport interface LineParams {\n    size: number\n    opacity: number\n    type: ELineType\n    compositeOperation: ELineCompositeOperation\n    pattern: number\n}\n\nexport interface SetLineParamsAction extends Action {\n    params: LineParams\n}","import {Action} from \"redux\";\n\nexport enum EChangeAction {\n    CHANGE = \"change\",\n    TO_START_VALUE = \"change/to-start-value\",\n    ALL_TO_START_VALUE = \"change/all-to-start-value\"\n}\n\nexport interface ChangeAction extends Action {\n    time: number\n}\n\nexport interface ChangeToStartValueAction extends Action {\n    path: string\n}\n\nexport const change = (time: number): ChangeAction =>\n    ({type: EChangeAction.CHANGE, time});\n\nexport const toStartValue = (path: string): ChangeToStartValueAction =>\n    ({type: EChangeAction.TO_START_VALUE, path});\n\nexport const allToStartValue = (): Action =>\n    ({type: EChangeAction.ALL_TO_START_VALUE});","export enum ChangingMode {\n    OnDraw = \"onDraw\",\n    On = \"on\",\n    Off = \"off\"\n}","import {allToStartValue, change} from \"../change/actions\";\nimport {ChangingMode} from \"./types\";\nimport {AppState} from \"../index\";\n\n// todo прикрутить сюда тайпскрипт\n\nexport enum EChangingAction {\n    START = \"changing/start\",\n    STOP = \"changing/stop\",\n    SET_MODE = \"changing/set-mode\"\n}\n\nlet requestID = null;\n\nexport const startChanging = () => (dispatch, getState) => {\n\n    if (!requestID) {\n        requestID && cancelAnimationFrame(requestID);\n\n        const startTime = performance.now();\n\n        requestID = requestAnimationFrame(function changing(time) {\n\n            dispatch(change(time - startTime));\n\n            requestID = requestAnimationFrame(changing);\n        });\n\n        return dispatch({type: EChangingAction.START})\n    }\n};\n\nexport const stopChanging = () => (dispatch, getState) => {\n\n    requestID && cancelAnimationFrame(requestID);\n\n    requestID = null;\n\n    return dispatch({type: EChangingAction.STOP})\n};\n\nexport const startDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw)\n        return dispatch(startChanging())\n\n};\nexport const stopDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw) {\n        dispatch(allToStartValue());\n        return dispatch(stopChanging())\n    }\n};\n\nexport const setChangingMode = (mode: ChangingMode) => (dispatch, getState) => {\n\n    const state: AppState = getState();\n    const prevMode = state.changing.mode;\n\n    if (prevMode === mode) return;\n\n    if (mode === ChangingMode.OnDraw) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    } else if (mode === ChangingMode.On) {\n        dispatch(startChanging());\n    } else if (mode === ChangingMode.Off) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    }\n\n    return dispatch({type: EChangingAction.SET_MODE, mode})\n};\n","import {CanvasState, FunctionState, HeightAction, ImageAction, WidthAction,} from \"../../utils/types\";\nimport {Action} from \"redux\";\nimport {Segment} from \"../../utils/path\";\n\n\nexport enum EPatternType {\n    Canvas = \"Canvas\",\n    Simple = \"Simple\"\n}\n\n\n// HISTORY HISTORY HISTORY HISTORY HISTORY HISTORY HISTORY HISTORY HISTORY\n\nexport interface PatternHistoryItem {\n    current?: CanvasState\n    maskValue?: CanvasState\n}\n\nexport interface HistoryParams {\n    length?: number\n}\n\nexport interface HistoryValue {\n    before: PatternHistoryItem[],\n    after: PatternHistoryItem[]\n}\n\n\n// STORE STORE STORE STORE STORE STORE STORE STORE STORE STORE STORE STORE\n\nexport interface StoreParams {\n\n}\n\n\n// SELECTION SELECTION SELECTION SELECTION SELECTION SELECTION SELECTION SELECTION\n\nexport interface SelectionParams {\n    strokeColor?: string\n    strokeOpacity?: number\n    fillColor?: string\n    fillOpacity?: number\n}\n\nexport type SelectionValue = Segment[];\n\n\n// MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK MASK\n\nexport interface MaskParams {\n    black?: boolean\n    opacity?: number\n}\n\nexport type MaskValue = CanvasState;\n\n\n// ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION ROTATION\n\nexport interface RotationParams {\n}\n\nexport interface RotationValue {\n    angle: number\n    offset: {\n        x: number\n        y: number\n    }\n}\n\n\n// REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING\n\nexport enum ERepeatingType {\n    Grid = \"Grid\",\n    Center = \"Center\",\n    Dart = \"Dart\",\n}\n\nexport interface RepeatingGridParams {\n    x: number\n    y: number\n}\n\nexport interface RepeatingParams {\n    type: ERepeatingType\n    gridParams: RepeatingGridParams\n}\n\nexport interface RepeatingValue {\n}\n\n\n// PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN PATTERN\n\nexport interface PatternParams {\n    history?: HistoryParams\n\n    store?: StoreParams\n\n    rotation?: RotationParams\n\n    repeating?: RepeatingParams\n\n    selection?: SelectionParams\n\n    mask?: MaskParams\n}\n\nexport interface PatternConfig {\n\n    width?: number\n    height?: number\n\n    history?: boolean\n\n    store?: boolean\n\n    selection?: boolean\n\n    mask?: boolean\n\n    rotation?: boolean\n\n    repeating?: boolean\n}\n\n\n// STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES STATES\n\nexport type HistoryState = FunctionState<HistoryValue, HistoryParams>;\nexport type StoreState = FunctionState<CanvasState, StoreParams>;\nexport type SelectionState = FunctionState<SelectionValue, SelectionParams>;\nexport type MaskState = FunctionState<MaskValue, MaskParams>;\nexport type RotationState = FunctionState<RotationValue, RotationParams>;\nexport type RepeatingState = FunctionState<RepeatingValue, RepeatingParams>;\n\nexport interface PatternState {\n    id: string\n    resultImage: HTMLCanvasElement\n    config: PatternConfig\n    current: CanvasState\n    history?: HistoryState,\n    store?: StoreState,\n    selection?: SelectionState\n    mask?: MaskState\n    rotation?: RotationState\n    repeating?: RepeatingState\n\n    connected?: string\n    socket?: any\n}\n\n// ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS ACTIONS\n\nexport interface AddPatternAction extends Action {\n    config?: PatternConfig\n}\n\nexport interface PatternAction extends Action {\n    id: string\n}\n\nexport interface RemovePatternAction extends PatternAction {\n}\n\nexport interface UpdatePatternImageAction extends ImageAction, PatternAction {\n}\n\nexport interface UpdatePatternMaskAction extends ImageAction, PatternAction {\n}\n\nexport interface SetMaskParamsAction extends PatternAction {\n    params: MaskParams\n}\n\nexport interface UpdatePatternSelectionAction extends PatternAction {\n    value: SelectionValue\n}\n\nexport interface EditPatternConfigAction extends PatternAction {\n    config?: PatternConfig\n}\n\nexport interface PatternUndoAction extends PatternAction {\n}\n\nexport interface PatternRedoAction extends PatternAction {\n}\n\nexport interface SetPatternWidthAction extends WidthAction, PatternAction {\n}\n\nexport interface SetPatternHeightAction extends HeightAction, PatternAction {\n}\n\nexport interface SetRotationAction extends PatternAction {\n    rotation: RotationValue\n}\n\nexport interface SetRepeatingAction extends PatternAction {\n    repeating: RepeatingParams\n}\n\nexport interface CreateRoomAction extends PatternAction {\n    roomName: string\n    socket: any\n}","import {ERepeatingType, PatternState} from \"../store/patterns/types\";\n\nexport const getRepeatingCoords = (x, y, pattern: PatternState) => {\n    if (!pattern.repeating) {\n        return [{x, y}];\n    }\n\n    const {params} = pattern.repeating;\n\n    if (params.type === ERepeatingType.Grid) {\n        const {gridParams: {x: xn, y: yn}} = params;\n        const {current: {width, height}} = pattern;\n\n        const xd = width/xn;\n        const yd = height/yn;\n\n        x = x % xd;\n        y = y % yd;\n\n        const array = [];\n\n        for (let i = -1; i < xn + 1; i++) {\n            for (let j = -1; j < yn + 1; j++) {\n                array.push({\n                    x: x + xd * i,\n                    y: y + yd * j,\n                });\n            }\n        }\n\n        return array;\n\n    }\n\n    return [{x, y}];\n};","import * as React from \"react\";\nimport {Canvas, CanvasProps} from \"../_shared/Canvas\";\nimport {circle} from \"../../utils/canvas\";\nimport {AppState} from \"../../store\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {EBrushCompositeOperation, EBrushType} from \"../../store/brush/types\";\nimport {LineState} from \"../../store/line/reducer\";\nimport get from \"lodash/get\";\nimport {ELineType} from \"../../store/line/types\";\nimport {ELineCompositeOperation} from \"../../store/line/types\";\nimport {startDrawChanging, stopDrawChanging} from \"../../store/changing/actions\";\nimport {PatternsState} from \"../../store/patterns/reducer\";\nimport {getRepeatingCoords} from \"../../utils/draw\";\n\nexport interface CanvasDrawStateProps {\n    brush: BrushState\n    line: LineState\n    tool: EToolType\n    patterns: PatternsState\n}\n\nexport interface CanvasDrawActionProps {\n    startChanging()\n\n    stopChanging()\n}\n\nexport interface CanvasDrawOwnProps extends CanvasProps {\n    patternId: string\n}\n\nexport interface CanvasDrawProps extends CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps {\n}\n\nexport interface CanvasDrawState {\n}\n\nfunction getRandomColor() {\n    // return \"black\";\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nclass CanvasDrawComponent extends React.PureComponent<CanvasDrawProps, CanvasDrawState> {\n\n    handlers = {\n        [EToolType.Brush]: {\n            [EBrushType.Square]: (() => {\n                const squareBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {patterns, patternId} = this.props;\n                    const pattern = patterns[patternId];\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n\n                    getRepeatingCoords(e.offsetX, e.offsetY, pattern).forEach(({x, y}) =>\n                        ctx.fillRect(x - size / 2, y - size / 2, size, size));\n\n\n\n\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: squareBrush,\n                    click: squareBrush\n                }\n            })(),\n            [EBrushType.Circle]: (() => {\n                const circleBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: circleBrush,\n                    click: circleBrush\n                }\n            })(),\n            [EBrushType.Pattern]: (() => {\n                const patternBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {patterns} = this.props;\n                    const {patternSize, opacity, compositeOperation, pattern} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n\n                    const rotation = patterns[pattern] && patterns[pattern].rotation.value;\n                    const p = patterns[pattern] && patterns[pattern].resultImage;\n                    if (p) {\n\n                        if (rotation) {\n                            ctx.translate(e.offsetX + rotation.offset.x, e.offsetY + rotation.offset.y);\n                            ctx.rotate(Math.PI * rotation.angle / 180);\n                        }\n\n\n                        const width = patternSize * p.width;\n                        const height = patternSize * p.height;\n\n                        //const i = patterns[pattern].imageMasked;\n                        ctx.drawImage(p, -width / 2, -height / 2, width, height);\n\n                        ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                        ctx.globalAlpha = 1;\n\n                        if (rotation) {\n                            ctx.rotate(-Math.PI * rotation.angle / 180);\n                            ctx.translate(-e.offsetX - rotation.offset.x, -e.offsetY - rotation.offset.y);\n                        }\n                    }\n                };\n                return {\n                    draw: patternBrush,\n                    click: patternBrush\n                }\n            })(),\n        },\n        [EToolType.Line]: {\n            [ELineType.Default]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.beginPath();\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();\n                    ctx.lineWidth = size;\n\n                    ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    ctx.lineTo(e.offsetX, e.offsetY);\n                    // ctx.strokeStyle = getRandomColor();\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.Interrupted]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n                    ctx.beginPath();\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.InterruptedOneStroke]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    if (!pre) return;//\"green\";\n\n                    ctx.beginPath();\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                }\n            }\n        },\n    };\n\n    render() {\n        const {tool, startChanging, stopChanging} = this.props;\n\n        const getType = getTypeField[tool];\n        const type = getType ? getType(this.props) : 0;\n        const handlersByTool = this.handlers[tool];\n        const handlers = handlersByTool && handlersByTool[type];\n        console.log(handlers);\n        return (\n            <Canvas\n                onDown={startChanging}\n                onUp={stopChanging}\n                drawProcess={handlers && handlers.draw}\n                clickProcess={handlers && handlers.click}\n                releaseProcess={handlers && handlers.release}\n                {...this.props}/>\n        );\n    }\n}\n\nconst getTypeField = {\n    [EToolType.Line]: props => get(props, \"line.params.type\"),\n    [EToolType.Brush]: props => get(props, \"brush.params.type\"),\n};\n\nconst mapStateToProps: MapStateToProps<CanvasDrawStateProps, CanvasDrawOwnProps, AppState> = state => ({\n    brush: state.brush,\n    line: state.line,\n    tool: state.tool.current,\n    patterns: state.patterns\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasDrawActionProps, CanvasDrawOwnProps> = {\n    startChanging: startDrawChanging, stopChanging: stopDrawChanging\n};\n\nexport const Draw = connect<CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasDrawComponent);","import * as React from \"react\";\n\nexport interface InputNumberProps {\n    onChange(value: number): void\n\n    min?: number\n    max?: number\n    step?: number\n    value?: number\n    delay?: number\n    notZero?: boolean\n}\n\nlet timer;\n\nexport const InputNumber: React.FC<InputNumberProps> = ({value, onChange, min = 0, max = 1, step = 0.05, delay, notZero}) => {\n\n    const [_value, set_value] = React.useState(value);\n\n    React.useEffect(() => {\n        value !== _value && !timer && set_value(value)\n    });\n\n    const changeHandler = e => {\n        const n_value = +e.target.value;\n\n        if (!delay) {\n\n            if (notZero && !n_value) {\n                return;\n            }\n\n            set_value(n_value);\n            onChange(n_value)\n\n        } else {\n\n            set_value(n_value);\n\n            timer && clearTimeout(timer);\n            timer = setTimeout(() => {\n                if (notZero && !n_value) {\n                    set_value(value);\n                    return;\n                }\n\n                onChange(n_value);\n                clearTimeout(timer);\n                timer = null; // чистим таймер чтобы обновлять значение из пропсов только когда таймер не запущен\n\n            }, delay)\n        }\n    };\n\n    return (\n        <input\n            type=\"number\"\n            step={step}\n            min={min}\n            max={max}\n            value={_value}\n            onChange={changeHandler}/>\n    );\n};","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {EToolType, selectionTools} from \"../../store/tool/types\";\nimport {Selection} from \"./Selection\";\nimport {Draw} from \"./Draw\";\nimport {MaskParams, RotationValue, StoreState} from \"../../store/patterns/types\";\nimport {SelectionValue} from \"../../store/patterns/types\";\nimport {SelectionParams, SelectionState} from \"../../store/patterns/types\";\nimport \"../../styles/area.scss\";\n\nexport interface AreaStateProps {\n    currentTool: EToolType\n}\n\nexport interface AreaActionProps {\n}\n\nexport interface AreaOwnProps {\n    name: any // нужен для маски выделения\n    height: number\n    width: number\n    rotation?: RotationValue\n\n    imageValue: ImageData\n    selectionValue: SelectionValue\n    selectionParams: SelectionParams\n\n    onImageChange(imageData: ImageData)\n\n    onSelectionChange(selectionValue: SelectionValue)\n}\n\nexport interface AreaProps extends AreaStateProps, AreaActionProps, AreaOwnProps {\n\n}\n\nexport interface AreaState {\n    rotation?: RotationValue\n    style?: any\n}\n\nconst getStyle = (rotation) => ({\n    transform: `rotate(${rotation.angle}deg) translateY(${-rotation.offset.y}px) translateX(${rotation.offset.x}px)`,\n});\n\nclass AreaComponent extends React.PureComponent<AreaProps, AreaState> {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: getStyle(props.rotation),\n            rotation: props.rotation\n        };\n    }\n\n\n    static getDerivedStateFromProps(props, state) {\n        // if (state.rotation !== props.rotation) {\n            return {\n                rotation: props.rotation,\n                style: getStyle(props.rotation)\n            }\n        // }\n    }\n\n    render() {\n        const {currentTool, name, height, width, imageValue, selectionValue, selectionParams, onImageChange, onSelectionChange, rotation} = this.props;\n\n        console.log(\"area\", this.state);\n        return (\n            <div className=\"area\">\n                <Draw\n                    patternId={name}\n                    style={this.state.style}\n                    value={imageValue}\n                    width={width}\n                    height={height}\n                    onChange={onImageChange}/>\n                <Selection\n                    style={this.state.style}\n                    isActive={selectionTools.indexOf(currentTool) !== -1}\n                    name={name}\n                    width={width}\n                    height={height}\n                    value={selectionValue}\n                    params={selectionParams}\n                    onChange={onSelectionChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<AreaStateProps, AreaOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<AreaActionProps, AreaOwnProps> = {};\n\nexport const Area = connect<AreaStateProps, AreaActionProps, AreaOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(AreaComponent);","import * as React from \"react\";\nimport * as classNames from \"classnames\";\n\nexport interface InputTextProps {\n    onChange?(value: string): void\n\n    onFocus?()\n    onBlur?()\n\n    className?: string\n\n    value: string\n}\n\nexport const InputText: React.FC<InputTextProps> = ({onChange, onFocus, onBlur, value, className}) => {\n\n    const changeHandler = e => {\n        onChange && onChange(e.target.value)\n    };\n\n    return (\n        <input\n            className={classNames(className, \"input-text\")}\n            type=\"text\"\n            value={value}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onChange={changeHandler}/>\n    );\n};","import * as React from \"react\";\nimport {Button, ButtonEventData, ButtonProps} from \"./Button\";\nimport * as classNames from \"classnames\";\n\nexport interface ButtonSelectEventData extends ButtonEventData {\n    selected?: boolean\n}\n\nexport interface ButtonSelectProps extends ButtonProps {\n    selected?: boolean\n\n    onClick?(data?: ButtonSelectEventData)\n\n    onMouseDown?(data?: ButtonSelectEventData)\n    onMouseUp?(data?: ButtonSelectEventData)\n}\n\nexport const ButtonSelect: React.FC<ButtonSelectProps> = ({className, selected, onClick, onMouseDown, onMouseUp, ...props}) => {\n\n    return (\n        <Button\n            {...props}\n            onClick={data => onClick && onClick({...data, selected})}\n            onMouseDown={data => onMouseDown && onMouseDown({...data, selected})}\n            onMouseUp={data => onMouseUp && onMouseUp({...data, selected})}\n            className={classNames(\"button-select\", className, {[\"button-select-selected\"]: selected})}/>\n    );\n};","// Which HTML element is the target of the event\nlet curtop;\nfunction mouseTarget(e) {\n    var targ;\n    if (!e) var e = window.event as any;\n    if (e.target) targ = e.target;\n    else if (e.srcElement) targ = e.srcElement;\n    if (targ.nodeType == 3) // defeat Safari bug\n        targ = targ.parentNode;\n    return targ;\n}\n\n// Mouse position relative to the document\n// From http://www.quirksmode.org/js/events_properties.html\nfunction mousePositionDocument(e) {\n    var posx = 0;\n    var posy = 0;\n    if (!e) {\n        var e = window.event as any;\n    }\n    if (e.pageX || e.pageY) {\n        posx = e.pageX;\n        posy = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n    return {\n        x : posx,\n        y : posy\n    };\n}\n\n// Find out where an element is on the page\n// From http://www.quirksmode.org/js/findpos.html\nfunction findPos(obj) {\n    var curleft = curtop = 0;\n    if (obj.offsetParent) {\n        do {\n            curleft += obj.offsetLeft;\n            curtop += obj.offsetTop;\n        } while (obj = obj.offsetParent);\n    }\n    return {\n        left : curleft,\n        top : curtop\n    };\n}\n\n// Mouse position relative to the element\n// not working on IE7 and below\nexport function mousePositionElement(e) {\n    var mousePosDoc = mousePositionDocument(e);\n    var target = mouseTarget(e);\n    var targetPos = findPos(target);\n    var posx = mousePosDoc.x - targetPos.left;\n    var posy = mousePosDoc.y - targetPos.top;\n    return {\n        x : posx,\n        y : posy\n    };\n}","import {Action} from \"redux\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\n\n\nexport enum ECFType {\n    SIN = \"sin\",\n    LOOP = 'loop'\n}\n\nexport interface ChangeFunction {\n    id: string\n    type: ECFType\n    params: any\n    // paramsConfig: any\n    paramsConfig: ParamConfig[]\n}\n\nexport interface AddCFAction extends Action {\n    cfType: ECFType\n}\n\nexport interface ChangeCFParamsAction extends Action {\n    id: string\n    params: any\n}\n","import * as React from \"react\";\nimport * as keyboardjs from \"keyboardjs\";\n\nexport interface KeyProps {\n    keys: string | string[]\n\n    onPress?(e?: any, keys?: string | string[])\n\n    onRelease?(e?: any, keys?: string | string[])\n}\n\nexport interface KeyState {\n    keys: string\n}\n\nexport class Key extends React.PureComponent<KeyProps, KeyState> {\n\n    // state = {\n    //     keys: null\n    // };\n\n    handlePress = e => {\n        e.preventRepeat();\n        const {onPress, keys} = this.props;\n        onPress && onPress(e, keys)\n    };\n\n    handleRelease = e => {\n        const {onRelease, keys} = this.props;\n        onRelease && onRelease(e, keys)\n    };\n\n    // static getDerivedStateFromProps(props, state) {\n    //     if (props.keys !== state.keys) {\n    //         return {keys: props.keys};\n    //     }\n    //     return;\n    // }\n\n    componentDidMount() {\n        const {keys} = this.props;\n        console.log(this.props);\n        keyboardjs.bind(keys, this.handlePress, this.handleRelease)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.keys !== this.props.keys) {\n            keyboardjs.unbind(prevProps.keys, this.handlePress, this.handleRelease);\n            keyboardjs.bind(this.props.keys, this.handlePress, this.handleRelease);\n        }\n    }\n\n    componentWillUnmount() {\n        keyboardjs.unbind(this.props.keys, this.handlePress, this.handleRelease);\n    }\n\n    render() {\n        console.log(\"keys render\", this.props.keys);\n        return <></>;\n    }\n}","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect, ButtonSelectProps, ButtonSelectEventData} from \"./ButtonSelect\";\nimport {Key} from \"./Key\";\nimport {mousePositionElement} from \"../../utils/mouse\";\nimport {range} from \"d3-array\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\n\nconst DEFAULT_WIDTH = 70;\nconst defaultGetText = value => value.toFixed(1);\n\nexport const ValueD = {\n    VerticalLinear: (step: number) => (oldValue: any, dx: number, dy) => oldValue - dy / step,\n};\n\nexport interface ButtonNumberEventData extends ButtonSelectEventData {\n}\n\nexport interface ButtonNumberProps extends ButtonSelectProps {\n\n    integer?: boolean\n\n    width?: number\n    precision?: number\n\n    text?: string\n\n    getText?(value?: any): string\n\n    range?: [number, number]\n\n    shortcut?: string | string[]\n\n\n    valueD?(oldValue: any, dx: number, dy: number): any\n\n    onChange?(data?: ButtonNumberEventData)\n\n    onMouseDown?(data?: ButtonNumberEventData)\n\n    onMouseUp?(data?: ButtonNumberEventData)\n\n    onClick?(data?: ButtonNumberEventData)\n\n    onPress?(data?: ButtonNumberEventData)\n\n    onRelease?(data?: ButtonNumberEventData)\n\n\n    changeFunctionId?: string\n    changeFunctionType?: ECFType\n    changingStartValue?: number\n    changeFunctionParams?: any\n\n}\n\nexport interface ButtonNumberState {\n    value?: any\n    startPoint: [number, number]\n    startValue?: any\n    changing: boolean\n}\n\nexport class ButtonNumber extends React.Component<ButtonNumberProps, ButtonNumberState> {\n\n    constructor(props) {\n        super(props);\n\n        const {range} = props;\n\n        this.state = {\n            value: props.value || range[0],\n            startPoint: null,\n            startValue: null,\n            changing: false,\n        };\n\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.value !== this.state.value\n            || nextProps.changingStartValue !== this.props.changingStartValue\n            || nextProps.changeFunctionParams !== this.props.changeFunctionParams\n            || nextProps.changeFunctionId !== this.props.changeFunctionId\n            || nextProps.shortcut !== this.props.shortcut\n            || nextProps.className !== this.props.className;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            ...(!prevState.startPoint && nextProps.value !== prevState.value ? {\n                value: nextProps.value\n            } : {}),\n        };\n    }\n\n    handleDown = data => {\n\n        console.log(\"down\");\n\n\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {e} = data;\n        e.persist();\n\n        const {onMouseDown, name, selected} = this.props;\n        const {value} = this.state;\n\n        onMouseDown && onMouseDown({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: [e.clientX, e.clientY]\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handleMove);\n            document.addEventListener(\"mouseup\", this.handleUp);\n        });\n    };\n\n    handleMove = e => {\n        const {onChange, name, selected} = this.props;\n        const value = this.calcValue(e);\n\n\n        console.log(\"move\", value);\n\n        onChange && onChange({e, value, name, selected});\n\n        this.setState({value});\n    };\n\n\n    handleUp = (e) => {\n        // //  modulation\n\n\n        const {changingStartValue, onClick, onMouseUp, onChange, name, selected, width = DEFAULT_WIDTH, precision = 100, range} = this.props;\n        let value = this.calcValue(e);\n\n\n        const one = (range[1] - range[0]) / precision;\n//!changingStartValue &&\n        if (Math.abs(value - this.state.startValue) < one) {\n\n            const y = mousePositionElement(e).x;\n            console.log(\"11111\", y, width / 2, this.state.startValue);\n            value = Math.min(Math.max(\n                this.state.startValue + (y > width / 2 ? one : -one)\n                , range[0]), range[1]);\n\n            console.log(value, \"=\", this.state.startValue, \"+\", (y > width / 2 ? 1 : -1));\n            onChange && onChange({e, value, name, selected});\n        } else {\n            onMouseUp && onMouseUp({e, value, name, selected});\n\n            onClick && onClick({value, name, e, selected});\n\n        }\n\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handleMove);\n            document.removeEventListener(\"mouseup\", this.handleUp);\n        });\n\n\n    };\n\n\n    handlePress = e => {\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {onPress, name, selected} = this.props;\n        const {value} = this.state;\n\n        onPress && onPress({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: null\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    handlePressed = e => {\n        if (!this.state.startPoint) {\n            this.setState({\n                startPoint: [e.clientX, e.clientY]\n            });\n        } else {\n            const {onChange, name, selected} = this.props;\n            const value = this.calcValue(e);\n\n            onChange && onChange({e, value, name, selected});\n\n            this.setState({value});\n        }\n    };\n\n    handleRelease = e => {\n        const {onRelease, name, selected} = this.props;\n        const {value} = this.state;\n\n        onRelease && onRelease({value, name, e, selected});\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    calcValue = e => {\n        console.log(this.state.startValue);\n        const {range, valueD = ValueD.VerticalLinear(5), integer} = this.props;\n\n        let nextValue = valueD(this.state.startValue, e.clientX - this.state.startPoint[0], e.clientY - this.state.startPoint[1]);\n        nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n\n        if (integer) {\n            nextValue = Math.round(nextValue);\n        }\n        return nextValue;\n    };\n\n    render() {\n        const {changingStartValue, changeFunctionId, changeFunctionType, changeFunctionParams, range, width = DEFAULT_WIDTH, className, getText = defaultGetText, text, shortcut, ...otherProps} = this.props;\n        const {value = 0, startValue} = this.state;\n\n        console.log(\"number button render\", getText(value));\n\n\n        const Amplitude = amplitudeComponent[changeFunctionType];\n\n\n        return (\n            <ButtonSelect\n                {...otherProps}\n                className={classNames(\"button-number\", className, {\n                    [\"button-number-active\"]: !!startValue,\n                })}\n                width={width}\n                onMouseDown={this.handleDown}>\n                <div\n                    className={\"button-number-value\"}\n                    style={{width: (value - range[0]) / (range[1] - range[0]) * 100 + \"%\"}}>\n                    {getText ? getText(value) : text}\n                </div>\n\n                {changeFunctionId &&\n                <Amplitude\n                    range={range}\n                    params={changeFunctionParams}\n                    changingStartValue={changingStartValue}\n                    changeFunctionId={changeFunctionId}/>}\n\n                {shortcut &&\n                <Key\n                    keys={shortcut}\n                    onPress={this.handlePress}\n                    onRelease={this.handleRelease}/>}\n            </ButtonSelect>\n        );\n    }\n}\n\nconst amplitudeComponent = {\n    [ECFType.SIN]: ({range, params, changingStartValue, changeFunctionId}) => {\n        const startVPerc = (changingStartValue / (range[1] - range[0]));\n\n        const ampWidth = (Math.min(startVPerc, params.a) + Math.min(1 - startVPerc, params.a));\n\n        return (\n            <div\n                className={\"button-number-amplitude\"}\n                style={{\n                    width: ampWidth * 100 + \"%\",\n                    left: `calc(${(Math.max(startVPerc - params.a, 0)) * 100}%)`\n                }}>\n                    <span>\n                    {changeFunctionId}\n                    </span>\n            </div>\n        );\n    },\n    [ECFType.LOOP]: ({range, params, changingStartValue, changeFunctionId}) => {\n\n        return (\n            <div\n                className={\"button-number-amplitude\"}\n                style={{\n                    width: (params.end - params.start) * 100 + \"%\",\n                    left: `${params.start * 100}%`\n                }}>\n                    <span>\n                    {changeFunctionId}\n                    </span>\n            </div>\n        );\n    },\n};","import {ActivateValueChangingAction, DeactivateValueChangingAction, SetValueInChangingListAction} from \"./types\";\nimport {toStartValue} from \"../change/actions\";\nimport {AppState} from \"../index\";\n\n\n// todo typescript\nexport enum EChangingValuesAction {\n    SET_VALUE_IN_CHANGING_LIST = \"changing-values/set-value\",\n    SET_START_VALUE = \"changing-values/set-start-value\",\n\n    ACTIVATE_VALUE_CHANGING = \"changing-values/activate\",\n    DEACTIVATE_VALUE_CHANGING = \"changing-values/deactivate\",\n}\n\nexport const setValueInChangingList =\n    (path: string, changeFunctionId: string, range: [number, number], startValue: number) => (dispatch) => {\n        dispatch(toStartValue(path));\n        dispatch({\n            type: EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST,\n            path, changeFunctionId, range, startValue\n        })\n    };\n\nexport const setStartValue =\n    (path: string, startValue: number) => (dispatch) => {\n        dispatch({\n            type: EChangingValuesAction.SET_START_VALUE,\n            path, startValue\n        })\n    };\n\nexport const activateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch({type: EChangingValuesAction.ACTIVATE_VALUE_CHANGING, path});\n    }\n};\n\nexport const deactivateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch(toStartValue(path));\n        dispatch({type: EChangingValuesAction.DEACTIVATE_VALUE_CHANGING, path});\n    }\n};","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect} from \"./ButtonSelect\";\nimport {ButtonEventData} from \"./Button\";\n\nexport interface SelectButtonsEventData extends ButtonEventData {\n    item: any\n    items: any[]\n}\n\nexport interface SelectButtonsProps {\n    className?: string\n    name?: string\n    items: any[]\n    value?: any\n\n    nullAble?: boolean\n\n    br?: number\n\n    onChange?(data?: SelectButtonsEventData)\n\n    getValue?(item?: any)\n\n    getText?(item?: any)\n}\n\nexport const defaultGetValue = ({value}) => value;\nexport const defaultGetText = ({text}) => text;\n\nexport class SelectButtons extends React.PureComponent<SelectButtonsProps> {\n\n\n    handleClick = ({value: item, selected, e}) => {\n        const {name, items, onChange, getValue = defaultGetValue, nullAble, value: oldValue} = this.props;\n        let value = getValue(item);\n\n        if (nullAble && oldValue === value) {\n            value = null\n        }\n\n        onChange && onChange({\n            value,\n            e, item, items, name\n        });\n    };\n\n    render() {\n        const {className, items, value, name, getValue = defaultGetValue, getText = defaultGetText, br} = this.props;\n\n        console.log(\"select buttons render\", name);\n\n        return (\n            <span className={classNames(className, \"select-buttons\")}>\n            {items.map((item, index) => (\n                <>\n                    {!!br && !!index && !(index % br) && <br/>}\n                    <ButtonSelect\n                        value={item}\n                        key={getValue(item)}\n                        selected={getValue(item) === value}\n                        onMouseUp={(e) => {\n                            console.log(e)\n                        }}\n                        onClick={this.handleClick}>\n                        {getText(item)}\n                    </ButtonSelect>\n                </>\n            ))}</span>\n        );\n    }\n}","import * as React from \"react\";\nimport {defaultGetText, SelectButtons, SelectButtonsProps} from \"./SelectButtons\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/selectDrop.scss\"\nimport {Button} from \"./Button\";\n\nexport interface SelectDropProps extends SelectButtonsProps {\n\n}\n\nexport interface SelectDropState {\n\n}\n\nexport class SelectDrop extends React.PureComponent<SelectDropProps, SelectDropState> {\n\n    render() {\n        const {className, ...props} = this.props;\n        const {value, getText = defaultGetText} = props;\n        console.log(\"select drop render\", props.name, value);\n\n        return (\n            <div className={classNames(className, \"select-drop\")}>\n                <Button className={\"select-drop-value\"}>\n                    {value || \"null\"}\n                </Button>\n                <SelectButtons {...props} className={\"select-drop-items\"}/>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/hover-hideable.scss\";\n\nexport interface HoverHideableProps {\n    children?: React.ReactNode\n    button?: React.ReactNode\n    className?: string\n\n}\n\nexport interface HoverHideableState {\n\n}\n\nexport class HoverHideable extends React.PureComponent<HoverHideableProps, HoverHideableState> {\n\n    render() {\n        const {children, button, className} = this.props;\n        return (\n            <div className={classNames(\"hover-hideable\", className)}>\n                {button}\n                <div className={\"hover-hideable-hidden-part\"}>{children}</div>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {InputText} from \"./InputText\";\nimport * as keyboardjs from \"keyboardjs\";\nimport \"../../styles/inputShortcut.scss\";\n\nexport interface ShortcutInputProps {\n    onChange(value: string)\n\n    value: string\n\n\n}\n\nexport interface ShortcutInputState {\n\n}\n\nexport class ShortcutInput extends React.PureComponent<ShortcutInputProps, ShortcutInputState> {\n\n    handleChange = (e) => {\n        this.props.onChange(e.key === \"Backspace\" ? null : e.key);\n    };\n\n    handleFocus = () => {\n        keyboardjs.bind(\"\", this.handleChange)\n    };\n    handleBlur = () => {\n        keyboardjs.unbind(\"\", this.handleChange)\n    };\n\n\n    render() {\n        const {value} = this.props;\n        return (\n            <InputText\n                className={\"shortcut-input\"}\n                value={value}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n                onChange={() => {return;\n                }}/>\n        );\n    }\n}","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport * as classNames from \"classnames\";\nimport {ButtonNumber, ButtonNumberProps} from \"./ButtonNumber\";\nimport {objectToSelectItems} from \"../../utils/utils\";\nimport {ChangeFunctionsState} from \"../../store/changeFunctions/reducer\";\nimport {Button} from \"./Button\";\nimport {SelectDrop} from \"./SelectDrop\";\nimport {\n    activateValueChanging,\n    deactivateValueChanging,\n    setValueInChangingList,\n    setStartValue\n} from \"../../store/changingValues/actions\";\nimport {ChangingValuesState} from \"../../store/changingValues/reducer\";\nimport {toStartValue} from \"../../store/change/actions\";\nimport \"../../styles/buttonNumberCF.scss\";\nimport {SelectButtons} from \"./SelectButtons\";\nimport {HoverHideable} from \"./HoverHideable\";\nimport {ShortcutInput} from \"./ShortcutInput\";\n\nexport interface ButtonNumberCFStateProps {\n    changeFunctions: ChangeFunctionsState\n    changingValues: ChangingValuesState\n}\n\nexport interface ButtonNumberCFActionProps {\n    setValueInChangingList(\n        path: string,\n        changeFunctionId: string,\n        range: [number, number],\n        startValue: number)\n\n    deactivateValueChanging(path: string)\n\n    activateValueChanging(path: string)\n\n    toStartValue(path: string)\n\n    setStartValue(path: string, startValue: number)\n}\n\nexport interface ButtonNumberCFOwnProps extends ButtonNumberProps {\n    path: string\n}\n\nexport interface ButtonNumberCFProps extends ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps {\n\n}\n\nexport interface ButtonNumberCFState {\n    changeFunctionsItems: any[],\n    changeFunctions: ChangeFunctionsState\n    active: boolean\n    shortcut: string\n}\n\nclass ButtonNumberCFComponent extends React.PureComponent<ButtonNumberCFProps, ButtonNumberCFState> {\n\n    state = {\n        changeFunctionsItems: [],\n        changeFunctions: null,\n        active: false,\n        shortcut: null\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.changeFunctions !== state.changeFunctions) {\n            return {\n                changeFunctions: props.changeFunctions,\n                changeFunctionsItems: objectToSelectItems(props.changeFunctions, ({id}) => id, ({id}) => id)\n            }\n        }\n        return null;\n    }\n\n    handleCFChange = ({value: changeFunctionId}) => {\n        const {setValueInChangingList, path, range, value} = this.props;\n        setValueInChangingList(path, changeFunctionId, range, value);\n    };\n\n    handleChange = (data) => {\n\n        this.props.onChange(data);\n\n        const {setStartValue, path, value} = this.props;\n        setStartValue(path, value);\n    };\n\n    handleStartManualChanging = () => {\n        const {deactivateValueChanging, path} = this.props;\n        deactivateValueChanging(path);\n        this.setState({active: true});\n    };\n\n    handleStopManualChanging = () => {\n        const {activateValueChanging, path} = this.props;\n        activateValueChanging(path);\n        this.setState({active: false});\n    };\n\n    handleShortcutChange = shortcut => this.setState({shortcut});\n\n    render() {\n        const {changeFunctions, changingValues, path, ...buttonNumberProps} = this.props;\n\n        const {onChange, onMouseDown, onMouseUp, onPress, onRelease, ...othersButtonNumberProps} = buttonNumberProps;\n\n        console.log(\"render b cf\");\n\n        const changingValueData = changingValues[path];\n        const changingStartValue = changingValueData && changingValueData.startValue;\n        const changeFunctionId = changingValueData && changingValues[path].changeFunctionId;\n        const changingParams = changingValueData && changeFunctions[changeFunctionId].params;\n        const changingType = changingValueData && changeFunctions[changeFunctionId].type;\n\n        return (\n            <HoverHideable\n                className={\"button-number-cf\"}\n                button={\n                    <ButtonNumber\n                        {...othersButtonNumberProps}\n\n                        shortcut={this.state.shortcut}\n\n                        className={classNames('button-number-cf-value', {\n                            [\"button-number-cf-value-active\"]: this.state.active\n                        })}\n\n                        changeFunctionId={changeFunctionId}\n                        changeFunctionType={changingType}\n                        changingStartValue={changingStartValue}\n                        changeFunctionParams={changingParams}\n\n                        onChange={this.handleChange}\n                        onMouseDown={this.handleStartManualChanging}\n                        onPress={this.handleStartManualChanging}\n                        onMouseUp={this.handleStopManualChanging}\n                        onRelease={this.handleStopManualChanging}/>\n                }>\n                {!this.state.active &&\n                <HoverHideable\n                    className={\"button-number-cf-settings\"}\n                    button={<div className=\"button-number-cf-settings-handler\"><div></div></div>}>\n\n                    <ShortcutInput\n                        value={this.state.shortcut}\n                        onChange={this.handleShortcutChange}/>\n                    <SelectDrop\n                        nullAble\n                        className={\"button-number-cf-select\"}\n                        value={changingValues[this.props.path] && changingValues[this.props.path].changeFunctionId}\n                        onChange={this.handleCFChange}\n                        items={this.state.changeFunctionsItems}/>\n                </HoverHideable>\n                }\n            </HoverHideable>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ButtonNumberCFStateProps, {}, AppState> = state => ({\n    changeFunctions: state.changeFunctions,\n    changingValues: state.changingValues\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ButtonNumberCFActionProps, ButtonNumberCFOwnProps> = {\n    setValueInChangingList, deactivateValueChanging, activateValueChanging, toStartValue, setStartValue\n};\n\nexport const ButtonNumberCF = connect<ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ButtonNumberCFComponent);","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {Canvas, CanvasProps} from \"../_shared/Canvas\";\nimport \"../../styles/mask.scss\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {LineState} from \"../../store/line/reducer\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {startDrawChanging, stopDrawChanging} from \"../../store/changing/actions\";\nimport get from \"lodash/get\";\nimport {ELineCompositeOperation, ELineType} from \"../../store/line/types\";\nimport {EBrushType} from \"../../store/brush/types\";\nimport {MaskParams} from \"../../store/patterns/types\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\nimport {RotationValue} from \"../../store/patterns/types\";\nimport {Draw} from \"./Draw\";\n\nexport interface MaskDrawStateProps {\n    brush: BrushState\n    line: LineState\n    tool: EToolType\n}\n\nexport interface MaskDrawActionProps {\n    startChanging()\n\n    stopChanging()\n}\n\nexport interface MaskDrawOwnProps extends CanvasProps {\n    params?: MaskParams\n    name: any\n    rotation?: RotationValue\n\n    onParamsChange(params: MaskParams)\n}\n\nexport interface MaskDrawProps extends MaskDrawStateProps, MaskDrawActionProps, MaskDrawOwnProps {\n\n}\n\nexport interface MaskDrawState {\n    style?: any\n    rotation?: RotationValue\n\n}\n\nconst opacityRange = [0, 1] as [number, number];\n\nconst brush = ({e, pre, ctx, canvas}, {size, opacity, type, compositeOperation}) => {\n    ctx.fillStyle = getRandomColor();//\"black\";\n    ctx.globalAlpha = opacity;\n    ctx.globalCompositeOperation = compositeOperation;\n\n    if (type === EBrushType.Square) {\n        ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n    } else if (type === EBrushType.Circle) {\n        ctx.beginPath();\n        ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n    // else if (this.state.brush.type === EBrushType.Pattern && this.state.patterns[this.state.currentPattern]) {\n    //     const p = this.state.patterns[this.state.currentPattern].image;\n    //     const i = this.state.patterns[this.state.currentPattern].imageMasked;\n    //     ctx.drawImage(i, e.offsetX - p.width / 2, e.offsetY - p.height / 2, p.width, p.height);\n    // }\n\n    ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n    ctx.globalAlpha = 1;\n};\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nconst BLACK = \"black\";\n\nenum ECompositeOperation {\n    sourceOver = \"source-over\",\n    destinationOver = \"destination-over\",\n    destinationOut = \"destination-out\",\n}\n\nconst getStyle = (rotation) => ({\n    transform: `rotate(${rotation.angle}deg) translateY(${-rotation.offset.y}px) translateX(${rotation.offset.x}px)`,\n});\n\nclass MaskDrawComponent extends React.PureComponent<MaskDrawProps, MaskDrawState> {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: getStyle(props.rotation),\n            rotation: props.rotation\n        };\n    }\n\n\n    static getDerivedStateFromProps(props, state) {\n        // if (state.rotation !== props.rotation) {\n        return {\n            rotation: props.rotation,\n            style: getStyle(props.rotation)\n        }\n        // }\n    }\n\n    handlers = {\n        [EToolType.Brush]: {\n            [EBrushType.Square]: {\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                },\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                }\n            },\n            [EBrushType.Circle]: {\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                },\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.brush.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                }\n            },\n        },\n        [EToolType.Line]: {\n            [ELineType.Default]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n                    ctx.strokeStyle = BLACK;\n\n                    ctx.beginPath();\n                    ctx.lineWidth = size;\n\n                    ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity} = this.props.line.params;\n                    ctx.lineTo(e.offsetX, e.offsetY);\n                    // ctx.strokeStyle = getRandomColor();\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.Interrupted]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.strokeStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n                    ctx.beginPath();\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;\n\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.InterruptedOneStroke]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.strokeStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;//\"green\";\n\n                    ctx.beginPath();\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                }\n            }\n        },\n    };\n\n    handleOpacityChange = ({value}) =>\n        this.props.onParamsChange({[\"opacity\"]: value});\n\n    handleBlackChange = (data) =>\n        this.props.onParamsChange({[\"black\"]: !data.selected});\n\n    render() {\n\n        const {tool, startChanging, stopChanging, params, name} = this.props;\n\n        const getType = getTypeField[tool];\n        const type = getType ? getType(this.props) : 0;\n        const handlersByTool = this.handlers[tool];\n        const handlers = handlersByTool && handlersByTool[type];\n\n        return (\n            <>\n                <div>\n                    <ButtonNumberCF\n                        path={`patterns.${name}.mask.params.opacity`}\n                        name={\"opacity\"}\n                        range={opacityRange}\n                        value={params.opacity}\n                        onChange={this.handleOpacityChange}/>\n                    <div>\n                        <ButtonSelect\n                            name={\"black\"}\n                            selected={params.black}\n                            onClick={this.handleBlackChange}/>\n                    </div>\n                </div>\n                <Canvas\n                    style={this.state.style}\n                    className={\"maskCanvas\"}\n                    onDown={startChanging}\n                    onUp={stopChanging}\n                    drawProcess={handlers && handlers.draw}\n                    clickProcess={handlers && handlers.click}\n                    releaseProcess={handlers && handlers.release}\n                    {...this.props}/>\n            </>\n        );\n    }\n}\n\nconst getTypeField = {\n    [EToolType.Line]: props => get(props, \"line.params.type\"),\n    [EToolType.Brush]: props => get(props, \"brush.params.type\"),\n};\n\nconst mapStateToProps: MapStateToProps<MaskDrawStateProps, MaskDrawOwnProps, AppState> = state => ({\n    brush: state.brush,\n    line: state.line,\n    tool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<MaskDrawActionProps, MaskDrawOwnProps> = {\n    startChanging: startDrawChanging, stopChanging: stopDrawChanging\n};\n\nexport const MaskDraw = connect<MaskDrawStateProps, MaskDrawActionProps, MaskDrawOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MaskDrawComponent);","import * as React from \"react\";\nimport {RotationValue} from \"../../store/patterns/types\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\n\nexport interface RotationControlsProps {\n    rotation: RotationValue\n    patternId: string\n\n    onChange(rotation: RotationValue)\n\n}\n\nexport interface RotationControlsState {\n\n}\n\n\nconst angleRange = [0, 360] as [number, number];\nconst angleValueD = ValueD.VerticalLinear(0.4);\n\nconst offsetRange = [-200, 200] as [number, number];\nconst offsetValueD = ValueD.VerticalLinear(0.6);\n\nexport class RotationControls extends React.PureComponent<RotationControlsProps, RotationControlsState> {\n\n    handleAngleChange = ({value: angle}) => {\n        const {onChange, rotation} = this.props;\n        onChange({...rotation, angle})\n    };\n\n    handleOffsetChange = ({value, name}) => {\n        const {onChange, rotation} = this.props;\n        onChange({\n            ...rotation, offset: {\n                ...rotation.offset,\n                [name]: value\n            }\n        })\n    };\n\n    render() {\n        const {angle, offset} = this.props.rotation;\n        return (\n            <div>\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.angle`}\n                    name={\"angle\"}\n                    value={angle}\n                    range={angleRange}\n                    valueD={angleValueD}\n                    onChange={this.handleAngleChange}/>\n\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.offset.x`}\n                    name={\"x\"}\n                    value={offset.x}\n                    range={offsetRange}\n                    valueD={offsetValueD}\n                    onChange={this.handleOffsetChange}/>\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.offset.y`}\n                    name={\"y\"}\n                    value={offset.y}\n                    range={offsetRange}\n                    valueD={offsetValueD}\n                    onChange={this.handleOffsetChange}/>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {ERepeatingType, RepeatingParams} from \"../../store/patterns/types\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\n\nexport interface RepeatingControlsProps {\n    repeating: RepeatingParams\n    patternId: string\n\n    onChange(repeating: RepeatingParams)\n\n}\n\nexport interface RepeatingControlsState {\n\n}\n\nconst repeatingRange = [1, 10] as [number, number];\nconst repeatingValueD = ValueD.VerticalLinear(9);\n\nexport class RepeatingControls extends React.PureComponent<RepeatingControlsProps, RepeatingControlsState> {\n\n\n    handleGridParamsChange = ({value, name}) => {\n        const {onChange, repeating} = this.props;\n        onChange({\n            ...repeating,\n            gridParams: {\n                ...repeating.gridParams,\n                [name]: value\n            }\n        })\n    };\n\n    render() {\n        const {type, gridParams} = this.props.repeating;\n        return (\n            <div>\n                {type === ERepeatingType.Grid && (<>\n                    <ButtonNumberCF\n                        // integer\n                        path={`patterns.${this.props.patternId}.repeating.params.gridParams.x`}\n                        name={\"x\"}\n                        value={gridParams.x}\n                        range={repeatingRange}\n                        valueD={repeatingValueD}\n                        onChange={this.handleGridParamsChange}/>\n                    <ButtonNumberCF\n                        // integer\n                        path={`patterns.${this.props.patternId}.repeating.params.gridParams.y`}\n                        name={\"y\"}\n                        value={gridParams.y}\n                        range={repeatingRange}\n                        valueD={repeatingValueD}\n                        onChange={this.handleGridParamsChange}/>\n                </>)}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {Button} from \"../_shared/Button\";\nimport \"../../styles/pattern.scss\";\nimport {\n    MaskParams,\n    PatternConfig,\n    RepeatingParams,\n    RotationValue,\n    SelectionState,\n    StoreState\n} from \"../../store/patterns/types\";\nimport {HistoryState} from \"../../store/patterns/types\";\nimport {HistoryControls} from \"./HistoryControls\";\nimport {SelectionValue} from \"../../store/patterns/types\";\nimport {Area} from \"../Area\";\nimport {InputNumber} from \"../_shared/InputNumber\";\nimport {InputText} from \"../_shared/InputText\";\nimport {MaskDraw} from \"../Area/MaskDraw\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\nimport {RotationControls} from \"./RotatingControls\";\nimport {RepeatingControls} from \"./RepeatingControls\";\n\nexport interface PatternWindowProps {\n    id: string\n    imageValue: ImageData\n    maskValue?: ImageData\n    maskParams?: MaskParams\n    rotation?: RotationValue\n    repeating?: RepeatingParams\n\n    height: number\n    width: number\n\n    connected?: string\n\n    config: PatternConfig\n    history: HistoryState\n    store: StoreState\n    selection: SelectionState\n\n    resultImage: HTMLCanvasElement\n\n    onImageChange(id: string, imageData: ImageData)\n\n    onMaskChange(id: string, imageData: ImageData)\n\n    onMaskParamsChange(id: string, params: MaskParams)\n\n    onSelectionChange(id: string, selectionValue: SelectionValue)\n\n    onRemove(id: string)\n\n    onUndo(id: string)\n\n    onRedo(id: string)\n\n    onSetWidth(id: string, width: number)\n\n    onSetHeight(id: string, height: number)\n\n    onCreateRoom(id: string, name: string)\n\n    onConfigChange(id: string, value: PatternConfig)\n\n    onRotationChange(id: string, value: RotationValue)\n\n    onRepeatingChange(id: string, value: RepeatingParams)\n}\n\nexport interface PatternWindowState {\n    roomName?: string\n}\n\nconst inputNumberProps = {min: 0, max: 500, step: 1, delay: 1000, notZero: true};\n\nexport class Pattern extends React.PureComponent<PatternWindowProps, PatternWindowState> {\n\n    state = {\n        roomName: \"222\"\n    };\n\n\n    handleImageChange = imageData => this.props.onImageChange(this.props.id, imageData);\n\n    handleMaskChange = imageData => this.props.onMaskChange(this.props.id, imageData);\n\n    handleSelectionChange = value =>\n        this.props.onSelectionChange(this.props.id, value);\n\n    handleClearSelection = () =>\n        this.props.onSelectionChange(this.props.id, []);\n\n    handleRemove = () => this.props.onRemove(this.props.id);\n\n    handleUndo = () => this.props.onUndo(this.props.id);\n\n    handleRedo = () => this.props.onRedo(this.props.id);\n\n    handleSetWidth = width => this.props.onSetWidth(this.props.id, width);\n\n    handleSetHeight = height => this.props.onSetHeight(this.props.id, height);\n\n\n    handleMaskParamsChange = (params: MaskParams) =>\n        this.props.onMaskParamsChange(this.props.id, params);\n\n    handleCreateRoom = () => {\n        this.props.onCreateRoom(this.props.id, this.state.roomName);\n    };\n\n    handleConfigToggle = (data) => {\n        this.props.onConfigChange(this.props.id, {\n            ...this.props.config,\n            [data.name]: !data.selected\n        })\n    };\n\n    handleRotationChange = (rotation: RotationValue) => {\n        this.props.onRotationChange(this.props.id, rotation)\n    };\n\n    handleRepeatingChange = (repeating: RepeatingParams) => {\n        this.props.onRepeatingChange(this.props.id, repeating)\n    };\n\n    render() {\n        const {\n            connected,\n            resultImage, imageValue, maskValue, maskParams,\n            height, width, id, config,\n            history, store, selection, rotation, repeating\n        } = this.props;\n\n        console.log(\"pattern render \", id, rotation);\n        return (\n            <div className=\"pattern\">\n                <div className={\"areas\"}>\n                    <Area\n                        name={id}\n                        width={width}\n                        height={height}\n\n                        rotation={rotation}\n\n                        imageValue={imageValue}\n\n                        selectionValue={selection.value}\n                        selectionParams={selection.params}\n\n                        onImageChange={this.handleImageChange}\n                        onSelectionChange={this.handleSelectionChange}/>\n                    {config.mask &&\n                    <MaskDraw\n                        rotation={rotation}\n                        params={maskParams}\n                        value={maskValue}\n                        name={id}\n                        width={width}\n                        height={height}\n                        onParamsChange={this.handleMaskParamsChange}\n                        onChange={this.handleMaskChange}/>}\n                    {/*{resultImage instanceof HTMLCanvasElement ? resultImage : \"\"}*/}\n                </div>\n                <div className=\"pattern-controls\">\n                    <Button onClick={this.handleRemove}>del</Button> {id}\n\n                    {connected}\n                    <InputText\n                        value={this.state.roomName}\n                        onChange={roomName => this.setState({roomName})}/>\n                    <Button\n                        onClick={this.handleCreateRoom}/>\n\n\n                    <InputNumber\n                        onChange={this.handleSetWidth}\n                        value={width}\n                        {...inputNumberProps}/>\n                    <InputNumber\n                        onChange={this.handleSetHeight}\n                        value={height}\n                        {...inputNumberProps}/>\n\n                    {config.history &&\n                    <HistoryControls\n                        history={history.value}\n                        onUndo={this.handleUndo}\n                        onRedo={this.handleRedo}/>}\n\n                    {selection.value && selection.value.length &&\n                    <Button\n                        onClick={this.handleClearSelection}>clear</Button>}\n\n                    {config.rotation &&\n                    <RotationControls\n                        patternId={id}\n                        rotation={rotation}\n                        onChange={this.handleRotationChange}/>}\n\n                    {config.repeating &&\n                    <RepeatingControls\n                        patternId={id}\n                        repeating={repeating}\n                        onChange={this.handleRepeatingChange}/>}\n\n                    <div>\n                        <ButtonSelect\n                            name={\"mask\"}\n                            selected={config.mask}\n                            onClick={this.handleConfigToggle}>mask</ButtonSelect>\n                        <ButtonSelect\n                            name={\"repeating\"}\n                            selected={config.repeating}\n                            onClick={this.handleConfigToggle}>repeating</ButtonSelect>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}","import {EToolType, SetCurrentToolAction} from \"./types\";\n\nexport enum EToolAction {\n    SET_CURRENT = \"tools/set-current\"\n}\n\nexport const setCurrentTool = (tool: EToolType): SetCurrentToolAction =>\n    ({type: EToolAction.SET_CURRENT, tool});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../store\";\nimport {Button} from \"./_shared/Button\";\nimport {\n    addPattern,\n    redo,\n    removePattern,\n    undo,\n    updateImage,\n    updateSelection,\n    setHeight,\n    setWidth,\n    createRoom, editConfig, updateMask, setMaskParams, setRotation, setRepeating\n} from \"../store/patterns/actions\";\nimport {EPatternType, MaskParams, RepeatingParams, RotationValue} from \"../store/patterns/types\";\nimport {Pattern} from \"./Pattern/\";\nimport {PatternConfig} from \"../store/patterns/types\";\nimport {SelectionValue} from \"../store/patterns/types\";\n\nexport interface PatternsStateProps {\n    patterns: any\n}\n\nexport interface PatternsActionProps {\n    addPattern(config?: PatternConfig)\n\n    removePattern(id: string)\n\n    updateImage(id: string, imageData: ImageData)\n\n    updateMask(id: string, imageData: ImageData)\n\n    setMaskParams(id: string, params: MaskParams)\n\n    updateSelection(id: string, value: SelectionValue)\n\n    redo(id: string)\n\n    undo(id: string)\n\n    setWidth(id: string, value: number)\n\n    setHeight(id: string, value: number)\n\n    editConfig(id: string, config: PatternConfig)\n\n    createRoom(id: string, name: string)\n\n    setRotation(id: string, value: RotationValue)\n\n    setRepeating(id: string, value: RepeatingParams)\n}\n\nexport interface PatternsOwnProps {\n\n}\n\nexport interface PatternsProps extends PatternsStateProps, PatternsActionProps, PatternsOwnProps {\n\n}\n\nexport interface PatternsState {\n\n}\n\nclass PatternsComponent extends React.PureComponent<PatternsProps, PatternsState> {\n\n    handleAddClick = () => this.props.addPattern({history: true, selection: true, rotation: true, repeating: true});\n\n    render() {\n        const {\n            createRoom, removePattern, patterns, updateImage, updateMask,\n            setMaskParams, updateSelection, undo, redo, setWidth,\n            setHeight, editConfig, setRotation, setRepeating\n        } = this.props;\n        return (\n            <>\n                {patterns.map(({id, current, mask, config, history, store, selection, connected, resultImage, rotation, repeating}) => {\n                    return (\n                        <Pattern\n                            key={id}\n                            id={id}\n                            config={config}\n\n                            connected={connected}\n\n                            history={history}\n                            store={store}\n                            selection={selection}\n                            imageValue={current ? current.imageData : null}\n                            maskValue={mask ? mask.value.imageData : null}\n                            resultImage={resultImage}\n                            maskParams={mask ? mask.params : null}\n                            rotation={rotation ? rotation.value : null}\n                            repeating={repeating ? repeating.params : null}\n\n                            width={current ? current.width : null}\n                            height={current ? current.height : null}\n\n                            onUndo={undo}\n                            onRedo={redo}\n                            onImageChange={updateImage}\n                            onMaskChange={updateMask}\n                            onMaskParamsChange={setMaskParams}\n                            onSelectionChange={updateSelection}\n                            onRemove={removePattern}\n                            onSetWidth={setWidth}\n                            onSetHeight={setHeight}\n                            onCreateRoom={createRoom}\n                            onConfigChange={editConfig}\n                            onRotationChange={setRotation}\n                            onRepeatingChange={setRepeating}/>\n                    );\n                })}\n                <Button onClick={this.handleAddClick}>add</Button>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<PatternsStateProps, {}, AppState> = state => ({\n    patterns: Object.values(state.patterns)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<PatternsActionProps, PatternsOwnProps> = {\n    setMaskParams,\n    createRoom,\n    addPattern,\n    removePattern,\n    updateImage,\n    updateSelection,\n    redo,\n    undo,\n    setWidth,\n    setHeight,\n    editConfig,\n    updateMask,\n    setRotation,\n    setRepeating\n};\n\nexport const Patterns = connect<PatternsStateProps, PatternsActionProps, PatternsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(PatternsComponent);","import * as io from \"socket.io-client\";\n\n\nexport const createRoom_s = (name) => {\n    const socket = io(\"http://localhost:3002\", {\n        path: '/room',\n        query: {name}\n    });\n    return socket;\n};","import {BrushParams, SetBrushParamsAction} from \"./types\";\n\nexport enum EBrushAction {\n    SET_PARAMS = \"brush/set-params\",\n}\n\nexport const setBrushParams = (params: BrushParams): SetBrushParamsAction =>\n    ({type: EBrushAction.SET_PARAMS, params});","import {createSelector} from \"reselect\";\nimport {objectToSelectItems} from \"../../utils/utils\";\n\nconst getPatternsState = state => state.patterns;\n\n\nexport const getPatternsSelectItems = createSelector(\n    [getPatternsState],\n    patterns => objectToSelectItems(patterns, (value, key) => +key));","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {setBrushParams} from \"../../store/brush/actions\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {createSelector} from \"reselect\";\n\nexport interface BrushStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: BrushParams\n    patternsSelectItems: any[]\n}\n\nexport interface BrushActionProps {\n    setBrushParams(params: BrushParams)\n}\n\nexport interface BrushOwnProps {\n\n}\n\nexport interface BrushProps extends BrushStateProps, BrushActionProps, BrushOwnProps {\n\n}\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst patternSizeRange = [0, 5] as [number, number];\nconst patternSizeValueD = ValueD.VerticalLinear(200);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass BrushComponent extends React.PureComponent<BrushProps> {\n\n    handleSizeChange = ({value}) => {\n        console.log(value);\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            size: value\n        })\n    };\n\n    handlePatternChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            pattern: +value\n        })\n    };\n\n    handleCompositeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            compositeOperation: value\n        })\n    };\n\n    handleOpacityChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            opacity: value\n        })\n    };\n\n    handleTypeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            type: value\n        })\n    };\n\n    handleParamChange = ({value, name}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n\n\n        const {paramsConfig, paramsConfigMap, paramsValue, setBrushParams, patternsSelectItems} = this.props;\n\n        return (\n            <>\n                <SelectButtons\n                    value={paramsValue.type}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleTypeChange}/>\n                <br/>\n\n\n                {paramsValue.type === EBrushType.Pattern ?\n                    <ButtonNumberCF\n                        path={\"brush.params.patternSize\"}\n                        value={paramsValue.patternSize}\n                        name={\"patternSize\"}\n                        onChange={this.handleParamChange}\n                        range={patternSizeRange}\n                        valueD={patternSizeValueD}/> :\n                    <ButtonNumberCF\n                        path={\"brush.params.size\"}\n                        value={paramsValue.size}\n                        name={\"size\"}\n                        onChange={this.handleSizeChange}\n                        range={sizeRange}\n                        valueD={sizeValueD}/>}\n\n                <ButtonNumberCF\n                    path={\"brush.params.opacity\"}\n                    value={paramsValue.opacity}\n                    name={\"opacity\"}\n                    onChange={this.handleOpacityChange}\n                    range={opacityRange}\n                    valueD={opacityValueD}/>\n                <SelectDrop\n                    value={paramsValue.compositeOperation}\n                    items={paramsConfigMap[\"compositeOperation\"].props.items}\n                    onChange={this.handleCompositeChange}/>\n\n                <br/>\n\n                {paramsValue.type === EBrushType.Pattern &&\n                <SelectButtons\n                    value={paramsValue.pattern}\n                    onChange={this.handlePatternChange}\n                    items={patternsSelectItems}/>}\n            </>\n        );\n    }\n}\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.brush.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<BrushStateProps, BrushOwnProps, AppState> = state => ({\n    paramsConfig: state.brush.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.brush.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<BrushActionProps, BrushOwnProps> = {\n    setBrushParams\n};\n\nexport const Brush = connect<BrushStateProps, BrushActionProps, BrushOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(BrushComponent);","import {LineParams, SetLineParamsAction} from \"./types\";\n\nexport enum ELineAction {\n    SET_PARAMS = \"line/set-params\",\n}\n\nexport const setLineParams = (params: LineParams): SetLineParamsAction =>\n    ({type: ELineAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ELineType, LineParams} from \"../../store/line/types\";\nimport {setLineParams} from \"../../store/line/actions\";\nimport {createSelector} from \"reselect\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\n\nexport interface LineStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: LineParams\n    patternsSelectItems: any[]\n}\n\nexport interface LineActionProps {\n    setLineParams(params: LineParams)\n}\n\nexport interface LineOwnProps {\n\n}\n\nexport interface LineProps extends LineStateProps, LineActionProps, LineOwnProps {\n\n}\n\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass LineComponent extends React.PureComponent<LineProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setLineParams, paramsValue} = this.props;\n        setLineParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsConfigMap, paramsConfig, paramsValue, patternsSelectItems} = this.props;\n        return (\n            <>\n                <SelectButtons\n                    br={3}\n                    value={paramsValue.type}\n                    name={\"type\"}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleParamChange}/>\n                <br/>\n\n                <ButtonNumberCF\n                    path={\"line.params.size\"}\n                    value={paramsValue.size}\n                    name={\"size\"}\n                    onChange={this.handleParamChange}\n                    range={sizeRange}\n                    valueD={sizeValueD}/>\n\n                <ButtonNumberCF\n                    path={\"line.params.opacity\"}\n                    value={paramsValue.opacity}\n                    name={\"opacity\"}\n                    onChange={this.handleParamChange}\n                    range={opacityRange}\n                    valueD={opacityValueD}/>\n                <SelectDrop\n                    name={\"compositeOperation\"}\n                    value={paramsValue.compositeOperation}\n                    items={paramsConfigMap[\"compositeOperation\"].props.items}\n                    onChange={this.handleParamChange}/>\n\n                <br/>\n\n                {paramsValue.type === ELineType.Pattren &&\n                <SelectButtons\n                    name={\"pattern\"}\n                    value={paramsValue.pattern}\n                    onChange={this.handleParamChange}\n                    items={patternsSelectItems}/>}\n            </>\n        );\n    }\n};\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.line.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<LineStateProps, LineOwnProps, AppState> = state => ({\n    paramsConfig: state.line.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.line.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<LineActionProps, LineOwnProps> = {\n    setLineParams\n};\n\nexport const Line = connect<LineStateProps, LineActionProps, LineOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(LineComponent);","import {SelectToolParams, SetSelectToolParamsAction} from \"./types\";\n\nexport enum ESelectToolAction {\n    SET_PARAMS = \"select/set-params\",\n}\n\nexport const setSelectToolParams = (params: SelectToolParams): SetSelectToolParamsAction =>\n    ({type: ESelectToolAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {setSelectToolParams} from \"../../store/selectTool/actions\";\nimport {ESelectionMode, SelectToolParams} from \"../../store/selectTool/types\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {createSelector} from \"reselect\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ButtonNumber, ValueD} from \"../_shared/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\n\nexport interface SelectToolStateProps {\n\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: object\n    paramsValue: SelectToolParams\n}\n\nexport interface SelectToolActionProps {\n    setSelectToolParams(params: SelectToolParams)\n}\n\nexport interface SelectToolOwnProps {\n\n}\n\nexport interface SelectToolProps extends SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps {\n\n}\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass SelectToolComponent extends React.PureComponent<SelectToolProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setSelectToolParams, paramsValue} = this.props;\n        setSelectToolParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsValue, paramsConfigMap, paramsConfig, setSelectToolParams} = this.props;\n        const {mode, curveType, ...otherParams} = paramsConfigMap;\n        return (\n            <>\n                <SelectDrop\n                    name=\"mode\"\n                    value={paramsValue.mode}\n                    items={mode.props.items}\n                    onChange={this.handleParamChange}/>\n                {paramsValue.mode === ESelectionMode.Points &&\n                <SelectDrop\n                    name=\"curveType\"\n                    value={paramsValue.curveType}\n                    items={curveType.props.items}\n                    onChange={this.handleParamChange}/>}\n\n                {Object.values(otherParams).map(({name, props}) => (\n                    <ButtonNumberCF\n                        value={paramsValue[name]}\n                        name={name}\n                        path={`selectTool.params.${name}`}\n                        range={props.range}\n                        onChange={this.handleParamChange}\n                        valueD={opacityValueD}/>\n                ))}\n\n            </>\n        );\n    }\n}\n\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.selectTool.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<SelectToolStateProps, SelectToolOwnProps, AppState> = state => ({\n    paramsConfig: state.selectTool.paramsConfig,\n    paramsValue: state.selectTool.params,\n    paramsConfigMap: paramsConfigMapSelector(state),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<SelectToolActionProps, SelectToolOwnProps> = {\n    setSelectToolParams\n};\n\nexport const SelectTool = connect<SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(SelectToolComponent);","import {handleActions} from \"redux-actions\";\n\nexport enum EFullScreenAction {\n    ON = \"fullscreen/on\",\n    OFF = \"fullscreen/off\",\n    SET = \"fullscreen/set\",\n    REVERSE = \"fullscreen/reverse\",\n}\n\nexport type FullScreenState = boolean;\n\nexport const fullscreenReducer = handleActions<FullScreenState>({\n    [EFullScreenAction.ON]: () => true,\n    [EFullScreenAction.OFF]: () => false,\n    [EFullScreenAction.SET]: (s, a) => a.value,\n    [EFullScreenAction.REVERSE]: (s) => !s,\n}, false);\n\nexport const goFullScreen = () => ({\n    type: EFullScreenAction.ON\n});\nexport const setFullScreen = (value: boolean) => ({\n    type: EFullScreenAction.SET, value\n});\nexport const reverseFullScreen = () => ({\n    type: EFullScreenAction.REVERSE\n});","import {Room} from \"./reducer\";\nimport {ConnectRoomsAction, UpdateRoomsAction} from \"./types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppState} from \"../index\";\nimport {Action} from \"redux\";\nimport {connectRooms} from \"./service\";\n\ntype ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\nexport enum ERoomsAction {\n    UPDATE_ROOMS = \"rooms/update\",\n    CONNECT_ROOMS = \"rooms/connect\",\n}\n\nexport const updateRooms = (rooms: Room[]): UpdateRoomsAction => ({\n    type: ERoomsAction.UPDATE_ROOMS,\n    rooms\n});\n\nexport const roomsConnect = (): ThunkResult<ConnectRoomsAction> =>\n    dispatch => {\n\n        const socket = connectRooms();\n\n        socket.on(\"updateRooms\", (rooms) => {\n            dispatch(updateRooms(Object.values(rooms)))\n        });\n        return dispatch({type: ERoomsAction.CONNECT_ROOMS});\n    };","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {setCurrentTool} from \"../../store/tool/actions\";\nimport {Brush} from \"./Brush\";\nimport {Line} from \"./Line\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\nimport {SelectTool} from \"./SelectTool\";\nimport {Button} from \"../_shared/Button\";\nimport {reverseFullScreen} from \"../../store/fullscreen\";\n\nexport const ToolsParams = {\n    [EToolType.Brush]: {component: Brush, type: EToolType.Brush},\n    [EToolType.Line]: {component: Line, type: EToolType.Line},\n    [EToolType.Select]: {component: SelectTool, type: EToolType.Select},\n};\n\nexport interface ToolsStateProps {\n    currentTool: EToolType\n}\n\nexport interface ToolsActionProps {\n    setCurrentTool(tool: EToolType)\n    reverseFullScreen()\n}\n\nexport interface ToolsOwnProps {\n\n}\n\nexport interface ToolsProps extends ToolsStateProps, ToolsActionProps, ToolsOwnProps {\n\n}\n\nconst ToolsComponent: React.FC<ToolsProps> = ({currentTool, setCurrentTool, reverseFullScreen}) => {\n\n    const ToolControls = ToolsParams[currentTool].component;\n    return (\n        <div className=\"tools\">\n            <Button onClick={reverseFullScreen}>full</Button>\n            <div>\n                {Object.keys(ToolsParams).map(toolType => (\n                    <ButtonSelect\n                        key={toolType}\n                        selected={toolType === currentTool}\n                        onClick={() => setCurrentTool(ToolsParams[toolType].type)}>\n                        {toolType}</ButtonSelect>\n                ))}\n            </div>\n            <ToolControls/>\n        </div>\n    );\n};\n\nconst mapStateToProps: MapStateToProps<ToolsStateProps, ToolsOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ToolsActionProps, ToolsOwnProps> = {\n    setCurrentTool, reverseFullScreen\n};\n\nexport const Tools = connect<ToolsStateProps, ToolsActionProps, ToolsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ToolsComponent);","import {AddCFAction, ChangeCFParamsAction, ECFType} from \"./types\";\n\nexport enum EChangeFunctionsAction {\n    ADD_CF = \"change-functions/add\",\n    CHANGE_PARAMS = \"change-functions/change-params\",\n}\n\nexport const addCF = (cfType: ECFType): AddCFAction =>\n    ({type: EChangeFunctionsAction.ADD_CF, cfType});\n\nexport const changeCFParams = (id: string, params: any): ChangeCFParamsAction =>\n    ({type: EChangeFunctionsAction.CHANGE_PARAMS, params, id});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../store\";\nimport {Room} from \"../store/rooms/reducer\";\nimport {Button} from \"./_shared/Button\";\nimport {roomsConnect} from \"../store/rooms/actions\";\n\nexport interface RoomsStateProps {\n    rooms: Room[]\n}\n\nexport interface RoomsActionProps {\n    roomsConnect()\n}\n\nexport interface RoomsOwnProps {\n\n}\n\nexport interface RoomsProps extends RoomsStateProps, RoomsActionProps, RoomsOwnProps {\n\n}\n\nexport interface RoomsState {\n\n}\n\nclass RoomsComponent extends React.PureComponent<RoomsProps, RoomsState> {\n\n    componentDidMount() {\n        this.props.roomsConnect();\n    }\n\n    handleRoomConnect = room => {\n        console.log(room);\n    };\n\n    render() {\n        const {rooms} = this.props;\n        return (\n            <>\n                {rooms.map(room =>\n                    <Button onClick={this.handleRoomConnect} value={room}>{room.name}</Button>\n                )}\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<RoomsStateProps, RoomsOwnProps, AppState> = state => ({\n    rooms: state.rooms.rooms\n});\n\nconst mapDispatchToProps: MapDispatchToProps<RoomsActionProps, RoomsOwnProps> = {\n    roomsConnect\n};\n\nexport const Rooms = connect<RoomsStateProps, RoomsActionProps, RoomsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(RoomsComponent);","import * as io from \"socket.io-client\";\n\n\nexport const connectRooms = () => {\n    const socket = io(\"http://localhost:3002\", {\n        path: '/rooms',\n    });\n    return socket;\n};","import * as React from \"react\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport \"../../styles/sinChangeFunction.scss\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\n\nexport interface SinCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface SinCFState {\n\n}\n\nexport class SinCF extends React.PureComponent<SinCFProps, SinCFState> {\n\n    handleParamChange = ({value, name}) => {\n        this.props.onChange({...this.props.params, [name]: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"sin-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.a`}\n                    value={params.a}\n                    name={\"a\"}\n                    range={[0, 1]}\n                    valueD={ValueD.VerticalLinear(100)}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.t`}\n                    value={params.t}\n                    name={\"t\"}\n                    range={[0, 1000]}\n                    valueD={ValueD.VerticalLinear(0.05)}\n                    onChange={this.handleParamChange}\n                />\n                {/*<ButtonNumberCF*/}\n                    {/*path={`changeFunctions.${name}.params.p`}*/}\n                    {/*value={params.p}*/}\n                    {/*name={\"p\"}*/}\n                    {/*range={[0, 1]}*/}\n                    {/*onChange={this.handleParamChange}*/}\n                {/*/>*/}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport \"../../styles/sinChangeFunction.scss\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\n\nexport interface LoopCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface LoopCFState {\n\n}\n\n\nconst tRange = [0, 3000] as [number, number];\nconst tValueD = ValueD.VerticalLinear(.05);\nconst seRange = [0, 1] as [number, number];\nconst seValueD = ValueD.VerticalLinear(100);\n\nexport class LoopCF extends React.PureComponent<LoopCFProps, LoopCFState> {\n\n    handleParamChange = ({value, name}) => {\n        this.props.onChange({...this.props.params, [name]: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"sin-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.start`}\n                    value={params.start}\n                    name={\"start\"}\n                    valueD={seValueD}\n                    range={seRange}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.end`}\n                    value={params.end}\n                    name={\"end\"}\n                    valueD={seValueD}\n                    range={seRange}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.t`}\n                    value={params.t}\n                    name={\"t\"}\n                    valueD={tValueD}\n                    range={tRange}\n                    onChange={this.handleParamChange}\n                />\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ChangeFunctionsState} from \"../../store/changeFunctions/reducer\";\nimport {addCF, changeCFParams} from \"../../store/changeFunctions/actions\";\nimport {SinCF} from \"./SinCF\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\nimport {Button} from \"../_shared/Button\";\nimport {setChangingMode, startChanging, stopChanging} from \"../../store/changing/actions\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {enumToSelectItems, objectToSelectItems} from \"../../utils/utils\";\nimport {ChangingMode} from \"../../store/changing/types\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\nimport {LoopCF} from \"./LoopCF\";\n\nexport interface ChangeFStateProps {\n    cfs: ChangeFunctionsState\n    changingMode: ChangingMode\n}\n\nexport interface ChangeFActionProps {\n    changeCFParams(id: string, params: any)\n    addCF(cfType: ECFType)\n    startChanging()\n    stopChanging()\n    setChangingMode(mode: ChangingMode)\n}\n\nexport interface ChangeFOwnProps {\n\n}\n\nexport interface ChangeFProps extends ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps {\n\n}\n\nexport interface ChangeFState {\n\n}\n\nconst CFComponentByType = {\n    [ECFType.SIN]: SinCF,\n    [ECFType.LOOP]: LoopCF,\n};\n\nconst modesItems = enumToSelectItems(ChangingMode);\n\nconsole.log(modesItems);\n\nclass ChangeFComponent extends React.PureComponent<ChangeFProps, ChangeFState> {\n\n    handleChange = (value, name) => {\n        this.props.changeCFParams(name, value);\n    };\n\n    handleAddSin = () => {\n        this.props.addCF(ECFType.SIN);\n    };\n\n    handleAddLoop = () => {\n        this.props.addCF(ECFType.LOOP);\n    };\n\n    handleModeChange = ({value}) => {\n        this.props.setChangingMode(value);\n    };\n\n    render() {\n        const {cfs, changingMode} = this.props;\n        return (\n            <div>\n                {Object.values(cfs).map(cf => {\n                    const {type, id, params, paramsConfig} = cf;\n                    const Component = CFComponentByType[type];\n                    return (\n                        <Component\n                            key={id}\n                            name={id}\n                            params={params}\n                            paramsConfig={paramsConfig}\n                            onChange={this.handleChange}/>);\n                })}\n                <Button onClick={this.handleAddSin}>sin</Button>\n                <Button onClick={this.handleAddLoop}>loop</Button>\n                <SelectButtons\n                    items={modesItems}\n                    value={changingMode}\n                    onChange={this.handleModeChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ChangeFStateProps, {}, AppState> = state => ({\n    cfs: state.changeFunctions,\n    changingMode: state.changing.mode\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ChangeFActionProps, ChangeFOwnProps> = {\n    changeCFParams, addCF, startChanging, stopChanging, setChangingMode\n};\n\nexport const ChangeF = connect<ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChangeFComponent);","import * as React from \"react\";\nimport \"../styles/layout.scss\";\nimport {Patterns} from \"./Patterns\";\nimport {Tools} from \"./Tools\";\nimport {Rooms} from \"./Rooms\";\nimport {ChangeF} from \"./ChangeF\";\nimport {connect} from \"react-redux\";\nimport {setFullScreen} from \"../store/fullscreen\";\nimport {AppState} from \"../store\";\nimport FullScreen from \"react-full-screen\";\n\nexport interface LayoutStateProps {\n    full: boolean\n}\n\nexport interface LayoutActionProps {\n    setFullScreen(value: boolean)\n}\n\nexport interface LayoutProps extends LayoutStateProps, LayoutActionProps {\n}\n\nexport const LayoutComponent: React.FC<LayoutProps> = ({full, setFullScreen}) => {\n\n    return (\n        <FullScreen enabled={full} onChange={setFullScreen}>\n            <div className={\"layout-container\"}>\n                <div className=\"layout\">\n                    <div className=\"tools-panel\">\n                        <Tools/>\n                    </div>\n                    <div className=\"windows\">\n                        <Patterns/>\n                        <Rooms/>\n                        <ChangeF/>\n                    </div>\n                </div>\n            </div>\n        </FullScreen>\n    );\n};\n\nexport const Layout = connect<LayoutStateProps, LayoutActionProps, {}, AppState>(state => ({\n    full: state.fullScreen\n}), {\n    setFullScreen\n})(LayoutComponent);","import * as React from \"react\";\nimport {Layout} from \"./Layout\";\n\nexport const Main: React.FC<{}> = ({}) => {\n    return (\n        <Layout/>\n    );\n};","import {CanvasState} from \"./types\";\n\nexport function createCleanCanvasState(width: number, height: number): CanvasState {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n\n    const imageData = ctx.createImageData(width, height);\n\n    // noise\n    // for (let i = 0; i < imageData.data.length; i++) {\n    //     imageData.data[i] = Math.random() * 100;\n    // }\n\n    return {\n        imageData,\n        width,\n        height\n    };\n}\n\nexport function createCanvasStateFromImageData(imageData: ImageData, width?: number, height?: number): CanvasState {\n    return {\n        imageData,\n        width: width || imageData.width,\n        height: height || imageData.height\n    };\n}","import {\n    ERepeatingType,\n    HistoryParams, HistoryState, HistoryValue,\n    MaskParams, MaskValue,\n    PatternAction,\n    PatternConfig, PatternHistoryItem,\n    PatternParams, PatternState, RepeatingParams, RepeatingValue, RotationParams, RotationValue,\n    SelectionParams, SelectionValue,\n    StoreParams\n} from \"./types\";\nimport {createCleanCanvasState} from \"../../utils/state\";\nimport {PatternsState} from \"./reducer\";\nimport {omit} from \"lodash\";\nimport {CanvasState, FunctionState} from \"../../utils/types\";\n\nexport const patternId = (state: PatternsState) =>\n    (Object.keys(state).length\n        ? (Math.max(...Object.keys(state).map(key => +key))) + 1\n        : 1).toString();\n\n\nexport const createPatternInitialState = (id: string, config?: PatternConfig, params?: PatternParams): PatternState => {\n    const {width = 300, height = 300, history, store, selection, mask, rotation, repeating} = config || {};\n    return {\n        id,\n        config,\n        resultImage: null,\n        current: createCleanCanvasState(width, height),\n        history: getHistoryState(history, undefined, (params || {}).history),\n        store: getStoreState(store, undefined, (params || {}).store),\n        selection: getSelectionState(selection, undefined, (params || {}).selection),\n        mask: getMaskState(width, height)(mask, undefined, (params || {}).mask),\n        rotation: getRotationState(rotation, undefined, (params || {}).rotation),\n        repeating: getRepeatingState(repeating, undefined, (params || {}).repeating)\n    }\n};\n\nexport const updatePatternState = (state: PatternState, config: PatternConfig, params?: PatternParams): PatternState => {\n    const {history, store, selection, mask, rotation, repeating} = config || {};\n    params = params || {};\n    return {\n        config,\n        id: state.id,\n        current: state.current,\n        resultImage: state.resultImage,\n        history: getHistoryState(history, state.history, params.history),\n        store: getStoreState(store, state.store, params.store),\n        selection: getSelectionState(selection, state.selection, params.selection),\n        mask: getMaskState(state.current.width, state.current.height)(mask, state.mask, params.mask),\n        rotation: getRotationState(rotation, state.rotation, params.rotation),\n        repeating: getRepeatingState(repeating, state.repeating, params.repeating)\n    }\n};\n\nconst getFunctionState = <V, P>(initialValue: V, initialParams: P) =>\n    (enabled?: boolean, state?: FunctionState<V, P>, params?: P): FunctionState<V, P> => {\n        if (!enabled)\n            return;\n\n        return {\n            value: state ? state.value : initialValue,\n            params: params\n                ? (state ? {\n                    ...state.params,\n                    ...params\n                } : {\n                    ...initialParams,\n                    ...params\n                })\n                : (state ? state.params : initialParams)\n        };\n    };\n\nexport const getHistoryState = getFunctionState<HistoryValue, HistoryParams>({\n    before: [],\n    after: [],\n}, {\n    length: 4\n});\n\nexport const getStoreState = getFunctionState<CanvasState, StoreParams>(null, {});\n\nexport const getSelectionState = getFunctionState<SelectionValue, SelectionParams>(null, {});\n\nexport const getMaskState = (width, height) => getFunctionState<MaskValue, MaskParams>(\n    createCleanCanvasState(width, height), {\n        opacity: 1,\n        black: true\n    });\n\nexport const getRotationState = getFunctionState<RotationValue, RotationParams>(\n    {\n        angle: 0,\n        offset: {\n            x: 0,\n            y: 0\n        }\n    }, {});\n\nexport const getRepeatingState = getFunctionState<RepeatingValue, RepeatingParams>(\n    {}, {\n        type: ERepeatingType.Grid,\n        gridParams: {\n            x: 2,\n            y: 2\n        }\n    });\n\n\nexport const removePattern = (state: PatternsState, id: string) => omit(state, id);\n\nexport type PatternReducer<T extends PatternAction> =\n    (pattern: PatternState, action: T, state: PatternsState) => PatternState\n\nexport const reducePattern = <T extends PatternAction>(reducer: PatternReducer<T>) =>\n    (state: PatternsState, action: T) => ({\n        ...state,\n        [action.id]: reducer(state[action.id], action, state)\n    });\n\n\nexport const historyPush = (history: HistoryState, current: PatternHistoryItem): HistoryState => {\n    const {value: {before}, params: {length: historyLength}} = history;\n\n    const beforeNext: PatternHistoryItem[] = [...before, current];\n    const afterNext: PatternHistoryItem[] = [];\n\n    if (beforeNext.length > historyLength)\n        beforeNext.shift();\n\n    return {\n        ...history,\n        value: {\n            before: beforeNext,\n            after: afterNext\n        }\n    }\n};\n\nexport interface PatternUndoResult {\n    history: HistoryState\n    prev: PatternHistoryItem\n}\n\nexport const historyUndo = (history: HistoryState, current: PatternHistoryItem): PatternUndoResult => {\n    const {value: {before, after}} = history;\n\n    if (before.length === 0) return null;\n\n    const prev = before[before.length - 1];\n\n    const beforeNext = before.slice(0, before.length - 1); // pop\n    const afterNext = [current, ...after]; // unshift current\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        prev\n    }\n};\n\nexport interface PatternRedoResult {\n    history: HistoryState\n    next: PatternHistoryItem\n}\n\nexport const historyRedo = (history: HistoryState, current: PatternHistoryItem): PatternRedoResult => {\n    const {value: {before, after}} = history;\n\n    if (after.length === 0) return null;\n\n    const next = after[0];\n\n    const beforeNext = [...before, current]; // push current\n    const afterNext = after.slice(1, after.length); // shift\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        next\n    }\n};","import {handleActions} from \"redux-actions\";\nimport {EPatternAction, EPatternsAction} from \"./actions\";\nimport {\n    createPatternInitialState,\n    historyPush, historyRedo, historyUndo,\n    patternId,\n    reducePattern,\n    removePattern,\n    updatePatternState\n} from \"./helpers\";\nimport {\n    AddPatternAction,\n    CreateRoomAction,\n    EditPatternConfigAction,\n    PatternState,\n    PatternUndoAction,\n    RemovePatternAction, SetMaskParamsAction,\n    SetPatternHeightAction,\n    SetPatternWidthAction, SetRepeatingAction, SetRotationAction,\n    UpdatePatternImageAction,\n    UpdatePatternMaskAction,\n    UpdatePatternSelectionAction\n} from \"./types\";\nimport {maskedImage, resizeImageData} from \"../../utils/imageData\";\n\n\nexport interface PatternsState {\n    [id: string]: PatternState\n}\n\nexport const patternsReducer = handleActions<PatternsState>({\n\n    [EPatternsAction.ADD_PATTERN]: (state: PatternsState, action: AddPatternAction) => {\n        const id = patternId(state);\n        return {\n            ...state,\n            [id]: createPatternInitialState(id, action.config)\n        }\n    },\n    [EPatternsAction.REMOVE_PATTERN]: (state: PatternsState, action: RemovePatternAction) =>\n        removePattern(state, action.id),\n\n\n    [EPatternAction.EDIT_CONFIG]: reducePattern<EditPatternConfigAction>(\n        (pattern: PatternState, action) =>\n            updatePatternState(pattern, action.config)),\n\n\n    [EPatternAction.SET_WIDTH]: reducePattern<SetPatternWidthAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                width: action.width,\n                imageData: resizeImageData(pattern.current.imageData, action.width, pattern.current.height)\n            },\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    width: action.width,\n                    imageData: resizeImageData(pattern.mask.value.imageData, action.width, pattern.mask.value.height)\n                }\n            },\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current,\n                maskValue: pattern.mask && pattern.mask.value\n            })\n        })),\n    [EPatternAction.SET_HEIGHT]: reducePattern<SetPatternHeightAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                height: action.height,\n                imageData: resizeImageData(pattern.current.imageData, pattern.current.width, action.height)\n            },\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    height: action.height,\n                    imageData: resizeImageData(pattern.mask.value.imageData, pattern.mask.value.width, action.height)\n                }\n            },\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current,\n                maskValue: pattern.mask && pattern.mask.value\n            })\n        })),\n\n    [EPatternAction.SET_MASK_PARAMS]: reducePattern<SetMaskParamsAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                params: {\n                    ...pattern.mask.params,\n                    ...action.params\n                }\n            }\n        })),\n\n    [EPatternAction.UPDATE_IMAGE]: reducePattern<UpdatePatternImageAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                imageData: action.imageData\n            },\n            resultImage: maskedImage(action.imageData, pattern.mask && pattern.mask.value.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current\n            })\n        })),\n\n    [EPatternAction.UPDATE_SELECTION]: reducePattern<UpdatePatternSelectionAction>(\n        (pattern: PatternState, action) => {\n            return ({\n                ...pattern,\n                selection: {\n                    ...pattern.selection,\n                    value: action.value\n                }\n            })\n        }),\n\n    [EPatternAction.UPDATE_MASK]: reducePattern<UpdatePatternMaskAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    imageData: action.imageData\n                }\n            },\n            resultImage: maskedImage(pattern.current.imageData, action.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                maskValue: pattern.mask.value\n            })\n        })),\n\n    [EPatternAction.UNDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const undoResult = historyUndo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!undoResult) return pattern;\n\n        return {\n            ...pattern,\n            history: undoResult.history,\n            current: undoResult.prev.current || pattern.current,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: undoResult.prev.maskValue || pattern.mask.value\n            }\n        }\n\n    }),\n    [EPatternAction.REDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const redoResult = historyRedo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!redoResult) return pattern;\n\n        return {\n            ...pattern,\n            history: redoResult.history,\n            current: redoResult.next.current || pattern.current,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: redoResult.next.maskValue || pattern.mask.value\n            }\n        }\n    }),\n\n\n    [EPatternAction.SET_ROTATION]: reducePattern<SetRotationAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            rotation: pattern.rotation && {\n                ...pattern.rotation,\n                value: action.rotation\n            }\n        })),\n\n\n    [EPatternAction.SET_REPEATING]: reducePattern<SetRepeatingAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            repeating: pattern.repeating && {\n                ...pattern.repeating,\n                params: action.repeating\n            }\n        })),\n\n    [EPatternAction.CREATE_ROOM]: reducePattern<CreateRoomAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            connected: action.roomName,\n            socket: action.socket,\n        }))\n}, {});\n\n\n","import {handleActions} from \"redux-actions\";\nimport {EToolType, SetCurrentToolAction} from \"./types\";\nimport {EToolAction} from \"./actions\";\n\nexport interface ToolState {\n    current: EToolType\n}\n\nexport const toolReducer = handleActions<ToolState>({\n    [EToolAction.SET_CURRENT]: (state: ToolState, action: SetCurrentToolAction) => ({\n        ...state,\n        current: action.tool\n    })\n}, {\n    current: EToolType.Brush\n});\n\n\n","import * as React from \"react\";\nimport {ButtonSelect} from \"./ButtonSelect\";\nimport {ButtonNumber} from \"./ButtonNumber\";\nimport {SelectButtons} from \"./SelectButtons\";\nimport {EventData} from \"../../utils/types\";\n\nexport interface ParamConfig {\n    type: EParamType\n    props?: any\n    name: string\n}\n\nexport enum EParamType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    Select = \"select\",\n}\n\nexport const ParamComponents = {\n    [EParamType.Boolean]: ButtonSelect,\n    [EParamType.Select]: SelectButtons,\n    [EParamType.Number]: ButtonNumber,\n};\n\nexport interface ParamsProps {\n    data: any\n    value?: any\n    name?: string\n\n    onChange?(value?: any, name?: string)\n}\n\nexport interface ParamsState {\n\n}\n\nexport class Params extends React.PureComponent<ParamsProps, ParamsState> {\n\n    handleChange = (data: EventData) => {\n        const {value, onChange, name} = this.props;\n\n        console.log(data);\n        onChange && onChange({...value, [data.name]: data.value}, name);\n    };\n\n    render() {\n        const {data, value} = this.props;\n        return (\n            <div className={\"params\"}>\n                {data.map(paramConfig => {\n                    const {type, name, props} = paramConfig;\n                    const Component = ParamComponents[type] || ButtonSelect;\n                    return (\n                        <Component\n                            {...props}\n                            value={value[name]}\n                            name={name}\n                            onChange={this.handleChange}\n                            key={name}/>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import {BrushParams,EBrushCompositeOperation, EBrushType} from \"./types\";\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(EBrushType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(EBrushCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\nconst patternSizeRange = [0, 5] as [number, number];\nconst patternSizeValueD = ValueD.VerticalLinear(200);\n\nexport const getBrushParamsConfig = (params?: BrushParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }, {\n        name: \"patternSize\",\n        type: EParamType.Number,\n        props: {\n            range: patternSizeRange,\n            valueD: patternSizeValueD\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {BrushParams, EBrushType, SetBrushParamsAction} from \"./types\";\nimport {EBrushAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getBrushParamsConfig} from \"./helpers\";\n\nexport interface BrushState {\n    params: BrushParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const brushReducer = handleActions<BrushState>({\n    [EBrushAction.SET_PARAMS]: (state: BrushState, action: SetBrushParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getBrushParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        patternSize: 1,\n        size: 5,\n        opacity: 1,\n        type: EBrushType.Square\n    },\n    paramsConfig: getBrushParamsConfig()\n});\n\n\n","\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {ELineType, LineParams} from \"./types\";\nimport {ELineCompositeOperation} from \"./types\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(ELineType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(ELineCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\n\nexport const getLineParamsConfig = (params?: LineParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {ELineType, LineParams, SetLineParamsAction} from \"./types\";\nimport {ELineAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getLineParamsConfig} from \"./helpers\";\n\nexport interface LineState {\n    params: LineParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const lineReducer = handleActions<LineState>({\n    [ELineAction.SET_PARAMS]: (state: LineState, action: SetLineParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getLineParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        size: 5,\n        opacity: 1,\n        type: ELineType.Default\n    },\n    paramsConfig: getLineParamsConfig()\n});\n\n\n","import {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {\n    curveTypesSelectItems,\n    selectionModesSelectItems\n} from \"../../components/Area/Selection\";\nimport {\n    CurveValueName,\n    ESelectionMode, SelectToolParams\n} from \"./types\";\n\nexport const getSelectToolParamsConfig = (params?: SelectToolParams) => {\n    let config: ParamConfig[] = [{\n        name: \"mode\",\n        type: EParamType.Select,\n        props: {\n            items: selectionModesSelectItems,\n        }\n    }];\n\n    if (params && params.mode === ESelectionMode.Points) {\n        config.push({\n            name: \"curveType\",\n            type: EParamType.Select,\n            props: {\n                items: curveTypesSelectItems\n            }\n        });\n\n        if (Object.keys(CurveValueName).indexOf(params.curveType) !== -1) {\n            config = [...config, {\n                name: CurveValueName[params.curveType],\n                type: EParamType.Number,\n                props: {\n                    range: [0, 1],\n                    text: 1\n                }\n            }]\n        }\n    }\n\n    return config;\n};","import {handleActions} from \"redux-actions\";\nimport {SetSelectToolParamsAction, SelectToolParams, CurveValueName} from \"./types\";\nimport {ESelectToolAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {ECurveType, ESelectionMode} from \"./types\";\nimport {getSelectToolParamsConfig} from \"./helpers\";\n\nexport interface SelectToolState {\n    params: SelectToolParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const selectToolReducer = handleActions<SelectToolState>({\n    [ESelectToolAction.SET_PARAMS]: (state: SelectToolState, action: SetSelectToolParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getSelectToolParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    },\n}, {\n    params: {\n        mode: ESelectionMode.Rect,\n        curveType: ECurveType.CurveLinear,\n        [CurveValueName[ECurveType.CurveBundle]]: 0,\n        [CurveValueName[ECurveType.CurveCardinal]]: 1,\n        [CurveValueName[ECurveType.CurveCatmullRom]]: 1\n    },\n    paramsConfig: getSelectToolParamsConfig(),\n});\n\n\n","import {handleActions} from \"redux-actions\";\nimport {ERoomsAction} from \"./actions\";\nimport {UpdateRoomsAction} from \"./types\";\n\nexport interface Room {\n    name: string\n}\n\nexport interface RoomsState {\n    rooms: Room[]\n}\n\nexport const roomsReducer = handleActions<RoomsState>({\n    [ERoomsAction.UPDATE_ROOMS]: (state: RoomsState, action: UpdateRoomsAction) => ({\n        rooms: action.rooms\n    })\n}, {\n    rooms: []\n});\n","import {EParamType} from \"../../components/_shared/Params\";\nimport {ChangeFunctionsState} from \"./reducer\";\nimport {ECFType} from \"./types\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\n\n\nconst getId = (key: string, type: ECFType) => +key.slice(type.toString().length);\n\nexport const cfId = (type: ECFType, state: ChangeFunctionsState) => {\n    console.log(\n        Object\n            .keys(state)\n            .filter(key => state[key].type === type)\n    );\n    return type.toString() + (Object.keys(state).length\n        ? (Math.max(0,\n        ...Object\n            .keys(state)\n            .filter(key => state[key].type === type)\n            .map(key => getId(key, state[key].type)))) + 1\n        : 1);\n};\n\nconst chInitialParams = {\n    [ECFType.SIN]: {\n        a: 0.3,\n        t: 300,\n        p: 0,\n    },\n    [ECFType.LOOP]: {\n        start: 0,\n        end: 1,\n        t: 3000,\n        p: 0,\n    }\n};\n\nconst chParamsConfig = {\n    [ECFType.SIN]: [{\n        name: \"a\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(100),\n            range: [0, 1] as [number, number]\n        }\n    }, {\n        name: \"t\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(0.1),\n            range: [1, 1000] as [number, number]\n        }\n    }, {\n        name: \"p\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(0.5),\n            range: [1, 1500] as [number, number]\n        }\n    }],\n    [ECFType.LOOP]: [{\n        name: \"start\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(100),\n            range: [0, 1] as [number, number]\n        }\n    }, {\n        name: \"end\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(100),\n            range: [0, 1] as [number, number]\n        }\n    }, {\n        name: \"t\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(0.1),\n            range: [1, 3000] as [number, number]\n        }\n    }]\n};\n\nexport const createCFInitialState = (id, type: ECFType) => {\n\n    return {\n        id,\n        type,\n        params: chInitialParams[type],\n        paramsConfig: chParamsConfig[type]\n    }\n};\n\n\nexport const changeFunctionByType = {\n    [ECFType.SIN]: (params, range) => (startValue, time) => startValue + params.a * (range[1] - range[0]) * Math.sin(time / params.t),\n    [ECFType.LOOP]:\n        (params, range) =>\n            (startValue, time) =>\n                ((time % params.t) / params.t) * (params.end * (range[1] - range[0]) - params.start * (range[1] - range[0])) + params.start * (range[1] - range[0])\n};","import {handleActions} from \"redux-actions\";\nimport {AddCFAction, ChangeCFParamsAction, ChangeFunction, ECFType} from \"./types\";\nimport {EChangeFunctionsAction} from \"./actions\";\nimport {cfId, createCFInitialState} from \"./helpers\";\n\n\nexport interface ChangeFunctionsState {\n    [key: string]: ChangeFunction\n}\n\nexport const changeFunctionsReducer = handleActions<ChangeFunctionsState>({\n    [EChangeFunctionsAction.ADD_CF]: (state: ChangeFunctionsState, action: AddCFAction) => {\n        const id = cfId(action.cfType, state);\n        console.log(id, action.cfType, state);\n        return {\n            ...state,\n            [id]: createCFInitialState(id, action.cfType)\n        }\n    },\n    [EChangeFunctionsAction.CHANGE_PARAMS]: (state: ChangeFunctionsState, action: ChangeCFParamsAction) => {\n        return {\n            ...state,\n            [action.id]: {\n                ...state[action.id],\n                params: action.params\n            }\n        }\n    }\n}, {});","import {handleActions} from \"redux-actions\";\nimport {\n    ActivateValueChangingAction,\n    ChangingValue,\n    DeactivateValueChangingAction, SetStartValueAction,\n    SetValueInChangingListAction\n} from \"./types\";\nimport {EChangingValuesAction} from \"./actions\";\nimport omit from \"lodash/omit\";\n\nexport interface ChangingValuesState {\n    [path: string]: ChangingValue\n}\n\nexport const changingValuesReducer = handleActions<ChangingValuesState>({\n    [EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST]: (state: ChangingValuesState, action: SetValueInChangingListAction) => {\n        if (!state[action.path]) {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        active: true,\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                        startValue: action.startValue,\n                    }\n                }\n            } else {\n                return state;\n            }\n        } else {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        ...state[action.path],\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                    }\n                }\n            } else {\n                return omit(state, action.path);\n            }\n        }\n    },\n    [EChangingValuesAction.SET_START_VALUE]: (state: ChangingValuesState, action: SetStartValueAction) => {\n        return state[action.path] ? {\n            ...state,\n            [action.path]: {\n                ...state[action.path],\n                startValue: action.startValue,\n            }\n        } : state\n    },\n    [EChangingValuesAction.ACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: ActivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: true\n        }\n    }),\n    [EChangingValuesAction.DEACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: DeactivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: false\n        }\n    }),\n}, {});","import {handleActions} from \"redux-actions\";\nimport {EChangingAction} from \"./actions\";\nimport {ChangingMode} from \"./types\";\n\nexport interface ChangingState {\n    isChanging: boolean\n    mode: ChangingMode\n}\n\nexport const changingReducer = handleActions<ChangingState>({\n    [EChangingAction.START]: (state: ChangingState) => ({\n        ...state,\n        isChanging: true\n    }),\n    [EChangingAction.STOP]: (state: ChangingState) => ({\n        ...state,\n        isChanging: false\n    }),\n    [EChangingAction.SET_MODE]: (state: ChangingState, action) => ({\n        ...state,\n        mode: action.mode\n    }),\n}, {\n    isChanging: false,\n    mode: ChangingMode.OnDraw\n});\n","import {ChangeColorAction} from \"./types\";\n\n\nexport enum EColorAction {\n    CHANGE = \"color/change\",\n}\n\nexport const changeColor = (color: string): ChangeColorAction =>\n    ({type: EColorAction.CHANGE, color});","import {handleActions} from \"redux-actions\";\nimport {ChangeColorAction} from \"./types\";\nimport {EColorAction} from \"./actions\";\n\n\nexport interface ColorState {\n    value: string\n}\n\nexport const colorReducer = handleActions<ColorState>({\n    [EColorAction.CHANGE]: (state: ColorState, action: ChangeColorAction) => {\n\n        return {\n            ...state,\n            value: action.color\n        }\n    },\n}, {\n    value: \"#000000\"\n});","import {handleActions} from \"redux-actions\";\nimport * as immutable from 'object-path-immutable';\nimport {AppState} from \"../index\";\nimport {ChangeToStartValueAction, EChangeAction} from \"./actions\";\nimport {changeFunctionByType} from \"../changeFunctions/helpers\";\n\nexport const changeReducer = handleActions<AppState>({\n    [EChangeAction.CHANGE]: (state: AppState, action) => {\n        console.log(state, action.time);\n\n        const {changeFunctions, changingValues} = state;\n\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n\n            console.log(path, active);\n            if (!active) return res;\n\n            const changeFunctionData = changeFunctions[changeFunctionId];\n\n            const changeFunction = changeFunctionByType[changeFunctionData.type];\n\n            let nextValue = changeFunction(changeFunctionData.params, range)(startValue, action.time);\n            nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n\n            return res.set(path, nextValue)\n        }, immutable.wrap(state)).value();\n    },\n    [EChangeAction.TO_START_VALUE]: (state: AppState, action: ChangeToStartValueAction) => {\n        const {path} = action;\n        const {changingValues} = state;\n\n        return changingValues[path]\n            ? immutable.wrap(state).set(path, changingValues[path].startValue).value()\n            : state;\n    },\n    [EChangeAction.ALL_TO_START_VALUE]: (state: AppState) => {\n        const {changingValues} = state;\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n            return res.set(path, startValue)\n        }, immutable.wrap(state)).value();\n    },\n}, {});","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reduceReducers from 'reduce-reducers';\n\nimport {PatternsState, patternsReducer} from \"./patterns/reducer\";\nimport {ToolState, toolReducer} from \"./tool/reducer\";\nimport {BrushState, brushReducer} from \"./brush/reducer\";\nimport {LineState, lineReducer} from \"./line/reducer\";\nimport {SelectToolState, selectToolReducer} from \"./selectTool/reducer\";\nimport {RoomsState, roomsReducer} from \"./rooms/reducer\";\nimport {ChangeFunctionsState, changeFunctionsReducer} from \"./changeFunctions/reducer\";\nimport {ChangingValuesState, changingValuesReducer} from \"./changingValues/reducer\";\nimport {changingReducer, ChangingState} from \"./changing/reducer\";\nimport {colorReducer, ColorState} from \"./color/reducer\";\nimport {changeReducer} from \"./change/reducer\";\nimport {fullscreenReducer, FullScreenState} from \"./fullscreen\";\n\nexport interface AppState {\n    fullScreen: FullScreenState\n\n    patterns: PatternsState\n\n    color: ColorState\n\n    tool: ToolState\n    brush: BrushState\n    line: LineState\n\n    selectTool: SelectToolState\n\n    rooms: RoomsState\n\n    changeFunctions: ChangeFunctionsState\n    changingValues: ChangingValuesState\n    changing: ChangingState\n}\n\nconst rootReducer = reduceReducers(\n    combineReducers<AppState>({\n        fullScreen: fullscreenReducer,\n\n        patterns: patternsReducer,\n\n        color: colorReducer,\n\n        tool: toolReducer,\n        brush: brushReducer,\n        line: lineReducer,\n\n        selectTool: selectToolReducer,\n\n        rooms: roomsReducer,\n\n        changeFunctions: changeFunctionsReducer,\n        changingValues: changingValuesReducer,\n        changing: changingReducer\n    }),\n    changeReducer\n);\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\nimport './App.scss';\nimport {Main} from \"./components/Main\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nconst App: React.FC = () => (\n    <Provider store={store}>\n        <Main/>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"path-data-polyfill\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}