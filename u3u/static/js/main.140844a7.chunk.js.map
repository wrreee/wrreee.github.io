{"version":3,"sources":["components/_shared/Button.tsx","utils/imageData.ts","store/patterns/actions.ts","store/tool/types.ts","components/Pattern/HistoryControls.tsx","utils/path.ts","utils/geometry.ts","components/_shared/SVG.tsx","utils/utils.ts","store/selectTool/types.ts","store/brush/types.ts","components/Area/Selection.tsx","components/_shared/Canvas.tsx","store/line/types.ts","store/change/actions.ts","store/changing/types.ts","store/changing/actions.ts","components/Area/Draw.tsx","components/_shared/InputNumber.tsx","components/Area/index.tsx","components/_shared/InputText.tsx","components/_shared/ButtonSelect.tsx","utils/mouse.ts","components/_shared/Key.tsx","components/_shared/ButtonNumber.tsx","store/changingValues/actions.ts","components/_shared/SelectButtons.tsx","components/_shared/SelectDrop.tsx","components/_shared/HoverHideable.tsx","components/_shared/ShortcutInput.tsx","components/_shared/ButtonNumberCF.tsx","components/Area/MaskDraw.tsx","components/Pattern/index.tsx","store/tool/actions.ts","components/Patterns.tsx","store/patterns/service.ts","store/brush/actions.ts","store/patterns/selectors.ts","components/Tools/Brush.tsx","store/line/actions.ts","components/Tools/Line.tsx","store/selectTool/actions.ts","components/Tools/SelectTool.tsx","store/fullscreen/index.ts","store/rooms/actions.ts","components/Tools/index.tsx","store/changeFunctions/actions.ts","components/Rooms.tsx","store/rooms/service.ts","components/_shared/Params.tsx","components/ChangeF/SinCF.tsx","store/changeFunctions/types.ts","components/ChangeF/index.tsx","components/Layout.tsx","components/Main.tsx","utils/state.ts","store/patterns/helpers.ts","store/patterns/reducer.ts","store/tool/reducer.ts","store/brush/helpers.ts","store/brush/reducer.ts","store/line/helpers.ts","store/line/reducer.ts","store/selectTool/helpers.ts","store/selectTool/reducer.ts","store/rooms/reducer.ts","store/changeFunctions/helpers.ts","store/changeFunctions/reducer.ts","store/changingValues/reducer.ts","store/changing/reducer.ts","store/color/actions.ts","store/color/reducer.ts","store/change/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","children","onClick","onMouseDown","onMouseUp","disabled","width","className","value","name","classNames","e","style","canvasToImageData","canvas","getContext","getImageData","height","imageDataToCanvas","imageData","document","createElement","ctx","putImageData","EPatternsAction","EPatternAction","resizeImageData","oldCanvas","newCanvas","drawImage","imageDataToBase64","toDataURL","maskedImage","maskImageData","globalCompositeOperation","EToolType","updateImage","id","emit","dispatch","getState","socket","patterns","type","UPDATE_IMAGE","HistoryControls","onUndo","onRedo","history","before","length","after","ESegType","EPathModeType","selectionTools","Select","pointsDistance","x1","y1","x2","y2","Math","sqrt","pow","SVG","props","elementRef","pre","mouseDownHandler","setState","dragging","onDown","mouseUpHandler","state","onUp","mouseMoveHandler","onDrag","onMove","React","createRef","this","current","addEventListener","ref","PureComponent","Path","M","path","x","y","values","L","Z","Rect","n","findSliceBounds","sliceStart","sliceEnd","slice","Slice","m","i","j","getLastSlice","getNearestSegment","nearest","reduce","res","segment","index","distance","startInSlice","sliceN","stringToPathData","string","createElementNS","setAttribute","getPathData","ECurveType","defaultValue","key","objectToSelectItems","object","text","withNull","nullText","items","Object","keys","map","defaultArrayValue","item","arrayToSelectItems","array","ESelectionMode","CurveValueName","CurveBundle","CurveCardinal","CurveCatmullRom","EBrushType","EBrushCompositeOperation","lineFunction","d3","defined","HANDLER_SIZE","selectionModesSelectItems","Line","Points","curveTypesSelectItems","CanvasSelectionComponent","canvasRef","pathRef","pathPointsRef","maskPathRef","maskRef","commitChanges","onChange","selectToolHandlers","down","offsetX","offsetY","startX","startY","currentSliceN","oppositeIndex","oppositeSeg","drag","up","filter","exit","nextMode","SimplePoints","curvePath","subFirst","reverse","newCurvePath","line","selectToolParams","curveType","curveValue","curve","indexOf","points","closed","prevPath","Array","isArray","prevProps","mode","console","log","isActive","setPathData","fill","fillOpacity","mask","stroke","nextProps","prevState","Selection","connect","selectTool","params","currentTool","tool","Canvas","drawing","event","clickProcess","removeEventListener","releaseProcess","drawProcess","moveProcess","ImageData","ELineType","ELineCompositeOperation","EChangeAction","ChangingMode","EChangingAction","toStartValue","TO_START_VALUE","allToStartValue","ALL_TO_START_VALUE","requestID","startChanging","cancelAnimationFrame","startTime","performance","now","requestAnimationFrame","changing","time","CHANGE","change","START","stopChanging","STOP","startDrawChanging","OnDraw","stopDrawChanging","getRandomColor","color","floor","random","timer","CanvasDrawComponent","handlers","Brush","Square","squareBrush","ev","brush","size","opacity","compositeOperation","fillStyle","globalAlpha","fillRect","SourceOver","draw","click","Circle","circleBrush","beginPath","arc","PI","Pattern","patternBrush","pattern","p","resultImage","Default","strokeStyle","lineWidth","moveTo","lineTo","release","closePath","Interrupted","InterruptedOneStroke","getType","getTypeField","handlersByTool","get","mapDispatchToProps","Draw","AreaComponent","imageValue","selectionValue","selectionParams","onImageChange","onSelectionChange","Area","InputNumber","min","max","step","delay","notZero","_value","set_value","n_value","target","clearTimeout","setTimeout","InputText","onFocus","onBlur","curtop","ButtonSelect","selected","data","Key","handlePress","preventRepeat","onPress","handleRelease","onRelease","keyboardjs","mousePositionElement","mousePosDoc","posx","posy","window","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","mousePositionDocument","targetPos","obj","curleft","offsetParent","offsetLeft","offsetTop","left","top","findPos","targ","srcElement","nodeType","parentNode","mouseTarget","EChangingValuesAction","DEFAULT_WIDTH","defaultGetText","toFixed","ValueD","VerticalLinear","oldValue","dx","dy","ButtonNumber","handleDown","startValue","persist","startPoint","handleMove","handleUp","calcValue","changingStartValue","precision","range","one","abs","handlePressed","valueD","nextValue","nextState","amplitude","changeFunctionId","shortcut","getText","otherProps","startVPerc","ampWidth","defaultGetValue","SelectButtons","handleClick","getValue","nullAble","br","SelectDrop","HoverHideable","button","ShortcutInput","handleChange","handleFocus","handleBlur","ButtonNumberCFComponent","changeFunctionsItems","changeFunctions","active","handleCFChange","setValueInChangingList","setStartValue","handleStartManualChanging","deactivateValueChanging","handleStopManualChanging","activateValueChanging","handleShortcutChange","changingValues","buttonNumberProps","othersButtonNumberProps","changingValueData","changingAmplitude","a","SET_VALUE_IN_CHANGING_LIST","DEACTIVATE_VALUE_CHANGING","ACTIVATE_VALUE_CHANGING","SET_START_VALUE","ButtonNumberCF","opacityRange","ECompositeOperation","BLACK","MaskDrawComponent","black","destinationOver","destinationOut","sourceOver","handleOpacityChange","onParamsChange","handleBlackChange","MaskDraw","EToolAction","inputNumberProps","roomName","handleImageChange","handleMaskChange","onMaskChange","handleSelectionChange","handleClearSelection","handleRemove","onRemove","handleUndo","handleRedo","handleSetWidth","onSetWidth","handleSetHeight","onSetHeight","handleMaskParamsChange","onMaskParamsChange","handleCreateRoom","onCreateRoom","handleConfigToggle","onConfigChange","config","connected","maskValue","maskParams","selection","store","PatternsComponent","handleAddClick","addPattern","createRoom","removePattern","updateMask","setMaskParams","updateSelection","undo","redo","setWidth","setHeight","editConfig","SET_MASK_PARAMS","io","query","on","base64","src","Promise","resolve","image","Image","onload","base64ToImageData","then","CREATE_ROOM","ADD_PATTERN","REMOVE_PATTERN","UPDATE_SELECTION","REDO","UNDO","SET_WIDTH","SET_HEIGHT","EDIT_CONFIG","UPDATE_MASK","Patterns","EBrushAction","getPatternsSelectItems","createSelector","ELineAction","sizeRange","sizeValueD","opacityValueD","BrushComponent","handleSizeChange","setBrushParams","paramsValue","handlePatternChange","handleCompositeChange","handleTypeChange","paramsConfigMap","paramsConfig","patternsSelectItems","paramsConfigMapSelector","paramConfig","SET_PARAMS","ESelectToolAction","LineComponent","handleParamChange","setLineParams","Pattren","EFullScreenAction","SelectToolComponent","setSelectToolParams","otherParams","SelectTool","ERoomsAction","fullscreenReducer","handleActions","ON","OFF","SET","s","REVERSE","ToolsParams","component","setCurrentTool","SET_CURRENT","reverseFullScreen","Tools","ToolControls","toolType","EChangeFunctionsAction","RoomsComponent","handleRoomConnect","room","roomsConnect","rooms","UPDATE_ROOMS","updateRooms","CONNECT_ROOMS","Rooms","EParamType","ParamComponents","Boolean","Number","Params","Component","ECFType","SinCF","handleAChange","CFComponentByType","SIN","modesItems","enumToSelectItems","ChangeFComponent","changeCFParams","handleAddSin","addCF","handleModeChange","setChangingMode","cfs","changingMode","cf","CHANGE_PARAMS","cfType","ADD_CF","prevMode","On","Off","SET_MODE","ChangeF","Layout","full","fullScreen","setFullScreen","enabled","Main","createCleanCanvasState","createImageData","getFunctionState","initialValue","initialParams","getHistoryState","getStoreState","getSelectionState","getMaskState","reducePattern","reducer","action","historyPush","historyLength","beforeNext","shift","patternsReducer","patternId","undefined","createPatternInitialState","omit","updatePatternState","undoResult","prev","historyUndo","redoResult","next","historyRedo","toolReducer","typeSelectItems","compositeOperationSelectItems","getBrushParamsConfig","brushReducer","getLineParamsConfig","lineReducer","getSelectToolParamsConfig","push","selectToolReducer","CurveLinear","roomsReducer","chInitialParams","t","chParamsConfig","changeFunctionByType","sin","changeFunctionsReducer","toString","getId","cfId","createCFInitialState","changingValuesReducer","EColorAction","changingReducer","isChanging","colorReducer","changeReducer","changeFunctionData","changeFunction","set","immutable","rootReducer","reduceReducers","combineReducers","createStore","applyMiddleware","thunk","logger","App","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ilBAwBaA,G,OAAgC,SAAC,GAA0F,IAAzFC,EAAwF,EAAxFA,SAAUC,EAA8E,EAA9EA,QAASC,EAAqE,EAArEA,YAAaC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACzH,OACI,0BACIF,UAAWG,EAAW,SAAUH,GAChCL,QAAO,+GAAE,SAAAS,GAAC,OAAIT,GAAWA,EAAQ,CAACS,IAAGH,QAAOC,YAC5CL,UAAS,+GAAE,SAAAO,GAAC,OAAIP,GAAaA,EAAU,CAACO,IAAGH,QAAOC,YAClDN,YAAW,+GAAE,SAAAQ,GAAC,OAAIR,GAAeA,EAAY,CAACQ,IAAGH,QAAOC,YACxDG,MAAO,CAACN,SACRD,SAAUA,GACTJ,K,QCjCAY,EAAoB,SAACC,GAAD,OAC7BA,EAAOC,WAAW,MAAMC,aAAa,EAAG,EAAGF,EAAOR,MAAOQ,EAAOG,SAE7D,SAASC,EAAkBC,GAC9B,IAAML,EAASM,SAASC,cAAc,UAChCC,EAAMR,EAAOC,WAAW,MAE9B,OAAKO,GAILR,EAAOR,MAAQa,EAAUb,MACzBQ,EAAOG,OAASE,EAAUF,OAC1BK,EAAIC,aAAaJ,EAAW,EAAG,GAExBL,GAPI,KAUR,ICDKU,EAKAC,EDJCC,EAAkB,SAACP,EAAsBb,EAAeW,GACjE,IAAMU,EAAYT,EAAkBC,GAC9BS,EAAYR,SAASC,cAAc,UAMzC,OALAO,EAAUtB,MAAQA,EAClBsB,EAAUX,OAASA,EAEnBW,EAAUb,WAAW,MAAMc,UAAUF,EAAW,EAAG,EAAGrB,EAAOW,GAEtDJ,EAAkBe,IAGhBE,EAAoB,SAACX,GAC9B,IAAML,EAASM,SAASC,cAAc,UAChCC,EAAMR,EAAOC,WAAW,MAE9B,OAAKO,GAILR,EAAOR,MAAQa,EAAUb,MACzBQ,EAAOG,OAASE,EAAUF,OAC1BK,EAAIC,aAAaJ,EAAW,EAAG,GAExBL,EAAOiB,aAPH,MAiCFC,EAAc,SAACb,EAAsBc,GAC9C,IAAMnB,EAASM,SAASC,cAAc,UAChCC,EAAMR,EAAOC,WAAW,MAE9B,OAAKO,GAMLR,EAAOR,MAAQa,EAAUb,MACzBQ,EAAOG,OAASE,EAAUF,OAEtBgB,IACAX,EAAIC,aAAaU,EAAe,EAAG,GACnCX,EAAIY,yBAA2B,aAEnCZ,EAAIO,UAAUX,EAAkBC,GAAY,EAAG,EAAGA,EAAUb,MAAOa,EAAUF,QAEtEH,GAdI,O,SCvDHU,K,2BAAAA,E,kCAAAA,M,cAKAC,K,oCAAAA,E,kCAAAA,E,4CAAAA,E,0CAAAA,E,kCAAAA,E,oBAAAA,E,oBAAAA,E,kCAAAA,E,sCAAAA,E,8BAAAA,E,gCAAAA,E,oDAAAA,E,mCAAAA,M,KAiBL,ICrCKU,ED2CCC,EAAc,SAACC,EAAYlB,GAAb,IAAmCmB,IAAnC,gEACvB,SAACC,EAAUC,GAEP,IAAMC,EAASD,IAAWE,SAASL,GAAII,OAIvC,OAFAH,GAAQG,GAAUA,EAAOH,KAAK,QAASR,EAAkBX,IAElDoB,EAAS,CAACI,KAAMlB,EAAemB,aAAczB,YAAWkB,S,OEvC1DQ,G,OAAkD,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAE7E,OACI,gCACI,gBAAC,EAAD,CACI9C,QAAS4C,EACTzC,UAAW2C,EAAQC,OAAOC,OAC1B5C,MAAO,IAHX,OAIS0C,EAAQC,OAAOC,OAAf,WAA4BF,EAAQC,OAAOC,OAA3C,KAAuD,IAChE,gBAAC,EAAD,CACIhD,QAAS6C,EACT1C,UAAW2C,EAAQG,MAAMD,OACzB5C,MAAO,IAHX,OAIS0C,EAAQG,MAAMD,OAAd,WAA2BF,EAAQG,MAAMD,OAAzC,KAAqD,Q,SDxB9Df,K,cAAAA,E,gBAAAA,E,aAAAA,M,KAUL,I,EEVKiB,EAMAC,EFICC,EAAiB,CAACnB,EAAUoB,QGZ5BC,EAAiB,SAACC,EAAIC,EAAIC,EAAIC,GACvC,OAAOC,KAAKC,KAAKD,KAAKE,IAAIN,EAAKE,EAAI,GAAKE,KAAKE,IAAIL,EAAKE,EAAI,KCsBjDI,EAAb,YAKI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAJVC,gBAGmB,IAFnBC,SAEmB,IAmBXC,iBAAmB,SAAAzD,GACvB,EAAK0D,SAAS,CAACC,UAAU,IADG,IAGrBC,EAAU,EAAKN,MAAfM,OAEPA,GAAUA,EAAO5D,IAxBF,EA2BX6D,eAAiB,SAAA7D,GACrB,GAAI,EAAK8D,MAAMH,SAAU,CACrB,EAAKD,SAAS,CAACC,UAAU,IAEzB,EAAKH,IAAM,KAHU,IAIdO,EAAQ,EAAKT,MAAbS,KAEPA,GAAQA,EAAK/D,KAlCF,EAsCXgE,iBAAmB,SAAAhE,GAAM,IAAD,EACH,EAAKsD,MAAvBW,EADqB,EACrBA,OAAQC,EADa,EACbA,OAEf,EAAKJ,MAAMH,UAAYM,GAAUA,EAAOjE,EAAG,EAAKwD,KAEhDU,GAAUA,EAAOlE,EAAG,EAAKwD,KAEzB,EAAKA,IAAMxD,GA1CX,EAAK8D,MAAQ,CACTH,UAAU,GAGd,EAAKJ,WAAaY,IAAMC,YACxB,EAAKZ,IAAM,KARI,EALvB,iFAiBQa,KAAKd,WAAWe,QAAQC,iBAAiB,YAAaF,KAAKZ,kBAC3DhD,SAAS8D,iBAAiB,UAAWF,KAAKR,gBAC1CQ,KAAKd,WAAWe,QAAQC,iBAAiB,YAAaF,KAAKL,oBAnBnE,+BAqDc,IAAD,EAC+CK,KAAKf,MAAlDhE,EADF,EACEA,SAAUK,EADZ,EACYA,MAAOW,EADnB,EACmBA,OAAQV,EAD3B,EAC2BA,UAAWK,EADtC,EACsCA,MAC3C,OACI,yBACIuE,IAAKH,KAAKd,WACV5D,MAAOA,EACPW,OAAQA,EACRV,UAAWA,EACXK,MAAOA,GACNX,OA9DjB,GAAyB6E,IAAMM,e,iCFrBnBhC,K,MAAAA,E,MAAAA,E,OAAAA,M,cAMAC,K,MAAAA,E,MAAAA,E,MAAAA,E,YAAAA,E,eAAAA,M,KAaL,IAEMgC,GAAI,mBACZhC,EAAciC,GAAI,SAACC,EAAD,0BAAmBC,EAAnB,KAAsBC,EAAtB,iCACXF,GADW,CACL,CAAC5C,KAAMS,EAASkC,EAAGI,OAAQ,CAACF,EAAGC,SAFhC,cAGZpC,EAAcsC,GAAI,SAACJ,EAAD,0BAAmBC,EAAnB,KAAsBC,EAAtB,iCACXF,GADW,CACL,CAAC5C,KAAMS,EAASuC,EAAGD,OAAQ,CAACF,EAAGC,SAJhC,cAKZpC,EAAcuC,GAAI,SAACL,GAAD,4BACXA,GADW,CACL,CAAC5C,KAAMS,EAASwC,QANjB,cAOZvC,EAAcwC,MAAO,SAACN,EAAD,GAAoE,IAAD,mBAAhD9B,EAAgD,KAA5CC,EAA4C,KAAxCC,EAAwC,KAApCC,EAAoC,KAArBkC,EAAqB,uDAAjB,EAAiB,EACxDC,EAAgBR,EAAMO,GAA9CE,EADgF,EAChFA,WAAYC,EADoE,EACpEA,SACjB,MAAM,GAAN,mBACOV,EAAKW,MAAM,EAAGF,IADrB,CAEI,CAACrD,KAAMS,EAASkC,EAAGI,OAAQ,CAACjC,EAAIC,IAChC,CAACf,KAAMS,EAASuC,EAAGD,OAAQ,CAAC/B,EAAID,IAChC,CAACf,KAAMS,EAASuC,EAAGD,OAAQ,CAAC/B,EAAIC,IAChC,CAACjB,KAAMS,EAASuC,EAAGD,OAAQ,CAACjC,EAAIG,IAChC,CAACjB,KAAMS,EAASwC,IANpB,YAOOL,EAAKW,MAAMD,EAAW,QAhBpB,cAmBZ5C,EAAc8C,OAAQ,SAACZ,EAAiBW,GAAwC,IAAtBJ,EAAqB,uDAAjB,EAAiB,EAC/CC,EAAgBR,EAAMO,GAA9CE,EADuE,EACvEA,WAAYC,EAD2D,EAC3DA,SACjB,MAAM,GAAN,mBACOV,EAAKW,MAAM,EAAGF,IADrB,YAEOE,GAFP,YAGOX,EAAKW,MAAMD,EAAW,QAxBpB,GA6BJF,EAAkB,SAACR,EAAMO,GAGlC,IAFA,IAAIE,EAAYC,EACZG,EAAI,EACCC,EAAI,EAAGA,EAAId,EAAKrC,OAAQmD,IAC7B,GAAId,EAAKc,GAAG1D,OAASS,EAASkC,EAAG,CAC7B,GAAIc,IAAMN,EAAG,CACTE,EAAaK,EACb,IAAK,IAAIC,EAAID,EAAGC,EAAIf,EAAKrC,OAAQoD,IAC7B,GAAIf,EAAKe,GAAG3D,OAASS,EAASwC,EAAG,CAC7BK,EAAWK,EACX,MAGR,MAEJF,IAIR,MAAO,CACHJ,WAAkC,qBAAfA,EAA6BT,EAAKrC,OAAS8C,EAC9DC,SAA8B,qBAAbA,EAA2BV,EAAKrC,OAAS+C,IAIrDM,EAAe,SAAChB,GACzB,IAAIc,EACJ,IAAKA,EAAId,EAAKrC,OAAS,EAAGmD,GAAK,GACvBd,EAAKc,GAAG1D,OAASS,EAASkC,EADAe,KAMlC,OAAOd,EAAKW,MAAMG,IAcTG,EAAoB,SAACjB,EAAiBC,EAAWC,GAC1D,GAAKF,GAASA,EAAKrC,OAAnB,CAGA,IAqBI8C,EAAYC,EArBVQ,EAA8BlB,EAAKW,MAAM,GAAGQ,QAAO,SAACC,EAAyBC,EAASC,GAGxF,GAFAA,KAEKD,EAAQlB,OACT,OAAOiB,EAEX,IAAMG,EAAWtD,EAAegC,EAAGC,EAAGmB,EAAQlB,OAAO,GAAIkB,EAAQlB,OAAO,IAExE,OAAOoB,EAAWH,EAAIG,SAAW,CAC7BA,WAAUF,UACVC,SACAF,IACL,CACCX,WAAY,EACZC,SAAU,EACVc,aAAc,EACdF,MAAO,EACPD,QAASrB,EAAK,GACduB,SAAUtD,EAAegC,EAAGC,EAAGF,EAAK,GAAGG,OAAO,GAAIH,EAAK,GAAGG,OAAO,MAIrEe,EAAQO,QAAU,EAClB,IAAK,IAAIX,EAAI,EAAGA,EAAId,EAAKrC,OAAQmD,IAEzBd,EAAKc,GAAG1D,OAASS,EAASkC,GAAKe,GAAKI,EAAQI,QAC5Cb,EAAaK,EACbI,EAAQO,QAAU,GAElBzB,EAAKc,GAAG1D,OAASS,EAASwC,GAAKS,EAAII,EAAQI,QAAUZ,IACrDA,EAAWI,GAWnB,OAPAI,EAAQT,WAAaA,EACrBS,EAAQR,SAAWA,EACnBQ,EAAQM,aAAef,EAAaS,EAAQI,MAAQb,EAAaS,EAAQI,MAEzEJ,EAAQP,MAAQX,EAAKW,MAAMO,EAAQT,WAAYS,EAAQR,SAAW,GAG3DQ,IAWEQ,EAAmB,SAACC,GAC7B,IAAM3B,EAAOnE,SAAS+F,gBAAgB,6BAA8B,QAKpE,OAFA5B,EAAK6B,aAAa,IAAKF,GAEf3B,EAAa8B,eGjKzB,I,ECEYC,EDFNC,EAAe,SAAC/G,EAAOgH,GAAR,OAAiBA,GACzBC,EAAsB,SAC/BC,GAKE,IAJFlH,EAIC,uDAJyC+G,EAC1CI,EAGC,uDAH2CJ,EAC5CK,EAEC,uCADDC,EACC,uCACKC,EAAQC,OAAOC,KAAKN,GAAQO,KAAI,SAAAT,GAAG,MAAK,CAC1ChH,MAAOA,EAAMkH,EAAOF,GAAMA,GAC1BG,KAAMA,EAAKD,EAAOF,GAAMA,OAG5B,OAAOI,EAAQ,CACR,CACCpH,MAAO,KACPmH,KAAME,GAAY,MAHX,mBAILC,IAASA,GAIjBI,EAAoB,SAACC,GAAD,OAAUA,GACvBC,EAAqB,SAC9BC,GAD8B,IAE9B7H,EAF8B,uDAEF0H,EAC5BP,EAH8B,uDAGAO,EAHA,OAK9BG,EAAMJ,KAAI,SAAAE,GAAI,MAAK,CACf3H,MAAOA,EAAM2H,GACbR,KAAMA,EAAKQ,S,SC3BPb,K,wBAAAA,E,0BAAAA,E,8BAAAA,E,kCAAAA,E,0BAAAA,E,gCAAAA,E,gCAAAA,E,4BAAAA,E,sBAAAA,E,kCAAAA,E,iCAAAA,M,KAcL,IAMKgB,EANCC,GAAc,mBACtBjB,EAAWkB,YAAc,QADH,cAEtBlB,EAAWmB,cAAgB,WAFL,cAGtBnB,EAAWoB,gBAAkB,SAHP,I,SAMfJ,K,YAAAA,E,YAAAA,E,4BAAAA,E,iBAAAA,M,gBCpBAK,EAgCAC,ECTNC,EAAeC,SAEhBtD,GAAE,gBAAEE,EAAF,EAAEA,OAAF,OAAcA,EAASA,EAAO,GAAK,KACrCD,GAAE,gBAAEC,EAAF,EAAEA,OAAF,OAAcA,EAASA,EAAO,GAAK,KACrCqD,SAAQ,sBAAErD,UAGTsD,GAAe,EAGRC,GAA4Bb,EACrC,CAACE,EAAezC,KAAMyC,EAAeY,KAAMZ,EAAea,SAEjDC,GAAwBhB,EAAmBL,OAAOrC,OAAO4B,IA0ChE+B,G,YAQF,WAAYpF,GAAQ,IAAD,gCACf,4CAAMA,KAPVqF,eAMmB,IALnBC,aAKmB,IAJnBC,mBAImB,IAHnBC,iBAGmB,IAFnBC,aAEmB,IA8CnBC,cAAgB,WAAO,IACZC,EAAY,EAAK3F,MAAjB2F,SAEPA,GAAYA,EAAS,EAAKnF,MAAMc,OAjDjB,EAoDnBsE,oBApDmB,mBAqDdvB,EAAezC,KAAQ,CACpBiE,KAAM,SAAAnJ,GAAM,IACD4E,EAAQ,EAAKd,MAAbc,KAEP,GAAIA,EAAKrC,OAAQ,CAEb,IAAMuD,EAA8BD,EAAkBjB,EAAM5E,EAAEoJ,QAASpJ,EAAEqJ,SAEzE,GAAIvD,GAAWA,EAAQK,SAA0B,EAAfkC,GAAkB,CAEhD,GAA6B,IAAzBvC,EAAQP,MAAMhD,OACd,OAAO,EAAKmB,UAAS,SAAAI,GAAK,MAAK,CAC3BwF,OAAQtJ,EAAEoJ,QACVG,OAAQvJ,EAAEqJ,QACVD,QAAS,EACTC,QAAS,EACTG,cAAe1D,EAAQO,OACvBzB,KAAMF,EAAKhC,EAAcwC,MAAMpB,EAAMc,KAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,QAASrJ,EAAEoJ,QAASpJ,EAAEqJ,SAAUvD,EAAQO,YAIrG,IAAMoD,GAAiB3D,EAAQM,aAAe,GAAK,EAC7CsD,EAAc5D,EAAQP,MAAMkE,GAE5BL,EAAUtD,EAAQG,QAAQlB,OAAO,GAAK/E,EAAEoJ,QACxCC,EAAUvD,EAAQG,QAAQlB,OAAO,GAAK/E,EAAEqJ,QAExCC,EAASI,EAAY3E,OAAO,GAC5BwE,EAASG,EAAY3E,OAAO,GAElC,OAAO,EAAKrB,UAAS,SAAAI,GAAK,MAAK,CAC3BwF,SAAQC,SACRH,UAASC,UACTG,cAAe1D,EAAQO,OACvBzB,KAAMF,EAAKhC,EAAcwC,MAAMpB,EAAMc,KAAM,CAAC0E,EAAQC,EAAQvJ,EAAEoJ,QAAUA,EAASpJ,EAAEqJ,QAAUA,GAAUvD,EAAQO,aAK/H,EAAK3C,UAAS,gBAAE8F,EAAF,EAAEA,cAAe5E,EAAjB,EAAiBA,KAAjB,MAA4B,CACtCwE,QAAS,EACTC,QAAS,EACTC,OAAQtJ,EAAEoJ,QACVG,OAAQvJ,EAAEqJ,QACVzE,KAAMF,EAAKhC,EAAcwC,MAAMN,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,QAASrJ,EAAEoJ,QAASpJ,EAAEqJ,SAAUG,QAI3FG,KAAM,SAAA3J,GACF,EAAK0D,UAAS,gBAAEkB,EAAF,EAAEA,KAAM0E,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAA0BC,GAA1C,EAAwBJ,QAAxB,EAAiCC,QAAjC,EAA0CG,eAA1C,MAA8D,CACxE5E,KAAMF,EAAKhC,EAAcwC,MAAMN,EAAM,CAAC0E,EAAQC,EAAQvJ,EAAEoJ,QAASpJ,EAAEqJ,SAAUG,QAGrFI,GAAI,WACA,EAAKlG,UAAS,SAAAI,GAAK,MAAK,CACpBwF,OAAQ,EAAGC,OAAQ,EAAGH,QAAS,EAAGC,QAAS,EAC3CG,cAAe1F,EAAMc,KAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAClE,EAAKyG,gBAEbc,KAAM,SAACC,OAhHI,cAmHdpC,EAAeqC,aAAe,CAC3Bb,KAAM,SAAAnJ,GAAM,IAAD,EACmB,EAAK8D,MAAxBc,EADA,EACAA,KAAMqF,EADN,EACMA,UAEb,GAAKrF,EAAKrC,QAAUqC,EAAKA,EAAKrC,OAAS,GAAGP,OAASS,EAASwC,EAIrD,CAECgF,EAAU1H,QACV,EAAKmB,UAAS,gBAAEkB,EAAF,EAAEA,KAAM4E,EAAR,EAAQA,cAAR,MAA4B,CACtCS,UAAW,GACXrF,KAAMF,EAAKhC,EAAc8C,OAAOZ,EAAMqF,EAAWT,OAIzD,IAAMU,EAAWtF,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGwF,UAAU,GAEpEtH,EAAe7C,EAAEoJ,QAASpJ,EAAEqJ,QAASa,EAASnF,OAAO,GAAImF,EAASnF,OAAO,IAAqB,EAAfsD,GAC/E,EAAK3E,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAcuC,GAAGL,GAC5B4E,cAAe5E,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAC5D,EAAKyG,eAET,EAAKtF,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAcsC,GAAGJ,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,mBArBxD,EAAK3F,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAciC,GAAGC,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,eAyB5DM,KAAM,aACNC,GAAI,aACJE,KAAM,SAACC,GAAc,IACVnF,EAAQ,EAAKd,MAAbc,KACHA,GAAQA,EAAKrC,QAAUqC,EAAKA,EAAKrC,OAAS,GAAGP,OAASS,EAASwC,GAAK8E,IAAapC,EAAea,QAChG,EAAK9E,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBqF,UAAW,GACXrF,KAAMF,EAAKhC,EAAcuC,GAAGL,GAC5B4E,cAAe5E,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAC5D,EAAKyG,kBA3JN,cA+JdrB,EAAea,OAAU,CACtBW,KAAM,SAAAnJ,GAAM,IAAD,EACmB,EAAK8D,MAAxBc,EADA,EACAA,KAAMqF,EADN,EACMA,UAEb,GAAKrF,EAAKrC,QAAUqC,EAAKA,EAAKrC,OAAS,GAAGP,OAASS,EAASwC,EASrD,CACEgF,EAAU1H,QACX,EAAKmB,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CAACqF,UAAWrE,EAAahB,OAExD,IAAMsF,EAAWtF,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGwF,UAAU,GAEpEtH,EAAe7C,EAAEoJ,QAASpJ,EAAEqJ,QAASa,EAASnF,OAAO,GAAImF,EAASnF,OAAO,IAAqB,EAAfsD,GAG/E,EAAK3E,UAAS,YAAwB,IAAtBkB,EAAqB,EAArBA,KAAMqF,EAAe,EAAfA,UACdG,EAAe1F,EAAKhC,EAAcsC,GAAGiF,EAAW,CAACC,EAASnF,OAAO,GAAImF,EAASnF,OAAO,KAGzF,OAFAqF,EAAe1F,EAAKhC,EAAcuC,GAAGmF,GAE9B,CACHH,UAAW,GACXrF,KAAMF,EAAKhC,EAAcuC,GAAG,EAAKoF,KAAKzF,EAAMwF,IAC5CZ,cAAe5E,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAEjE,EAAKyG,eAIR,EAAKtF,UAAS,YAAwB,IAAtBkB,EAAqB,EAArBA,KAAMqF,EAAe,EAAfA,UACZG,EAAe1F,EAAKhC,EAAcsC,GAAGiF,EAAW,CAACjK,EAAEoJ,QAASpJ,EAAEqJ,UAEpE,MAAO,CACHY,UAAWG,EACXxF,KAAM,EAAKyF,KAAKzF,EAAMwF,WApCyB,CAG3D,IAAMH,EAAYvF,EAAKhC,EAAciC,GAAG,EAAKb,MAAMmG,UAAW,CAACjK,EAAEoJ,QAASpJ,EAAEqJ,UAE5E,EAAK3F,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBqF,YACArF,KAAMF,EAAKhC,EAAciC,GAAGC,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,gBAmC5DM,KAAM,aACNC,GAAI,aACJE,KAAM,SAACC,GAAc,IACVnF,EAAQ,EAAKd,MAAbc,KACHA,GAAQA,EAAKrC,QAAUqC,EAAKA,EAAKrC,OAAS,GAAGP,OAASS,EAASwC,GAAK8E,IAAapC,EAAea,QAChG,EAAK9E,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBqF,UAAW,GACXrF,KAAMF,EAAKhC,EAAcuC,GAAGL,GAC5B4E,cAAe5E,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAC5D,EAAKyG,kBAtNN,cA0NdrB,EAAeY,KAAO,CACnBY,KAAM,SAAAnJ,GACF,EAAK0D,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAciC,GAAGC,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,eAGxDM,KAAM,SAAA3J,GACF,EAAK0D,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAcsC,GAAGJ,EAAM,CAAC5E,EAAEoJ,QAASpJ,EAAEqJ,eAGxDO,GAAI,SAAA5J,GACA,EAAK0D,UAAS,gBAAEkB,EAAF,EAAEA,KAAF,MAAa,CACvBA,KAAMF,EAAKhC,EAAcuC,GAAGL,GAC5B4E,cAAe5E,EAAKiF,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,UAC5D,EAAKyG,gBAEbc,KAAM,SAACC,OA3OI,KAgPnBM,KAAO,SAACzF,EAAMyF,GAAU,IACbC,EAAoB,EAAKhH,MAAzBgH,iBACAC,EAAaD,EAAbC,UACDC,EAAaF,EAAiB1C,EAAe2C,IAE/CE,EAAQtC,EAAGoC,GAAa,eAI5B,OAHwD,IAApDnD,OAAOC,KAAKO,GAAgB8C,QAAQH,KACpCE,EAAQA,EAAM7C,EAAe2C,IAAYC,IAEtC9F,EAAKhC,EAAc8C,OACtBZ,EACA0B,EACI4B,EAAauC,MAAMA,EAAnBvC,CAA0BtC,EAAayE,KAC3C,EAAKvG,MAAM0F,gBA1Pf,EAAKb,UAAYxE,cACjB,EAAKyE,QAAUzE,cACf,EAAK0E,cAAgB1E,cACrB,EAAK2E,YAAc3E,cACnB,EAAK4E,QAAU5E,cAEf,EAAKL,MAAQ,CACTwF,OAAQ,KACRC,OAAQ,KACRH,QAAS,KACTC,QAAS,KACTsB,OAAQ,GACRC,QAAQ,EACRhG,KAAM,GACNiG,SAAU,KACVZ,UAAW,GACXT,cAAe,GAnBJ,E,iFAuBE,IACV3J,EAASwE,KAAKf,MAAdzD,MACPiL,MAAMC,QAAQlL,IAAUwE,KAAKX,SAAS,CAClCkB,KAAM/E,EACN2J,cAAe3J,EAAMgK,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,W,yCAIlDyI,GACXA,EAAUV,iBAAiBW,OAAS5G,KAAKf,MAAMgH,iBAAiBW,MAChE5G,KAAK6E,mBAAmB8B,EAAUV,iBAAiBW,MAAMnB,KAAKzF,KAAKf,MAAMgH,iBAAiBW,Q,+BAgO9FC,QAAQC,IAAI,kBAAmB9G,KAAKP,MAAMc,MADrC,MAE6DP,KAAKf,MAAhE3D,EAFF,EAEEA,MAAOW,EAFT,EAESA,OAA2B2K,EAFpC,EAEiBX,iBAAmBW,KAAOG,EAF3C,EAE2CA,SAAUtL,EAFrD,EAEqDA,KAK1D,OAHAuE,KAAKuE,QAAQtE,SAAWD,KAAKuE,QAAQtE,QAAQ+G,YAAYhH,KAAKP,MAAMc,MACpEP,KAAKyE,YAAYxE,SAAWD,KAAKyE,YAAYxE,QAAQ+G,YAAYhH,KAAKP,MAAMc,MAGxE,uBAAKhF,UAAWG,IAAW,YAAD,eACrB,kBAAoBqL,KAErB,gBAAC,EAAD,CACIzL,MAAOA,EACPW,OAAQA,EACRsD,OAAQS,KAAK6E,mBAAmB+B,GAAM9B,KACtClF,OAAQI,KAAK6E,mBAAmB+B,GAAMtB,KACtC5F,KAAMM,KAAK6E,mBAAmB+B,GAAMrB,IACnCvF,KAAKP,MAAMc,MAAQP,KAAKP,MAAMc,KAAKrC,QAAU,gCAC1C,wBACIb,GAAE,uBAAkB5B,GACpB0E,IAAKH,KAAK0E,SACV,wBAAMlE,EAAE,IAAIC,EAAE,IAAInF,MAAOA,EAAOW,OAAQA,EAAQgL,KAAK,UACrD,wBACI9G,IAAKH,KAAKyE,YACVyC,YAAa,EACbD,KAAK,WAEb,wBAAMzG,EAAE,IAAIC,EAAE,IAAInF,MAAOA,EAAOW,OAAQA,EAAQgL,KAAK,QAAQC,YAAa,GACpEC,KAAI,4BAAuB1L,EAAvB,OACV,wBACI0E,IAAKH,KAAKuE,QACV2C,YAAa,EACbD,KAAK,QACLG,OAAO,c,gDA5PCC,EAAiCC,GAAY,IAClE9L,EAAS6L,EAAT7L,MACP,OAAOiL,MAAMC,QAAQlL,IAAUA,IAAU8L,EAAUd,SAAW,CAC1DA,SAAUhL,EACV+E,KAAM/E,EACN2J,cAAe3J,EAAMgK,QAAO,qBAAE7H,OAAmBS,EAASkC,KAAGpC,QAC7D,O,GAnD2B4B,iBAwT1ByH,GAAYC,aAP8E,SAAA/H,GAAK,MAAK,CAC7GwG,iBAAkBxG,EAAMgI,WAAWC,OACnCC,YAAalI,EAAMmI,KAAK3H,WAGwE,GAE3EuH,CAEvBnD,IC7VWwD,I,OAAb,YAMI,WAAY5I,GAAQ,IAAD,8BACf,4CAAMA,KALVqF,eAImB,IAHnBhI,SAGmB,IAFnB6C,SAEmB,IAiDXC,iBAAmB,SAAAzD,GACvBkL,QAAQC,IAAI,eACZ1K,SAAS8D,iBAAiB,UAAW,EAAKV,gBAC1C,EAAKH,SAAS,CAACyI,SAAS,IAExB,IAAMC,EAAQ,CACVpM,IACAW,IAAK,EAAKA,IACVR,OAAQ,EAAKwI,UAAUrE,QACvB6H,SAAS,GAGNvI,EAAU,EAAKN,MAAfM,OAEPA,GAAUA,EAAOwI,GAdW,IAgBrBC,EAAgB,EAAK/I,MAArB+I,aAEPA,GAAgBA,EAAaD,IAnEd,EAwEXvI,eAAiB,SAAA7D,GAGrB,GAFAkL,QAAQC,IAAI,aACZ1K,SAAS6L,oBAAoB,UAAW,EAAKzI,gBACzC,EAAKC,MAAMqI,QAAS,CACpB,EAAKzI,SAAS,CAACyI,SAAS,IAExB,EAAK3I,IAAM,KAHS,IAIbyF,EAAY,EAAK3F,MAAjB2F,SAEPA,GAAYA,EAAS/I,EAAkB,EAAKyI,UAAUrE,UAEtD,IAAM8H,EAAQ,CACVpM,IACAW,IAAK,EAAKA,IACVR,OAAQ,EAAKwI,UAAUrE,QACvB6H,SAAS,GAGNpI,EAAQ,EAAKT,MAAbS,KAEPA,GAAQA,EAAKqI,GAjBO,IAmBbG,EAAkB,EAAKjJ,MAAvBiJ,eAEPA,GAAkBA,EAAeH,KAhGtB,EAoGXpI,iBAAmB,SAAAhE,GAAM,IAAD,EACO,EAAKsD,MAAjCkJ,EADqB,EACrBA,YAAaC,EADQ,EACRA,YAEpB,EAAK3I,MAAMqI,SAAWK,GAAeA,EAAY,CAC7CxM,IACAwD,IAAK,EAAKA,IACV7C,IAAK,EAAKA,IACVR,OAAQ,EAAKwI,UAAUrE,QACvB6H,SAAS,IAGbM,GAAeA,EAAY,CACvBzM,IACAwD,IAAK,EAAKA,IACV7C,IAAK,EAAKA,IACVR,OAAQ,EAAKwI,UAAUrE,QACvB6H,QAAS,EAAKrI,MAAMqI,UAOxB,EAAK3I,IAAMxD,GAxHX,EAAK8D,MAAQ,CACTqI,SAAS,GAGb,EAAKxD,UAAYxE,IAAMC,YACvB,EAAKzD,IAAM,KACX,EAAK6C,IAAM,KATI,EANvB,iFAmBQa,KAAK1D,IAAM0D,KAAKsE,UAAUrE,QAAQlE,WAAW,MAG7CiE,KAAKsE,UAAUrE,QAAQC,iBAAiB,YAAaF,KAAKZ,kBAC1DY,KAAKsE,UAAUrE,QAAQC,iBAAiB,YAAaF,KAAKL,kBAEtDK,KAAKf,MAAMzD,iBAAiB6M,WAC5BrI,KAAK1D,IAAIC,aAAayD,KAAKf,MAAMzD,MAAO,EAAG,KA1BvD,6CA+BQwE,KAAKsE,UAAUrE,QAAQgI,oBAAoB,YAAajI,KAAKZ,kBAC7DY,KAAKsE,UAAUrE,QAAQgI,oBAAoB,YAAajI,KAAKL,oBAhCrE,yCAmCuBgH,IAUXA,EAAUnL,QAAUwE,KAAKf,MAAMzD,OAC/BmL,EAAUrL,QAAU0E,KAAKf,MAAM3D,OAC/BqL,EAAU1K,SAAW+D,KAAKf,MAAMhD,SAC/B+D,KAAKf,MAAMzD,iBAAiB6M,YAC7BrI,KAAK1D,IAAM0D,KAAKsE,UAAUrE,QAAQlE,WAAW,MAC7C8K,QAAQC,MACR9G,KAAK1D,IAAIC,aAAayD,KAAKf,MAAMzD,MAAO,EAAG,MAnDvD,+BAsJQqL,QAAQC,IAAI,iBADP,MAEsD9G,KAAKf,MAAzDzD,EAFF,EAEEA,MAAOF,EAFT,EAESA,MAAOW,EAFhB,EAEgBA,OAAQV,EAFxB,EAEwBA,UAAWK,EAFnC,EAEmCA,MAAOX,EAF1C,EAE0CA,SAC/C,OACI,yBAAKM,UAAWG,EAAWH,EAAW,WAClC,4BACIK,MAAOA,EACPuE,IAAKH,KAAKsE,UACVhJ,MAAOA,IAAUE,EAAQA,EAAMF,MAAQ,KACvCW,OAAQA,IAAWT,EAAQA,EAAMS,OAAS,OAC7ChB,OA/JjB,GAA4B6E,IAAMM,iB,SF3CtBuD,K,gBAAAA,E,gBAAAA,E,mBAAAA,M,cAgCAC,K,yBAAAA,E,yBAAAA,E,mCAAAA,E,iCAAAA,E,kBAAAA,E,WAAAA,M,SG/BA0E,GAOAC,GCRAC,G,8BDCAF,K,kBAAAA,E,0BAAAA,E,4CAAAA,E,mBAAAA,Q,cAOAC,K,yBAAAA,E,yBAAAA,E,mCAAAA,E,iCAAAA,E,kBAAAA,E,WAAAA,Q,cCRAC,K,gBAAAA,E,uCAAAA,E,gDAAAA,Q,KAcL,IChBKC,GCMAC,GFaCC,GAAe,SAACpI,GAAD,MACvB,CAAC5C,KAAM6K,GAAcI,eAAgBrI,SAE7BsI,GAAkB,iBAC1B,CAAClL,KAAM6K,GAAcM,sB,SCvBdL,K,gBAAAA,E,QAAAA,E,WAAAA,Q,cCMAC,K,uBAAAA,E,qBAAAA,E,8BAAAA,Q,KAMZ,I,GAAIK,GAAY,KAEHC,GAAgB,kBAAM,SAACzL,EAAUC,GAE1C,IAAKuL,GAAW,CACZA,IAAaE,qBAAqBF,IAElC,IAAMG,EAAYC,YAAYC,MAS9B,OAPAL,GAAYM,uBAAsB,SAASC,EAASC,GAEhDhM,EFPU,SAACgM,GAAD,MACjB,CAAC5L,KAAM6K,GAAcgB,OAAQD,QEMbE,CAAOF,EAAOL,IAEvBH,GAAYM,sBAAsBC,MAG/B/L,EAAS,CAACI,KAAM+K,GAAgBgB,WAIlCC,GAAe,kBAAM,SAACpM,EAAUC,GAMzC,OAJAuL,IAAaE,qBAAqBF,IAElCA,GAAY,KAELxL,EAAS,CAACI,KAAM+K,GAAgBkB,SAG9BC,GAAoB,kBAAM,SAACtM,EAAUC,GAI9C,GAHwBA,IACL8L,SAAS1C,OAEf6B,GAAaqB,OACtB,OAAOvM,EAASyL,QAGXe,GAAmB,kBAAM,SAACxM,EAAUC,GAI7C,GAHwBA,IACL8L,SAAS1C,OAEf6B,GAAaqB,OAEtB,OADAvM,EAASsL,MACFtL,EAASoM,QClBxB,SAASK,KAIL,IAFA,IACIC,EAAQ,IACH5I,EAAI,EAAGA,EAAI,EAAGA,IACnB4I,GAHU,mBAGOpL,KAAKqL,MAAsB,GAAhBrL,KAAKsL,WAErC,OAAOF,E,IC/BPG,GDkCEC,G,iNAEFC,U,mBACKnN,EAAUoN,O,mBACN5G,EAAW6G,OAAU,WAClB,IAAMC,EAAc,SAACC,GAAQ,IAClBpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADY,EAEoB,EAAKsD,MAAM0L,MAAMjD,OAAtDkD,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,QAASC,EAFE,EAEFA,mBAEtBxO,EAAIyO,UAAYf,KAChB1N,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2B4N,EAE/BxO,EAAI2O,SAAStP,EAAEoJ,QAAU6F,EAAO,EAAGjP,EAAEqJ,QAAU4F,EAAO,EAAGA,EAAMA,GAG/DtO,EAAIY,yBAA2B0G,EAAyBsH,WACxD5O,EAAI0O,YAAc,GAEtB,MAAO,CACHG,KAAMV,EACNW,MAAOX,GAjBO,I,cAoBrB9G,EAAW0H,OAAU,WAClB,IAAMC,EAAc,SAACZ,GAAQ,IAClBpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADY,EAEoB,EAAKsD,MAAM0L,MAAMjD,OAAtDkD,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,QAASC,EAFE,EAEFA,mBAEtBxO,EAAIyO,UAAYf,KAChB1N,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2B4N,EAE/BxO,EAAIiP,YACJjP,EAAIkP,IAAI7P,EAAEoJ,QAASpJ,EAAEqJ,QAAS4F,EAAO,EAAG,EAAG,EAAI/L,KAAK4M,IACpDnP,EAAI2K,OAEJ3K,EAAIY,yBAA2B0G,EAAyBsH,WACxD5O,EAAI0O,YAAc,GAEtB,MAAO,CACHG,KAAMG,EACNF,MAAOE,GAlBO,I,cAqBrB3H,EAAW+H,QAAW,WACnB,IAAMC,EAAe,SAACjB,GAAQ,IACnBpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EACL+B,EAAY,EAAKuB,MAAjBvB,SAFkB,EAG4B,EAAKuB,MAAM0L,MAAMjD,OAAzDmD,GAHY,EAGlBD,KAHkB,EAGZC,SAASC,EAHG,EAGHA,mBAAoBc,EAHjB,EAGiBA,QAE1CtP,EAAIyO,UAAYf,KAChB1N,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2B4N,EAG/B,IAAMe,EAAInO,EAASkO,IAAYlO,EAASkO,GAASE,YAC7CD,IAEAvP,EAAIO,UAAUgP,EAAGlQ,EAAEoJ,QAAU8G,EAAEvQ,MAAQ,EAAGK,EAAEqJ,QAAU6G,EAAE5P,OAAS,EAAG4P,EAAEvQ,MAAOuQ,EAAE5P,QAE/EK,EAAIY,yBAA2B0G,EAAyBsH,WACxD5O,EAAI0O,YAAc,IAG1B,MAAO,CACHG,KAAMQ,EACNP,MAAOO,GAtBQ,I,kBA0B1BxO,EAAU+G,M,mBACNoE,GAAUyD,QAAU,CACjBX,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADD,EAEiC,EAAKsD,MAAM+G,KAAK0B,OAArDkD,EAFI,EAEJA,KAAMC,EAFF,EAEEA,QAASC,EAFX,EAEWA,mBAGtBxO,EAAIiP,YACJjP,EAAIY,yBAA2B4N,EAC/BxO,EAAI0O,YAAcH,EAClBvO,EAAI0P,YAAchC,KAClB1N,EAAI2P,UAAYrB,EAEhBtO,EAAI4P,OAAOvQ,EAAEoJ,QAASpJ,EAAEqJ,UAG5BmG,KAAM,SAACT,GAAQ,IACJpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADF,EAEc,EAAKsD,MAAM+G,KAAK0B,OAAjCkD,EAFG,EAEHA,KAAMC,EAFH,EAEGA,QAEbvO,EAAI2P,UAAYrB,EAChBtO,EAAI0O,YAAcH,EAClBvO,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,UAERgF,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,EACpBrP,EAAEW,IAAI+P,e,cAGb/D,GAAUgE,YAAc,CACrBlB,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IADI,GACMoO,EAAL/O,EACgC,EAAKsD,MAAM+G,KAAK0B,QAArDkD,EAFI,EAEJA,KAAMC,EAFF,EAEEA,QAASC,EAFX,EAEWA,mBAGtBxO,EAAIY,yBAA2B4N,EAC/BxO,EAAI0O,YAAcH,EAClBvO,EAAI0P,YAAchC,KAClB1N,EAAI2P,UAAYrB,EAGhBtO,EAAIiP,aAGRJ,KAAM,SAACT,GAAQ,IACJpO,EAAeoO,EAAfpO,IAAKX,EAAU+O,EAAV/O,EAAGwD,EAAOuL,EAAPvL,IADL,EAEc,EAAKF,MAAM+G,KAAK0B,OAAjCkD,EAFG,EAEHA,KAAMC,EAFH,EAEGA,QAER1L,IACL7C,EAAI2P,UAAYrB,EAChBtO,EAAI0O,YAAcH,EAElBvO,EAAI4P,OAAO/M,EAAI4F,QAAS5F,EAAI6F,SAE5B1I,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,WAERgF,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,EACpBrP,EAAEW,IAAI+P,e,cAGb/D,GAAUiE,qBAAuB,CAC9BnB,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IADI,GACMoO,EAAL/O,EACgC,EAAKsD,MAAM+G,KAAK0B,QAArDkD,EAFI,EAEJA,KAAMC,EAFF,EAEEA,QAASC,EAFX,EAEWA,mBAEtBxO,EAAIY,yBAA2B4N,EAE/BxO,EAAI0O,YAAcH,EAClBvO,EAAI0P,YAAchC,KAClB1N,EAAI2P,UAAYrB,GAKpBO,KAAM,SAACT,GAAQ,IACJpO,EAAeoO,EAAfpO,IAAKX,EAAU+O,EAAV/O,EAAGwD,EAAOuL,EAAPvL,IADL,EAEc,EAAKF,MAAM+G,KAAK0B,OAAjCkD,EAFG,EAEHA,KAAMC,EAFH,EAEGA,QAEbvO,EAAI2P,UAAYrB,EAChBtO,EAAI0O,YAAcH,EACb1L,IAEL7C,EAAIiP,YACJjP,EAAI4P,OAAO/M,EAAI4F,QAAS5F,EAAI6F,SAE5B1I,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,SACJ9K,EAAI+P,cAERD,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,K,+EAM1B,IAAD,EACuChL,KAAKf,MAA1C2I,EADF,EACEA,KAAMoB,EADR,EACQA,cAAeW,EADvB,EACuBA,aAEtB6C,EAAUC,GAAa7E,GACvBjK,EAAO6O,EAAUA,EAAQxM,KAAKf,OAAS,EACvCyN,EAAiB1M,KAAKsK,SAAS1C,GAC/B0C,EAAWoC,GAAkBA,EAAe/O,GAElD,OADAkJ,QAAQC,IAAIwD,GAER,gBAAC,GAAD,eACI/K,OAAQyJ,EACRtJ,KAAMiK,EACNxB,YAAamC,GAAYA,EAASa,KAClCnD,aAAcsC,GAAYA,EAASc,MACnClD,eAAgBoC,GAAYA,EAAS8B,SACjCpM,KAAKf,Y,GAlMSa,iBAuM5B2M,IAAY,qBACbtP,EAAU+G,MAAO,SAAAjF,GAAK,OAAI0N,KAAI1N,EAAO,uBADxB,eAEb9B,EAAUoN,OAAQ,SAAAtL,GAAK,OAAI0N,KAAI1N,EAAO,wBAFzB,IAYZ2N,GAAoF,CACtF5D,cAAea,GAAmBF,aAAcI,IAGvC8C,GAAOrF,aAXyE,SAAA/H,GAAK,MAAK,CACnGkL,MAAOlL,EAAMkL,MACb3E,KAAMvG,EAAMuG,KACZ4B,KAAMnI,EAAMmI,KAAK3H,QACjBvC,SAAU+B,EAAM/B,YAQCkP,GADDpF,CAElB6C,IEnOIyC,I,wLACQ,IAAD,EACqH9M,KAAKf,MAAxH0I,EADF,EACEA,YAAalM,EADf,EACeA,KAAMQ,EADrB,EACqBA,OAAQX,EAD7B,EAC6BA,MAAOyR,EADpC,EACoCA,WAAYC,EADhD,EACgDA,eAAgBC,EADhE,EACgEA,gBAAiBC,EADjF,EACiFA,cAAeC,EADhG,EACgGA,kBAErG,OACI,uBAAK5R,UAAU,QACX,gBAACsR,GAAD,CACIrR,MAAOuR,EACPzR,MAAOA,EACPW,OAAQA,EACR2I,SAAUsI,IACd,gBAAC3F,GAAD,CACIR,UAAmD,IAAzCzI,EAAe+H,QAAQsB,GACjClM,KAAMA,EACNH,MAAOA,EACPW,OAAQA,EACRT,MAAOwR,EACPtF,OAAQuF,EACRrI,SAAUuI,S,GAlBFrN,kBA8BfsN,GAAO5F,aAN6D,SAAA/H,GAAK,MAAK,CACvFkI,YAAalI,EAAMmI,KAAK3H,WAGkD,GAE1DuH,CAGlBsF,IDvDWO,GAA0C,SAAC,GAAsE,IAArE7R,EAAoE,EAApEA,MAAOoJ,EAA6D,EAA7DA,SAA6D,IAAnD0I,WAAmD,MAA7C,EAA6C,MAA1CC,WAA0C,MAApC,EAAoC,MAAjCC,YAAiC,MAA1B,IAA0B,EAApBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAAa,EAE7F5N,WAAetE,GAF8E,mBAElHmS,EAFkH,KAE1GC,EAF0G,KAIzH9N,aAAgB,WACZtE,IAAUmS,IAAWvD,IAASwD,EAAUpS,MAkC5C,OACI,yBACImC,KAAK,SACL6P,KAAMA,EACNF,IAAKA,EACLC,IAAKA,EACL/R,MAAOmS,EACP/I,SAtCc,SAAAjJ,GAClB,IAAMkS,GAAWlS,EAAEmS,OAAOtS,MAE1B,GAAKiS,EAWDG,EAAUC,GAEVzD,IAAS2D,aAAa3D,IACtBA,GAAQ4D,YAAW,YACXN,GAAYG,GAKhBjJ,EAASiJ,GACTE,aAAa3D,IACbA,GAAQ,MANJwD,EAAUpS,KAQfiS,OAxBK,CAER,GAAIC,IAAYG,EACZ,OAGJD,EAAUC,GACVjJ,EAASiJ,QEnBRI,GAAsC,SAAC,GAAmD,IAAlDrJ,EAAiD,EAAjDA,SAAUsJ,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,OAAQ3S,EAAsB,EAAtBA,MAAOD,EAAe,EAAfA,UAMnF,OACI,yBACIA,UAAWG,EAAWH,EAAW,cACjCoC,KAAK,OACLnC,MAAOA,EACP0S,QAASA,EACTC,OAAQA,EACRvJ,SAXc,SAAAjJ,GAClBiJ,GAAYA,EAASjJ,EAAEmS,OAAOtS,W,+kBCA/B,IChBH4S,GDgBSC,GAA4C,SAAC,GAAsE,IAArE9S,EAAoE,EAApEA,UAAW+S,EAAyD,EAAzDA,SAAUpT,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,UAAc6D,EAAW,6EAE3H,OACI,gBAAC,EAAD,iBACQA,EADR,CAEI/D,QAAO,+GAAE,SAAAqT,GAAI,OAAIrT,GAAWA,EAAQ,MAAIqT,EAAL,CAAWD,iBAC9CnT,YAAW,+GAAE,SAAAoT,GAAI,OAAIpT,GAAeA,EAAY,MAAIoT,EAAL,CAAWD,iBAC1DlT,UAAS,+GAAE,SAAAmT,GAAI,OAAInT,GAAaA,EAAU,MAAImT,EAAL,CAAWD,iBACpD/S,UAAWG,EAAW,gBAAiBH,EAAlB,eAA+B,yBAA2B+S,Q,SEV9EE,GAAb,2MAMIC,YAAc,SAAA9S,GACVA,EAAE+S,gBADa,MAES,EAAKzP,MAAtB0P,EAFQ,EAERA,QAAS3L,EAFD,EAECA,KAChB2L,GAAWA,EAAQhT,EAAGqH,IAT9B,EAYI4L,cAAgB,SAAAjT,GAAM,IAAD,EACS,EAAKsD,MAAxB4P,EADU,EACVA,UAAW7L,EADD,EACCA,KAClB6L,GAAaA,EAAUlT,EAAGqH,IAdlC,mFAwByB,IACVA,EAAQhD,KAAKf,MAAb+D,KACP6D,QAAQC,IAAI9G,KAAKf,OACjB6P,QAAgB9L,EAAMhD,KAAKyO,YAAazO,KAAK4O,iBA3BrD,yCA8BuBjI,GACXA,EAAU3D,OAAShD,KAAKf,MAAM+D,OAC9B8L,UAAkBnI,EAAU3D,KAAMhD,KAAKyO,YAAazO,KAAK4O,eACzDE,QAAgB9O,KAAKf,MAAM+D,KAAMhD,KAAKyO,YAAazO,KAAK4O,kBAjCpE,6CAsCQE,UAAkB9O,KAAKf,MAAM+D,KAAMhD,KAAKyO,YAAazO,KAAK4O,iBAtClE,+BA2CQ,OADA/H,QAAQC,IAAI,cAAe9G,KAAKf,MAAM+D,MAC/B,qCA3Cf,GAAyBlD,iBDqClB,SAASiP,GAAqBpT,GACjC,IAAIqT,EAvCR,SAA+BrT,GAC3B,IAAIsT,EAAO,EACPC,EAAO,EACX,IAAKvT,EACGA,EAAIwT,OAAOpH,MAUnB,OARIpM,EAAEyT,OAASzT,EAAE0T,OACbJ,EAAOtT,EAAEyT,MACTF,EAAOvT,EAAE0T,QAEJ1T,EAAE2T,SAAW3T,EAAE4T,WACpBN,EAAOtT,EAAE2T,QAAUlT,SAASoT,KAAKC,WAAarT,SAASsT,gBAAgBD,WACvEP,EAAOvT,EAAE4T,QAAUnT,SAASoT,KAAKG,UAAYvT,SAASsT,gBAAgBC,WAEnE,CACHnP,EAAIyO,EACJxO,EAAIyO,GAuBUU,CAAsBjU,GAEpCkU,EAnBR,SAAiBC,GACb,IAAIC,EAAU3B,GAAS,EACvB,GAAI0B,EAAIE,aACJ,GACID,GAAWD,EAAIG,WACf7B,IAAU0B,EAAII,gBACTJ,EAAMA,EAAIE,cAEvB,MAAO,CACHG,KAAOJ,EACPK,IAAMhC,IASMiC,CArDpB,SAAqB1U,GACjB,IAAI2U,EACJ,IAAK3U,EAAOA,EAAIwT,OAAOpH,MAKvB,OAJIpM,EAAEmS,OAAQwC,EAAO3U,EAAEmS,OACdnS,EAAE4U,aAAYD,EAAO3U,EAAE4U,YACX,GAAjBD,EAAKE,WACLF,EAAOA,EAAKG,YACTH,EA6CMI,CAAY/U,IAIzB,MAAO,CACH6E,EAHOwO,EAAYxO,EAAIqP,EAAUM,KAIjC1P,EAHOuO,EAAYvO,EAAIoP,EAAUO,K,+NElDzC,ICDYO,GDCNC,GAAgB,GAChBC,GAAiB,SAAArV,GAAK,OAAIA,EAAMsV,QAAQ,IAEjCC,GAAS,CAClBC,eAAgB,SAACxD,GAAD,OAAkB,SAACyD,EAAeC,EAAYC,GAA5B,OAAmCF,EAAWE,EAAK3D,KAgD5E4D,GAAb,YAEI,WAAYnS,GAAQ,IAAD,uBACf,4CAAMA,KA+BVoS,WAAa,SAAA9C,GAKT,GAHA1H,QAAQC,IAAI,SAGR,EAAKrH,MAAM6R,WAAf,CALiB,IASV3V,EAAK4S,EAAL5S,EACPA,EAAE4V,UAVe,MAYqB,EAAKtS,MAApC9D,EAZU,EAYVA,YAAaM,EAZH,EAYGA,KAAM6S,EAZT,EAYSA,SACnB9S,EAAS,EAAKiE,MAAdjE,MAEPL,GAAeA,EAAY,CAACQ,IAAGH,QAAOC,OAAM6S,aAE5C,EAAKjP,UAAS,kBAAc,CACxBiS,WADU,EAAE9V,MAEZgW,WAAY,CAAC7V,EAAE2T,QAAS3T,EAAE4T,aAC1B,WACAnT,SAAS8D,iBAAiB,YAAa,EAAKuR,YAC5CrV,SAAS8D,iBAAiB,UAAW,EAAKwR,eAtD/B,EA0DnBD,WAAa,SAAA9V,GAAM,IAAD,EACqB,EAAKsD,MAAjC2F,EADO,EACPA,SAAUnJ,EADH,EACGA,KAAM6S,EADT,EACSA,SACjB9S,EAAQ,EAAKmW,UAAUhW,GAG7BkL,QAAQC,IAAI,OAAQtL,GAEpBoJ,GAAYA,EAAS,CAACjJ,IAAGH,QAAOC,OAAM6S,aAEtC,EAAKjP,SAAS,CAAC7D,WAnEA,EAuEnBkW,SAAW,SAAC/V,GAAM,MAI4G,EAAKsD,MAApG/D,GAJb,EAIP0W,mBAJO,EAIa1W,SAASE,EAJtB,EAIsBA,UAAWwJ,EAJjC,EAIiCA,SAAUnJ,EAJ3C,EAI2CA,KAAM6S,EAJjD,EAIiDA,SAJjD,IAI2DhT,aAJ3D,MAImEsV,GAJnE,MAIkFiB,iBAJlF,MAI8F,IAJ9F,EAImGC,EAJnG,EAImGA,MAC7GtW,EAAQ,EAAKmW,UAAUhW,GAMrBoW,GAAOD,EAAM,GAAKA,EAAM,IAAMD,EAEpC,GAAIhT,KAAKmT,IAAIxW,EAAQ,EAAKiE,MAAM6R,YAAcS,EAAK,CAE/C,IAAMtR,EAAIsO,GAAqBpT,GAAG6E,EAClCqG,QAAQC,IAAI,QAASrG,EAAGnF,EAAQ,EAAG,EAAKmE,MAAM6R,YAC9C9V,EAAQqD,KAAKyO,IAAIzO,KAAK0O,IAClB,EAAK9N,MAAM6R,YAAc7Q,EAAInF,EAAQ,EAAIyW,GAAOA,GAC9CD,EAAM,IAAKA,EAAM,IAEvBjL,QAAQC,IAAItL,EAAO,IAAK,EAAKiE,MAAM6R,WAAY,IAAM7Q,EAAInF,EAAQ,EAAI,GAAK,GAC1EsJ,GAAYA,EAAS,CAACjJ,IAAGH,QAAOC,OAAM6S,kBAEtClT,GAAaA,EAAU,CAACO,IAAGH,QAAOC,OAAM6S,aAExCpT,GAAWA,EAAQ,CAACM,QAAOC,OAAME,IAAG2S,aAKxC,EAAKjP,SAAS,CACV7D,QACA8V,WAAY,KACZE,WAAY,OACb,WACCpV,SAAS6L,oBAAoB,YAAa,EAAKwJ,YAC/CrV,SAAS6L,oBAAoB,UAAW,EAAKyJ,cA5GlC,EAoHnBjD,YAAc,SAAA9S,GACV,IAAI,EAAK8D,MAAM6R,WAAf,CADe,MAKmB,EAAKrS,MAAhC0P,EALQ,EAKRA,QAASlT,EALD,EAKCA,KAAM6S,EALP,EAKOA,SACf9S,EAAS,EAAKiE,MAAdjE,MAEPmT,GAAWA,EAAQ,CAAChT,IAAGH,QAAOC,OAAM6S,aAEpC,EAAKjP,UAAS,kBAAc,CACxBiS,WADU,EAAE9V,MAEZgW,WAAY,SACZ,WACApV,SAAS8D,iBAAiB,YAAa,EAAK+R,oBAlIjC,EAsInBA,cAAgB,SAAAtW,GACZ,GAAK,EAAK8D,MAAM+R,WAIT,CAAC,IAAD,EACgC,EAAKvS,MAAjC2F,EADJ,EACIA,SAAUnJ,EADd,EACcA,KAAM6S,EADpB,EACoBA,SACjB9S,EAAQ,EAAKmW,UAAUhW,GAE7BiJ,GAAYA,EAAS,CAACjJ,IAAGH,QAAOC,OAAM6S,aAEtC,EAAKjP,SAAS,CAAC7D,eATf,EAAK6D,SAAS,CACVmS,WAAY,CAAC7V,EAAE2T,QAAS3T,EAAE4T,YAzInB,EAqJnBX,cAAgB,SAAAjT,GAAM,IAAD,EACmB,EAAKsD,MAAlC4P,EADU,EACVA,UAAWpT,EADD,EACCA,KAAM6S,EADP,EACOA,SACjB9S,EAAS,EAAKiE,MAAdjE,MAEPqT,GAAaA,EAAU,CAACrT,QAAOC,OAAME,IAAG2S,aAExC,EAAKjP,SAAS,CACV7D,QACA8V,WAAY,KACZE,WAAY,OACb,WACCpV,SAAS6L,oBAAoB,YAAa,EAAKgK,mBAhKpC,EAoKnBN,UAAY,SAAAhW,GACRkL,QAAQC,IAAI,EAAKrH,MAAM6R,YADV,MAEsC,EAAKrS,MAAjD6S,EAFM,EAENA,MAFM,IAECI,OAEVC,QAJS,MAEUpB,GAAOC,eAAe,GAFhC,GAIU,EAAKvR,MAAM6R,WAAY3V,EAAE2T,QAAU,EAAK7P,MAAM+R,WAAW,GAAI7V,EAAE4T,QAAU,EAAK9P,MAAM+R,WAAW,IAEtH,OADAW,EAAYtT,KAAKyO,IAAIzO,KAAK0O,IAAI4E,EAAWL,EAAM,IAAKA,EAAM,KAzK3C,IAGRA,EAAS7S,EAAT6S,MAHQ,OAKf,EAAKrS,MAAQ,CACTjE,MAAOyD,EAAMzD,OAASsW,EAAM,GAC5BN,WAAY,KACZF,WAAY,KACZhI,UAAU,GATC,EAFvB,mFAiB0BjC,EAAW+K,GAC7B,OAAOA,EAAU5W,QAAUwE,KAAKP,MAAMjE,OAC/B6L,EAAUuK,qBAAuB5R,KAAKf,MAAM2S,oBAC5CvK,EAAUgL,YAAcrS,KAAKf,MAAMoT,WACnChL,EAAUiL,mBAAqBtS,KAAKf,MAAMqT,kBAC1CjL,EAAUkL,WAAavS,KAAKf,MAAMsT,UAClClL,EAAU9L,YAAcyE,KAAKf,MAAM1D,YAvBlD,+BA+Kc,IAAD,EACuJyE,KAAKf,MAA1J2S,EADF,EACEA,mBAAoBU,EADtB,EACsBA,iBAAkBD,EADxC,EACwCA,UAAWP,EADnD,EACmDA,MADnD,IAC0DxW,aAD1D,MACkEsV,GADlE,EACiFrV,EADjF,EACiFA,UADjF,IAC4FiX,eAD5F,MACsG3B,GADtG,EACsHlO,EADtH,EACsHA,KAAM4P,EAD5H,EAC4HA,SAAaE,EADzI,gIAE2BzS,KAAKP,MAFhC,IAEEjE,aAFF,MAEU,EAFV,EAEa8V,EAFb,EAEaA,WAElBzK,QAAQC,IAAI,uBAAwB0L,EAAQhX,IAK5C,IAAMkX,EAAcd,GAAsBE,EAAM,GAAKA,EAAM,IAErDa,EAAY9T,KAAKyO,IAAIoF,EAAYL,GAAaxT,KAAKyO,IAAI,EAAIoF,EAAYL,GAG7E,OADAxL,QAAQC,IAAI4L,EAAYL,EAAWxT,KAAKyO,IAAIoF,EAAYL,GAAYxT,KAAKyO,KAAmB,EAAfoF,EAAoB,IAAKL,IAElG,gBAAC,GAAD,iBACQI,EADR,CAEIlX,UAAWG,EAAW,gBAAiBH,EAAlB,eAChB,yBAA2B+V,IAEhChW,MAAOA,EACPH,YAAa6E,KAAKqR,aAClB,uBACI9V,UAAW,sBACXK,MAAO,CAACN,OAAQE,EAAQsW,EAAM,KAAOA,EAAM,GAAKA,EAAM,IAAM,IAAM,MACjEU,EAAUA,EAAQhX,GAASmH,GAE/BiP,GAAsBS,GACvB,uBACI9W,UAAW,0BACXK,MAAO,CACHN,MAAkB,IAAXqX,EAAiB,IACxBxC,KAAK,QAAD,OAAkD,IAAvCtR,KAAK0O,IAAImF,EAAaL,EAAW,GAA5C,QAER,4BACCC,IAGJC,GACD,gBAAC,GAAD,CACIvP,KAAMuP,EACN5D,QAAS3O,KAAKyO,YACdI,UAAW7O,KAAK4O,oBAzNpC,gDA0BoCvH,EAAWC,GACvC,O,2VAAO,IACEA,EAAUkK,YAAcnK,EAAU7L,QAAU8L,EAAU9L,MAEvD,GAF+D,CAC/DA,MAAO6L,EAAU7L,YA7BjC,GAAkCsE,aEhCrB8S,GAAkB,SAAC,GAAD,SAAEpX,OACpBqV,GAAiB,SAAC,GAAD,SAAElO,MAEnBkQ,GAAb,2MAGIC,YAAc,YAAiC,IAAxB3P,EAAuB,EAA9B3H,MAAuBG,GAAO,EAAjB2S,SAAiB,EAAP3S,GAAO,EAC6C,EAAKsD,MAArFxD,EADmC,EACnCA,KAAMqH,EAD6B,EAC7BA,MAAO8B,EADsB,EACtBA,SADsB,IACZmO,gBADY,MACDH,GADC,EACgBI,EADhB,EACgBA,SAAiB/B,EADjC,EAC0BzV,MAChEA,EAAQuX,EAAS5P,GAEjB6P,GAAY/B,IAAazV,IACzBA,EAAQ,MAGZoJ,GAAYA,EAAS,CACjBpJ,QACAG,IAAGwH,OAAML,QAAOrH,UAb5B,wEAiBc,IAAD,SAC6FuE,KAAKf,MAAhG1D,EADF,EACEA,UAAWuH,EADb,EACaA,MAAOtH,EADpB,EACoBA,MAAOC,EAD3B,EAC2BA,KAD3B,IACiCsX,gBADjC,MAC4CH,GAD5C,MAC6DJ,eAD7D,MACuE3B,GADvE,EACuFoC,EADvF,EACuFA,GAI5F,OAFApM,QAAQC,IAAI,wBAAyBrL,GAGjC,wBAAMF,UAAWG,EAAWH,EAAW,mBACtCuH,EAAMG,KAAI,SAACE,EAAMtB,GAAP,OACP,kCACOoR,KAAQpR,KAAWA,EAAQoR,IAAO,2BACrC,gBAAC,GAAD,CACIzX,MAAO2H,EACPX,IAAKuQ,EAAS5P,GACdmL,SAAUyE,EAAS5P,KAAU3H,EAC7BJ,UAAW,SAACO,GACRkL,QAAQC,IAAInL,IAEhBT,QAAS,EAAK4X,aACbN,EAAQrP,aAnCjC,GAAmCrD,iBChBtBoT,I,OAAb,iLAEc,IAAD,EACyBlT,KAAKf,MAA5B1D,EADF,EACEA,UAAc0D,EADhB,8BAEEzD,EAAmCyD,EAAnCzD,MAAmCyD,EAA5BuT,QAGd,OAFA3L,QAAQC,IAAI,qBAAsB7H,EAAMxD,KAAMD,GAG1C,uBAAKD,UAAWG,EAAWH,EAAW,gBAClC,gBAAC,EAAD,CAAQA,UAAW,qBACdC,GAAS,QAEd,gBAAC,GAAD,iBAAmByD,EAAnB,CAA0B1D,UAAW,4BAZrD,GAAgCuE,mB,SFRpB6Q,K,uDAAAA,E,kDAAAA,E,mDAAAA,E,wDAAAA,Q,mBAQL,I,GGCMwC,GAAb,iLAEc,IAAD,EACiCnT,KAAKf,MAApChE,EADF,EACEA,SAAUmY,EADZ,EACYA,OAAQ7X,EADpB,EACoBA,UACzB,OACI,uBAAKA,UAAWG,EAAW,iBAAkBH,IACxC6X,EACD,uBAAK7X,UAAW,8BAA+BN,QAP/D,GAAmC6E,iBCEtBuT,I,OAAb,2MAEIC,aAAe,SAAC3X,GACZ,EAAKsD,MAAM2F,SAAmB,cAAVjJ,EAAE6G,IAAsB,KAAO7G,EAAE6G,MAH7D,EAMI+Q,YAAc,WACVzE,QAAgB,GAAI,EAAKwE,eAPjC,EASIE,WAAa,WACT1E,UAAkB,GAAI,EAAKwE,eAVnC,wEAcc,IACC9X,EAASwE,KAAKf,MAAdzD,MACP,OACI,gBAAC,GAAD,CACID,UAAW,iBACXC,MAAOA,EACP0S,QAASlO,KAAKuT,YACdpF,OAAQnO,KAAKwT,WACb5O,SAAU,mBAtB1B,GAAmC9E,kBCyC7B2T,G,2MAEFhU,MAAQ,CACJiU,qBAAsB,GACtBC,gBAAiB,KACjBC,QAAQ,EACRrB,SAAU,M,EAadsB,eAAiB,YAAgC,IAAvBvB,EAAsB,EAA7B9W,MAA6B,EACS,EAAKyD,OAC1D6U,EAF4C,EACrCA,wBADqC,EACbvT,KACF+R,EAFe,EACPR,MADO,EACAtW,Q,EAIhD8X,aAAe,SAAC/E,GAEZ,EAAKtP,MAAM2F,SAAS2J,GAFC,MAIgB,EAAKtP,OAC1C8U,EALqB,EAIdA,eAJc,EAICxT,KAJD,EAIO/E,Q,EAIhCwY,0BAA4B,WAAO,IAAD,EACU,EAAK/U,OAC7CgV,EAF8B,EACvBA,yBADuB,EACE1T,MAEhC,EAAKlB,SAAS,CAACuU,QAAQ,K,EAG3BM,yBAA2B,WAAO,IAAD,EACS,EAAKjV,OAC3CkV,EAF6B,EACtBA,uBADsB,EACC5T,MAE9B,EAAKlB,SAAS,CAACuU,QAAQ,K,EAG3BQ,qBAAuB,SAAA7B,GAAQ,OAAI,EAAKlT,SAAS,CAACkT,c,wEAExC,IAAD,EACiEvS,KAAKf,MAApE0U,EADF,EACEA,gBAAiBU,EADnB,EACmBA,eAAgB9T,EADnC,EACmCA,KAAS+T,EAD5C,4DAG2DC,GAA2BD,EAApF1P,SAAoF0P,EAA1EnZ,YAA0EmZ,EAA7DlZ,UAA6DkZ,EAAlD3F,QAAkD2F,EAAzCzF,UAH7C,aAGsFyF,EAHtF,+DAKLzN,QAAQC,IAAI,eAEZ,IAAM0N,EAAoBH,EAAe9T,GACnCqR,EAAqB4C,GAAqBA,EAAkBlD,WAC5DgB,EAAmBkC,GAAqBH,EAAe9T,GAAM+R,iBAC7DmC,EAAoBD,GAAqBb,EAAgBrB,GAAkB5K,OAAOgN,EAExF,OACI,gBAAC,GAAD,CACInZ,UAAW,mBACX6X,OACI,gBAAC,GAAD,iBACQmB,EADR,CAGIhC,SAAUvS,KAAKP,MAAM8S,SAErBhX,UAAWG,EAAW,yBAAD,eAChB,gCAAkCsE,KAAKP,MAAMmU,SAGlDtB,iBAAkBA,EAClBV,mBAAoBA,EACpBS,UAAWoC,EAEX7P,SAAU5E,KAAKsT,aACfnY,YAAa6E,KAAKgU,0BAClBrF,QAAS3O,KAAKgU,0BACd5Y,UAAW4E,KAAKkU,yBAChBrF,UAAW7O,KAAKkU,8BAEtBlU,KAAKP,MAAMmU,QACb,gBAAC,GAAD,CACIrY,UAAW,4BACX6X,OAAQ,uBAAK7X,UAAU,qCAAoC,8BAE3D,gBAAC,GAAD,CACIC,MAAOwE,KAAKP,MAAM8S,SAClB3N,SAAU5E,KAAKoU,uBACnB,gBAAC,GAAD,CACIpB,UAAQ,EACRzX,UAAW,0BACXC,MAAO6Y,EAAerU,KAAKf,MAAMsB,OAAS8T,EAAerU,KAAKf,MAAMsB,MAAM+R,iBAC1E1N,SAAU5E,KAAK6T,eACf/Q,MAAO9C,KAAKP,MAAMiU,4B,gDArFNzU,EAAOQ,GACnC,OAAIR,EAAM0U,kBAAoBlU,EAAMkU,gBACzB,CACHA,gBAAiB1U,EAAM0U,gBACvBD,qBAAsBjR,EAAoBxD,EAAM0U,iBAAiB,qBAAEtW,MAAY,qBAAEA,OAGlF,S,GAhBuByC,iBA2GhC8M,GAA4F,CAC9FkH,uBLvJA,SAACvT,EAAc+R,EAA0BR,EAAyBR,GAAlE,OAAyF,SAAC/T,GACtFA,EAASoL,GAAapI,IACtBhD,EAAS,CACLI,KAAMgT,GAAsBgE,2BAC5BpU,OAAM+R,mBAAkBR,QAAOR,iBKmJf2C,wBL7HW,SAAC1T,GAAD,OAAkB,SAAChD,EAAUC,GACxCA,IAEjB6W,eAEY9T,KACfhD,EAASoL,GAAapI,IACtBhD,EAAS,CAACI,KAAMgT,GAAsBiE,0BAA2BrU,YKsHpB4T,sBLvIhB,SAAC5T,GAAD,OAAkB,SAAChD,EAAUC,GACtCA,IAEjB6W,eAEY9T,IACfhD,EAAS,CAACI,KAAMgT,GAAsBkE,wBAAyBtU,WKiIKoI,gBAAcoL,cL9ItF,SAACxT,EAAc+Q,GAAf,OAAsC,SAAC/T,GACnCA,EAAS,CACLI,KAAMgT,GAAsBmE,gBAC5BvU,OAAM+Q,kBK8ILyD,GAAiBvN,aATmD,SAAA/H,GAAK,MAAK,CACvFkU,gBAAiBlU,EAAMkU,gBACvBU,eAAgB5U,EAAM4U,kBAStBzH,GAF0BpF,CAG5BiM,ICjIIuB,GAAe,CAAC,EAAG,GAiCzB,IAEKC,GAFCC,GAAQ,S,SAETD,K,yBAAAA,E,mCAAAA,E,kCAAAA,Q,SAMCE,G,iNAEF7K,U,mBACKnN,EAAUoN,O,mBACN5G,EAAW6G,OAAS,CACjBW,KAAM,SAACT,GAAQ,IACJpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADF,EAEe,EAAKsD,MAAMyI,OAA7B0N,EAFG,EAEHA,MAAOvK,EAFJ,EAEIA,QACPD,EAAQ,EAAK3L,MAAM0L,MAAMjD,OAAzBkD,KAEPtO,EAAIyO,UAAYmK,GAChB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAI2O,SAAStP,EAAEoJ,QAAU6F,EAAO,EAAGjP,EAAEqJ,QAAU4F,EAAO,EAAGA,EAAMA,GAG/DtO,EAAIY,yBAA2B+X,GAAoBM,WACnDjZ,EAAI0O,YAAc,GAEtBI,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADD,EAEc,EAAKsD,MAAMyI,OAA7B0N,EAFI,EAEJA,MAAOvK,EAFH,EAEGA,QACPD,EAAQ,EAAK3L,MAAM0L,MAAMjD,OAAzBkD,KAEPtO,EAAIyO,UAAYmK,GAChB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAI2O,SAAStP,EAAEoJ,QAAU6F,EAAO,EAAGjP,EAAEqJ,QAAU4F,EAAO,EAAGA,EAAMA,GAG/DtO,EAAIY,yBAA2B+X,GAAoBM,WACnDjZ,EAAI0O,YAAc,K,cAGzBrH,EAAW0H,OAAS,CACjBF,KAAM,SAACT,GAAQ,IACJpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADF,EAEe,EAAKsD,MAAMyI,OAA7B0N,EAFG,EAEHA,MAAOvK,EAFJ,EAEIA,QACPD,EAAQ,EAAK3L,MAAM0L,MAAMjD,OAAzBkD,KAEPtO,EAAIyO,UAAYmK,GAChB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAIiP,YACJjP,EAAIkP,IAAI7P,EAAEoJ,QAASpJ,EAAEqJ,QAAS4F,EAAO,EAAG,EAAG,EAAI/L,KAAK4M,IACpDnP,EAAI2K,OAEJ3K,EAAIY,yBAA2B+X,GAAoBM,WACnDjZ,EAAI0O,YAAc,GAEtBI,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EACLiP,EAAQ,EAAK3L,MAAM0L,MAAMjD,OAAzBkD,KAFI,EAIc,EAAK3L,MAAMyI,OAA7B0N,EAJI,EAIJA,MAAOvK,EAJH,EAIGA,QACdvO,EAAIyO,UAAYmK,GAChB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAIiP,YACJjP,EAAIkP,IAAI7P,EAAEoJ,QAASpJ,EAAEqJ,QAAS4F,EAAO,EAAG,EAAG,EAAI/L,KAAK4M,IACpDnP,EAAI2K,OAEJ3K,EAAIY,yBAA2B+X,GAAoBM,WACnDjZ,EAAI0O,YAAc,K,kBAI7B7N,EAAU+G,M,mBACNoE,GAAUyD,QAAU,CACjBX,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EACLiP,EAAQ,EAAK3L,MAAM+G,KAAK0B,OAAxBkD,KAFI,EAIc,EAAK3L,MAAMyI,OAA7B0N,EAJI,EAIJA,MAAOvK,EAJH,EAIGA,QACdvO,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAC1BhZ,EAAI0P,YAAckJ,GAElB5Y,EAAIiP,YACJjP,EAAI2P,UAAYrB,EAEhBtO,EAAI4P,OAAOvQ,EAAEoJ,QAASpJ,EAAEqJ,UAG5BmG,KAAM,SAACT,GAAQ,IACJpO,EAAUoO,EAAVpO,IAAKX,EAAK+O,EAAL/O,EADF,EAEc,EAAKsD,MAAM+G,KAAK0B,OAF9B,EAEHkD,KAFG,EAEGC,QACbvO,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,UAERgF,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,EACpBrP,EAAEW,IAAI+P,e,cAGb/D,GAAUgE,YAAc,CACrBlB,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IACAsO,GADUF,EAAL/O,EACG,EAAKsD,MAAM+G,KAAK0B,OAAxBkD,MAFI,EAIc,EAAK3L,MAAMyI,OAA7B0N,EAJI,EAIJA,MAAOvK,EAJH,EAIGA,QACdvO,EAAI0P,YAAckJ,GAClB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAI2P,UAAYrB,EAGhBtO,EAAIiP,aAGRJ,KAAM,SAACT,GAAQ,IACJpO,EAAeoO,EAAfpO,IAAKX,EAAU+O,EAAV/O,EAAGwD,EAAOuL,EAAPvL,IADL,EAEc,EAAKF,MAAM+G,KAAK0B,OAF9B,EAEHkD,KAFG,EAEGC,QAER1L,IAEL7C,EAAI4P,OAAO/M,EAAI4F,QAAS5F,EAAI6F,SAE5B1I,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,WAERgF,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,EACpBrP,EAAEW,IAAI+P,e,cAGb/D,GAAUiE,qBAAuB,CAC9BnB,MAAO,SAACV,GAAQ,IACLpO,EAAUoO,EAAVpO,IACAsO,GADUF,EAAL/O,EACG,EAAKsD,MAAM+G,KAAK0B,OAAxBkD,MAFI,EAIc,EAAK3L,MAAMyI,OAA7B0N,EAJI,EAIJA,MAAOvK,EAJH,EAIGA,QACdvO,EAAI0P,YAAckJ,GAClB5Y,EAAI0O,YAAcH,EAClBvO,EAAIY,yBAA2BkY,EACzBH,GAAoBI,gBACpBJ,GAAoBK,eAE1BhZ,EAAI2P,UAAYrB,GAKpBO,KAAM,SAACT,GAAQ,IACJpO,EAAeoO,EAAfpO,IAAKX,EAAU+O,EAAV/O,EAAGwD,EAAOuL,EAAPvL,IADL,EAEc,EAAKF,MAAM+G,KAAK0B,OAF9B,EAEHkD,KAFG,EAEGC,QAER1L,IAEL7C,EAAIiP,YACJjP,EAAI4P,OAAO/M,EAAI4F,QAAS5F,EAAI6F,SAE5B1I,EAAI6P,OAAOxQ,EAAEoJ,QAASpJ,EAAEqJ,SAExB1I,EAAI8K,SACJ9K,EAAI+P,cAERD,QAAS,SAAAzQ,GAELA,EAAEW,IAAIY,yBAA2BqL,GAAwB2C,WACzDvP,EAAEW,IAAI0O,YAAc,K,SAMpCwK,oBAAsB,gBAAEha,EAAF,EAAEA,MAAF,OAClB,EAAKyD,MAAMwW,eAAX,eAA4B,UAAYja,K,EAE5Cka,kBAAoB,SAACnH,GAAD,OAChB,EAAKtP,MAAMwW,eAAX,eAA4B,SAAWlH,EAAKD,Y,wEAEtC,IAAD,EAEqDtO,KAAKf,MAAxD2I,EAFF,EAEEA,KAAMoB,EAFR,EAEQA,cAAeW,EAFvB,EAEuBA,aAAcjC,EAFrC,EAEqCA,OAAQjM,EAF7C,EAE6CA,KAE5C+Q,EAAUC,GAAa7E,GACvBjK,EAAO6O,EAAUA,EAAQxM,KAAKf,OAAS,EACvCyN,EAAiB1M,KAAKsK,SAAS1C,GAC/B0C,EAAWoC,GAAkBA,EAAe/O,GAElD,OACI,gCACI,2BACI,gBAACoX,GAAD,CACIxU,KAAI,mBAAc9E,EAAd,wBACJA,KAAM,UACNqW,MAAOkD,GACPxZ,MAAOkM,EAAOmD,QACdjG,SAAU5E,KAAKwV,sBACnB,2BACI,gBAAC,GAAD,CACI/Z,KAAM,QACN6S,SAAU5G,EAAO0N,MACjBla,QAAS8E,KAAK0V,sBAG1B,gBAAC,GAAD,eACIna,UAAW,aACXgE,OAAQyJ,EACRtJ,KAAMiK,EACNxB,YAAamC,GAAYA,EAASa,KAClCnD,aAAcsC,GAAYA,EAASc,MACnClD,eAAgBoC,GAAYA,EAAS8B,SACjCpM,KAAKf,a,GAnOGa,iBAyO1B2M,IAAY,qBACbtP,EAAU+G,MAAO,SAAAjF,GAAK,OAAI0N,KAAI1N,EAAO,uBADxB,eAEb9B,EAAUoN,OAAQ,SAAAtL,GAAK,OAAI0N,KAAI1N,EAAO,wBAFzB,IAWZ2N,GAAgF,CAClF5D,cAAea,GAAmBF,aAAcI,IAGvC4L,GAAWnO,aAViE,SAAA/H,GAAK,MAAK,CAC/FkL,MAAOlL,EAAMkL,MACb3E,KAAMvG,EAAMuG,KACZ4B,KAAMnI,EAAMmI,KAAK3H,WASjB2M,GAFoBpF,CAGtB2N,I,+NCnRF,IC1DYS,GD0DNC,GAAmB,CAACvI,IAAK,EAAGC,IAAK,IAAKC,KAAM,EAAGC,MAAO,IAAMC,SAAS,GAE9DhC,GAAb,2MAEIjM,MAAQ,CACJqW,SAAU,OAHlB,EAOIC,kBAAoB,SAAA5Z,GAAS,OAAI,EAAK8C,MAAMiO,cAAc,EAAKjO,MAAM5B,GAAIlB,IAP7E,EASI6Z,iBAAmB,SAAA7Z,GAAS,OAAI,EAAK8C,MAAMgX,aAAa,EAAKhX,MAAM5B,GAAIlB,IAT3E,EAWI+Z,sBAAwB,SAAA1a,GAAK,OACzB,EAAKyD,MAAMkO,kBAAkB,EAAKlO,MAAM5B,GAAI7B,IAZpD,EAcI2a,qBAAuB,kBACnB,EAAKlX,MAAMkO,kBAAkB,EAAKlO,MAAM5B,GAAI,KAfpD,EAiBI+Y,aAAe,kBAAM,EAAKnX,MAAMoX,SAAS,EAAKpX,MAAM5B,KAjBxD,EAmBIiZ,WAAa,kBAAM,EAAKrX,MAAMnB,OAAO,EAAKmB,MAAM5B,KAnBpD,EAqBIkZ,WAAa,kBAAM,EAAKtX,MAAMlB,OAAO,EAAKkB,MAAM5B,KArBpD,EAuBImZ,eAAiB,SAAAlb,GAAK,OAAI,EAAK2D,MAAMwX,WAAW,EAAKxX,MAAM5B,GAAI/B,IAvBnE,EAyBIob,gBAAkB,SAAAza,GAAM,OAAI,EAAKgD,MAAM0X,YAAY,EAAK1X,MAAM5B,GAAIpB,IAzBtE,EA4BI2a,uBAAyB,SAAClP,GAAD,OACrB,EAAKzI,MAAM4X,mBAAmB,EAAK5X,MAAM5B,GAAIqK,IA7BrD,EA+BIoP,iBAAmB,WACf,EAAK7X,MAAM8X,aAAa,EAAK9X,MAAM5B,GAAI,EAAKoC,MAAMqW,WAhC1D,EAmCIkB,mBAAqB,SAACzI,GAClB,EAAKtP,MAAMgY,eAAe,EAAKhY,MAAM5B,G,2VAArC,IACO,EAAK4B,MAAMiY,OADlB,eAEK3I,EAAK9S,MAAQ8S,EAAKD,aAtC/B,wEA0Cc,IAAD,SACqHtO,KAAKf,MAAxH6M,EADF,EACEA,YAAaqL,EADf,EACeA,UAAWpK,EAD1B,EAC0BA,WAAYqK,EADtC,EACsCA,UAAWC,EADjD,EACiDA,WAAYpb,EAD7D,EAC6DA,OAAQX,EADrE,EACqEA,MAAO+B,EAD5E,EAC4EA,GAAI6Z,EADhF,EACgFA,OAAQlZ,EADxF,EACwFA,QAAgBsZ,GADxG,EACiGC,MADjG,EACwGD,WAG7G,OADAzQ,QAAQC,IAAI,kBAAmBzJ,EAAIyO,GAE/B,uBAAKvQ,UAAU,WACX,uBAAKA,UAAW,SACZ,gBAAC6R,GAAD,CACI3R,KAAM4B,EACN/B,MAAOA,EACPW,OAAQA,EAER8Q,WAAYA,EAEZC,eAAgBsK,EAAU9b,MAC1ByR,gBAAiBqK,EAAU5P,OAE3BwF,cAAelN,KAAK+V,kBACpB5I,kBAAmBnN,KAAKkW,wBAC3BgB,EAAO/P,MACR,gBAACwO,GAAD,CACIjO,OAAQ2P,EACR7b,MAAO4b,EACP3b,KAAM4B,EACN/B,MAAOA,EACPW,OAAQA,EACRwZ,eAAgBzV,KAAK4W,uBACrBhS,SAAU5E,KAAKgW,oBAGvB,uBAAKza,UAAU,oBACX,gBAAC,EAAD,CAAQL,QAAS8E,KAAKoW,cAAtB,OADJ,IACsD/Y,EAEjD8Z,EACD,gBAAC,GAAD,CACI3b,MAAOwE,KAAKP,MAAMqW,SAClBlR,SAAU,SAAAkR,GAAQ,OAAI,EAAKzW,SAAS,CAACyW,gBACzC,gBAAC,EAAD,CACI5a,QAAS8E,KAAK8W,mBAGlB,gBAAC,GAAD,eACIlS,SAAU5E,KAAKwW,eACfhb,MAAOF,GACHua,KACR,gBAAC,GAAD,eACIjR,SAAU5E,KAAK0W,gBACflb,MAAOS,GACH4Z,KAEPqB,EAAOlZ,SACR,gBAAC,EAAD,CACIA,QAASA,EAAQxC,MACjBsC,OAAQkC,KAAKsW,WACbvY,OAAQiC,KAAKuW,aAEhBe,EAAU9b,OAAS8b,EAAU9b,MAAM0C,QACpC,gBAAC,EAAD,CACIhD,QAAS8E,KAAKmW,sBADlB,SAIA,2BACI,gBAAC,GAAD,CACI1a,KAAM,OACN6S,SAAU4I,EAAO/P,KACjBjM,QAAS8E,KAAKgX,oBAHlB,eAxGxB,GAA6BlX,iBEAvB0X,G,2MAEFC,eAAiB,kBAAM,EAAKxY,MAAMyY,WAAW,CAAC1Z,SAAS,EAAMsZ,WAAW,K,wEAE9D,IAAD,EAC+ItX,KAAKf,MAAlJ0Y,EADF,EACEA,WAAYC,EADd,EACcA,cAAela,EAD7B,EAC6BA,SAAUN,EADvC,EACuCA,YAAaya,EADpD,EACoDA,WAAYC,EADhE,EACgEA,cAAeC,EAD/E,EAC+EA,gBAAiBC,EADhG,EACgGA,KAAMC,EADtG,EACsGA,KAAMC,EAD5G,EAC4GA,SAAUC,EADtH,EACsHA,UAAUC,EADhI,EACgIA,WACrI,OACI,gCACK1a,EAASuF,KAAI,YAAqF,IAAnF5F,EAAkF,EAAlFA,GAAI4C,EAA8E,EAA9EA,QAASkH,EAAqE,EAArEA,KAAM+P,EAA+D,EAA/DA,OAAQlZ,EAAuD,EAAvDA,QAASuZ,EAA8C,EAA9CA,MAAOD,EAAuC,EAAvCA,UAAWH,EAA4B,EAA5BA,UAAWrL,EAAiB,EAAjBA,YAC7E,OACI,gBAAC,GAAD,CACItJ,IAAKnF,EACLA,GAAIA,EACJ6Z,OAAQA,EAERC,UAAWA,EAEXnZ,QAASA,EACTuZ,MAAOA,EACPD,UAAWA,EACXvK,WAAY9M,EAAUA,EAAQ9D,UAAY,KAC1Cib,UAAWjQ,EAAOA,EAAK3L,MAAMW,UAAY,KACzC2P,YAAaA,EACbuL,WAAYlQ,EAAOA,EAAKO,OAAS,KACjCpM,MAAO2E,EAAUA,EAAQ3E,MAAQ,KACjCW,OAAQgE,EAAUA,EAAQhE,OAAS,KAEnC6B,OAAQka,EACRja,OAAQka,EACR/K,cAAe9P,EACf6Y,aAAc4B,EACdhB,mBAAoBiB,EACpB3K,kBAAmB4K,EACnB1B,SAAUuB,EACVnB,WAAYyB,EACZvB,YAAawB,EACbpB,aAAcY,EACdV,eAAgBmB,OAG5B,gBAAC,EAAD,CAAQld,QAAS8E,KAAKyX,gBAAtB,Y,GAxCgB3X,iBAkD1B8M,GAAgF,CAClFkL,chCvDyB,SAACza,EAAYqK,GAAb,MACxB,CAAC/J,KAAMlB,EAAe4b,gBAAiBhb,KAAIqK,WgCsD7BiQ,WhCnCO,SAACta,EAAYyY,GAAb,OACtB,SAAAvY,GACI,IAAME,EiC5EK6a,EAAG,wBAAyB,CACvC/X,KAAM,QACNgY,MAAO,CAAC9c,KjC0EoBqa,KAQ5B,OANArY,EAAO+a,GAAG,SAAS,SAAAC,IDtCM,SAACC,GAC9B,OAAO,IAAIC,SAAQ,SAAAC,GACf,IAAMC,EAAQ,IAAIC,MAClBD,EAAMH,IAAMA,EACZG,EAAME,OAAS,WAEX,IAAMjd,EAASM,SAASC,cAAc,UAChCC,EAAMR,EAAOC,WAAW,MAE9B,IAAKO,EACD,OAAO,KAGXR,EAAOR,MAAQud,EAAMvd,MACrBQ,EAAOG,OAAS4c,EAAM5c,OACtBK,EAAIO,UAAUgc,EAAO,EAAG,GAExBD,EAAQtc,EAAIN,aAAa,EAAG,EAAGF,EAAOR,MAAOQ,EAAOG,cCsBpD+c,CAAkBP,GAAQQ,MAAK,SAAA9c,GAC3BoB,EAASH,EAAYC,EAAIlB,GAAW,UAIrCoB,EAAS,CAACI,KAAMlB,EAAeyc,YAAa7b,KAAIyY,WAAUrY,agCyB1Cia,WhC1EL,SAACR,GAAD,MACrB,CAACvZ,KAAMnB,EAAgB2c,YAAajC,WgCyEEU,chCvEd,SAACva,GAAD,MACxB,CAACM,KAAMnB,EAAgB4c,eAAgB/b,OgCsEcD,cAAa2a,gBhCpDxC,SAAC1a,EAAY7B,GAAb,MAC1B,CAACmC,KAAMlB,EAAe4c,iBAAkB7d,QAAO6B,OgCmDoC4a,KhC5CpE,SAAC5a,GAAD,MACf,CAACM,KAAMlB,EAAe6c,KAAMjc,OgC2C6D2a,KhC9C1E,SAAC3a,GAAD,MACf,CAACM,KAAMlB,EAAe8c,KAAMlc,OgC6CmE6a,ShCzC5E,SAAC7a,EAAY/B,GAAb,MACnB,CAACqC,KAAMlB,EAAe+c,UAAWnc,KAAI/B,UgCwCoE6c,UhCvCrF,SAAC9a,EAAYpB,GAAb,MACpB,CAAC0B,KAAMlB,EAAegd,WAAYpc,KAAIpB,WgCsC8Emc,WhCjD/F,SAAC/a,EAAY6Z,GAAb,MACrB,CAACvZ,KAAMlB,EAAeid,YAAarc,KAAI6Z,WgCgDyFW,WhC1D3G,SAACxa,EAAYlB,GAAb,MACrB,CAACwB,KAAMlB,EAAekd,YAAaxd,YAAWkB,QgC4DtCuc,GAAWpS,aARmD,SAAA/H,GAAK,MAAK,CACjF/B,SAAUqF,OAAOrC,OAAOjB,EAAM/B,aAS9BkP,GAFoBpF,CAGtBgQ,K,SDrHU5B,K,iCAAAA,Q,KAIL,IGJKiE,I,SAAAA,K,+BAAAA,Q,KAIL,I,SCAMC,GAAyBC,aAClC,CAJqB,SAAAta,GAAK,OAAIA,EAAM/B,YAKpC,SAAAA,GAAQ,OAAI+E,EAAoB/E,GAAU,SAAClC,EAAOgH,GAAR,OAAiBA,Q,6jBC0B/D,IChCYwX,GDgCNC,GAAY,CAAC,EAAG,KAChBC,GAAanJ,GAAOC,eAAe,IAEnCgE,GAAe,CAAC,EAAG,GACnBmF,GAAgBpJ,GAAOC,eAAe,KAEtCoJ,G,2MAEFC,iBAAmB,YAAc,IAAZ7e,EAAW,EAAXA,MACjBqL,QAAQC,IAAItL,GACZ,EAAKyD,MAAMqb,eAAX,MACO,EAAKrb,MAAMsb,YADlB,CAEI3P,KAAMpP,M,EAIdgf,oBAAsB,YAAc,IAAZhf,EAAW,EAAXA,MACpB,EAAKyD,MAAMqb,eAAX,MACO,EAAKrb,MAAMsb,YADlB,CAEI3O,SAAUpQ,M,EAIlBif,sBAAwB,YAAc,IAAZjf,EAAW,EAAXA,MACtB,EAAKyD,MAAMqb,eAAX,MACO,EAAKrb,MAAMsb,YADlB,CAEIzP,mBAAoBtP,M,EAI5Bga,oBAAsB,YAAc,IAAZha,EAAW,EAAXA,MACpB,EAAKyD,MAAMqb,eAAX,MACO,EAAKrb,MAAMsb,YADlB,CAEI1P,QAASrP,M,EAIjBkf,iBAAmB,YAAc,IAAZlf,EAAW,EAAXA,MACjB,EAAKyD,MAAMqb,eAAX,MACO,EAAKrb,MAAMsb,YADlB,CAEI5c,KAAMnC,M,wEAIJ,IAAD,EAGqFwE,KAAKf,MAA1E0b,GAHhB,EAGEC,aAHF,EAGgBD,iBAAiBJ,EAHjC,EAGiCA,YAA6BM,GAH9D,EAG8CP,eAH9C,EAG8DO,qBAEnE,OACI,gCACI,gBAAC,GAAD,CACIrf,MAAO+e,EAAY5c,KACnBmF,MAAO6X,EAAe,KAAS1b,MAAM6D,MACrC8B,SAAU5E,KAAK0a,mBACnB,2BAGA,gBAAC3F,GAAD,CACIxU,KAAM,oBACN/E,MAAO+e,EAAY3P,KACnBnP,KAAM,OACNmJ,SAAU5E,KAAKqa,iBACfvI,MAAOmI,GACP/H,OAAQgI,KAEZ,gBAACnF,GAAD,CACIxU,KAAM,uBACN/E,MAAO+e,EAAY1P,QACnBpP,KAAM,UACNmJ,SAAU5E,KAAKwV,oBACf1D,MAAOkD,GACP9C,OAAQiI,KACZ,gBAAC,GAAD,CACI3e,MAAO+e,EAAYzP,mBACnBhI,MAAO6X,EAAe,mBAAuB1b,MAAM6D,MACnD8B,SAAU5E,KAAKya,wBAEnB,2BAECF,EAAY5c,OAASgG,EAAW+H,SACjC,gBAAC,GAAD,CACIlQ,MAAO+e,EAAY3O,QACnBhH,SAAU5E,KAAKwa,oBACf1X,MAAO+X,S,GA9EE/a,iBAoFvBgb,GAA0Bf,aAC5B,CAAC,SAACta,GAAD,OAAqBA,EAAMkL,MAAMiQ,gBAClC,SAACA,GAAD,OAAkBA,EAAalZ,QAAO,SAACC,EAAKoZ,GAExC,OADApZ,EAAIoZ,EAAYtf,MAAQsf,EACjBpZ,IACR,OASDiL,GAA0E,CAC5E0N,eFrI0B,SAAC5S,GAAD,MACzB,CAAC/J,KAAMkc,GAAamB,WAAYtT,YEuIxB6C,GAAQ/C,aAX8D,SAAA/H,GAAK,MAAK,CACzFmb,aAAcnb,EAAMkL,MAAMiQ,aAC1BD,gBAAiBG,GAAwBrb,GACzC8a,YAAa9a,EAAMkL,MAAMjD,OACzBmT,oBAAqBf,GAAuBra,MAS5CmN,GAFiBpF,CAGnB4S,K,SC/IUJ,K,8BAAAA,Q,oOCkCZ,IClCYiB,GDkCNhB,GAAY,CAAC,EAAG,KAChBC,GAAanJ,GAAOC,eAAe,IAEnCgE,GAAe,CAAC,EAAG,GACnBmF,GAAgBpJ,GAAOC,eAAe,KAEtCkK,G,2MAEFC,kBAAoB,SAAC5M,GAAU,IACpB/S,EAAe+S,EAAf/S,MAAOC,EAAQ8S,EAAR9S,KADY,EAEW,EAAKwD,OAC1Cmc,EAH0B,EAEnBA,e,2VACO,IAHY,EAEJb,YACT,eAER9e,EAAOD,M,wEAIN,IAAD,EACqEwE,KAAKf,MAAxE0b,EADF,EACEA,gBAA+BJ,GADjC,EACmBK,aADnB,EACiCL,aAAaM,EAD9C,EAC8CA,oBACnD,OACI,gCACI,gBAAC,GAAD,CACI5H,GAAI,EACJzX,MAAO+e,EAAY5c,KACnBlC,KAAM,OACNqH,MAAO6X,EAAe,KAAS1b,MAAM6D,MACrC8B,SAAU5E,KAAKmb,oBACnB,2BAEA,gBAACpG,GAAD,CACIxU,KAAM,mBACN/E,MAAO+e,EAAY3P,KACnBnP,KAAM,OACNmJ,SAAU5E,KAAKmb,kBACfrJ,MAAOmI,GACP/H,OAAQgI,KAEZ,gBAACnF,GAAD,CACIxU,KAAM,sBACN/E,MAAO+e,EAAY1P,QACnBpP,KAAM,UACNmJ,SAAU5E,KAAKmb,kBACfrJ,MAAOkD,GACP9C,OAAQiI,KACZ,gBAAC,GAAD,CACI1e,KAAM,qBACND,MAAO+e,EAAYzP,mBACnBhI,MAAO6X,EAAe,mBAAuB1b,MAAM6D,MACnD8B,SAAU5E,KAAKmb,oBAEnB,2BAECZ,EAAY5c,OAAS2K,GAAU+S,SAChC,gBAAC,GAAD,CACI5f,KAAM,UACND,MAAO+e,EAAY3O,QACnBhH,SAAU5E,KAAKmb,kBACfrY,MAAO+X,S,GAnDC/a,iBAyDtBgb,GAA0Bf,aAC5B,CAAC,SAACta,GAAD,OAAqBA,EAAMuG,KAAK4U,gBACjC,SAACA,GAAD,OAAkBA,EAAalZ,QAAO,SAACC,EAAKoZ,GAExC,OADApZ,EAAIoZ,EAAYtf,MAAQsf,EACjBpZ,IACR,OASDiL,GAAwE,CAC1EwO,cD5GyB,SAAC1T,GAAD,MACxB,CAAC/J,KAAMqc,GAAYgB,WAAYtT,YC8GvBxD,GAAOsD,aAX6D,SAAA/H,GAAK,MAAK,CACvFmb,aAAcnb,EAAMuG,KAAK4U,aACzBD,gBAAiBG,GAAwBrb,GACzC8a,YAAa9a,EAAMuG,KAAK0B,OACxBmT,oBAAqBf,GAAuBra,MAS5CmN,GAFgBpF,CAGlB0T,K,SCtHUD,K,gCAAAA,Q,oOC6BZ,I,GC7BYK,GD8BNnB,GAAgBpJ,GAAOC,eAAe,KAEtCuK,G,2MAEFJ,kBAAoB,SAAC5M,GAAU,IACpB/S,EAAe+S,EAAf/S,MAAOC,EAAQ8S,EAAR9S,KADY,EAEiB,EAAKwD,OAChDuc,EAH0B,EAEnBA,qB,2VACa,IAHM,EAEEjB,YACT,eAEd9e,EAAOD,M,wEAIN,IAAD,SACqEwE,KAAKf,MAAxEsb,EADF,EACEA,YAAaI,EADf,EACeA,gBACb/T,GAFF,EACgCgU,aADhC,EAC8CY,oBACTb,EAAnC/T,MAAMV,EAA6ByU,EAA7BzU,UAAcuV,EAFtB,aAEqCd,EAFrC,sBAGL,OACI,gCACI,gBAAC,GAAD,CACIlf,KAAK,OACLD,MAAO+e,EAAY3T,KACnB9D,MAAO8D,EAAK3H,MAAM6D,MAClB8B,SAAU5E,KAAKmb,oBAClBZ,EAAY3T,OAAStD,EAAea,QACrC,gBAAC,GAAD,CACI1I,KAAK,YACLD,MAAO+e,EAAYrU,UACnBpD,MAAOoD,EAAUjH,MAAM6D,MACvB8B,SAAU5E,KAAKmb,oBAElBpY,OAAOrC,OAAO+a,GAAaxY,KAAI,gBAAExH,EAAF,EAAEA,KAAMwD,EAAR,EAAQA,MAAR,OAC5B,gBAAC8V,GAAD,CACIvZ,MAAO+e,EAAY9e,GACnBA,KAAMA,EACN8E,KAAI,4BAAuB9E,GAC3BqW,MAAO7S,EAAM6S,MACblN,SAAU,EAAKuW,kBACfjJ,OAAQiI,a,GAnCEra,iBA4C5Bgb,GAA0Bf,aAC5B,CAAC,SAACta,GAAD,OAAqBA,EAAMgI,WAAWmT,gBACvC,SAACA,GAAD,OAAkBA,EAAalZ,QAAO,SAACC,EAAKoZ,GAExC,OADApZ,EAAIoZ,EAAYtf,MAAQsf,EACjBpZ,IACR,OAQDiL,GAAoF,CACtF4O,oBDtF+B,SAAC9T,GAAD,MAC9B,CAAC/J,KAAMsd,GAAkBD,WAAYtT,YCwF7BgU,GAAalU,aAVmE,SAAA/H,GAAK,MAAK,CACnGmb,aAAcnb,EAAMgI,WAAWmT,aAC/BL,YAAa9a,EAAMgI,WAAWC,OAC9BiT,gBAAiBG,GAAwBrb,MASzCmN,GAFsBpF,CAGxB+T,I,oBChGUD,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,8BAAAA,Q,KASL,I,GCHKK,GDGCC,GAAoBC,cAAa,qBACzCP,GAAkBQ,IAAK,kBAAM,KADY,eAEzCR,GAAkBS,KAAM,kBAAM,KAFW,eAGzCT,GAAkBU,KAAM,SAACC,EAAGvH,GAAJ,OAAUA,EAAElZ,SAHK,eAIzC8f,GAAkBY,SAAU,SAACD,GAAD,OAAQA,KAJK,KAK3C,GEJUE,IAAW,qBACnBhf,EAAUoN,MAAQ,CAAC6R,UAAW7R,GAAO5M,KAAMR,EAAUoN,QADlC,eAEnBpN,EAAU+G,KAAO,CAACkY,UAAWlY,GAAMvG,KAAMR,EAAU+G,OAFhC,eAGnB/G,EAAUoB,OAAS,CAAC6d,UAAWV,GAAY/d,KAAMR,EAAUoB,SAHxC,IA+ClBqO,GAA0E,CAC5EyP,eZtD0B,SAACzU,GAAD,MACzB,CAACjK,KAAMiY,GAAY0G,YAAa1U,SYqDjB2U,kBFpCa,iBAAO,CACpC5e,KAAM2d,GAAkBY,WEsCfM,GAAQhV,aAR8D,SAAA/H,GAAK,MAAK,CACzFkI,YAAalI,EAAMmI,KAAK3H,WASxB2M,GAFiBpF,EA5BwB,SAAC,GAAsD,IAArDG,EAAoD,EAApDA,YAAa0U,EAAuC,EAAvCA,eAAgBE,EAAuB,EAAvBA,kBAElEE,EAAeN,GAAYxU,GAAayU,UAC9C,OACI,uBAAK7gB,UAAU,SACX,gBAAC,EAAD,CAAQL,QAASqhB,GAAjB,QACA,2BACKxZ,OAAOC,KAAKmZ,IAAalZ,KAAI,SAAAyZ,GAAQ,OAClC,gBAAC,GAAD,CACIla,IAAKka,EACLpO,SAAUoO,IAAa/U,EACvBzM,QAAS,kBAAMmhB,EAAeF,GAAYO,GAAU/e,QACnD+e,OAGb,gBAACD,EAAD,W,SD1CAd,K,4BAAAA,E,+BAAAA,Q,KAKL,IEXKgB,GCyBNC,G,2MAMFC,kBAAoB,SAAAC,GAChBjW,QAAQC,IAAIgW,I,mFAJZ9c,KAAKf,MAAM8d,iB,+BAOL,IAAD,OACEC,EAAShd,KAAKf,MAAd+d,MACP,OACI,gCACKA,EAAM/Z,KAAI,SAAA6Z,GAAI,OACX,gBAAC,EAAD,CAAQ5hB,QAAS,EAAK2hB,kBAAmBrhB,MAAOshB,GAAOA,EAAKrhB,c,GAfnDqE,iBA0BvB8M,GAA0E,CAC5EmQ,aHpCwB,kBACxB,SAAAxf,GAOI,OItBW+a,EAAG,wBAAyB,CACvC/X,KAAM,WJkBCiY,GAAG,eAAe,SAACwE,GACtBzf,EAXe,SAACyf,GAAD,MAAuC,CAC9Drf,KAAMge,GAAasB,aACnBD,SASiBE,CAAYna,OAAOrC,OAAOsc,QAEhCzf,EAAS,CAACI,KAAMge,GAAawB,mBG+B/BC,GAAQ5V,aAR8D,SAAA/H,GAAK,MAAK,CACzFud,MAAOvd,EAAMud,MAAMA,SASnBpQ,GAFiBpF,CAGnBoV,K,SD1DUD,K,8BAAAA,E,gDAAAA,Q,KAKL,I,GGKKU,G,yOAAAA,K,kBAAAA,E,gBAAAA,E,iBAAAA,Q,KAML,IAAMC,IAAe,qBACvBD,GAAWE,QAAUlP,IADE,eAEvBgP,GAAW9e,OAASsU,IAFG,eAGvBwK,GAAWG,OAASpM,IAHG,IAkBfqM,GAAb,2MAEInK,aAAe,SAAC/E,GAAqB,IAAD,EACA,EAAKtP,MAA9BzD,EADyB,EACzBA,MAAOoJ,EADkB,EAClBA,SAAUnJ,EADQ,EACRA,KAExBoL,QAAQC,IAAIyH,GACZ3J,GAAYA,E,2VAAS,IAAIpJ,EAAL,eAAa+S,EAAK9S,KAAO8S,EAAK/S,QAAQC,IANlE,wEASc,IAAD,SACiBuE,KAAKf,MAApBsP,EADF,EACEA,KAAM/S,EADR,EACQA,MACb,OACI,uBAAKD,UAAW,UACXgT,EAAKtL,KAAI,SAAA8X,GAAgB,IACfpd,EAAqBod,EAArBpd,KAAMlC,EAAesf,EAAftf,KAAMwD,EAAS8b,EAAT9b,MACbye,EAAYJ,GAAgB3f,IAAS0Q,GAC3C,OACI,gBAACqP,EAAD,iBACQze,EADR,CAEIzD,MAAOA,EAAMC,GACbA,KAAMA,EACNmJ,SAAU,EAAK0O,aACf9Q,IAAK/G,aAtBjC,GAA4BqE,iB,sOCjBrB,ICfK6d,GDeCC,GAAb,2MAEIC,cAAgB,YAAc,IAAZriB,EAAW,EAAXA,MACd,EAAKyD,MAAM2F,S,2VAAX,IAAwB,EAAK3F,MAAMyI,OAAnC,CAA2CgN,EAAGlZ,IAAQ,EAAKyD,MAAMxD,OAHzE,wEAMc,IAAD,EAC0CuE,KAAKf,MAA7CyI,EADF,EACEA,OAAQkT,EADV,EACUA,aAAchW,EADxB,EACwBA,SAAUnJ,EADlC,EACkCA,KACvC,OACI,uBAAKF,UAAW,uBACZ,gBAACwZ,GAAD,CACIxU,KAAI,0BAAqB9E,EAArB,aACJD,MAAOkM,EAAOgN,EACd5C,MAAO,CAAC,EAAG,GACXlN,SAAU5E,KAAK6d,gBAEnB,gBAAC,GAAD,CACIpiB,KAAMA,EACN8S,KAAMqM,EACNpf,MAAOkM,EACP9C,SAAUA,SApB9B,GAA2B9E,kB,SCff6d,K,WAAAA,Q,KCmCZ,IAAMG,GAAiB,eAClBH,GAAQI,IAAMH,IAGbI,G5CC2B,SAC7Btb,GAD6B,IAE7BlH,EAF6B,uDAEa,SAAAA,GAAK,OAAIA,GACnDmH,EAH6B,uDAGe,SAAAnH,GAAK,OAAIA,GAHxB,OAK7BuH,OAAOC,KAAKN,GAAQO,KAAI,SAAAT,GAAG,MAAK,CAC5BhH,MAAOA,EAAMkH,EAAOF,GAAMA,GAC1BG,KAAMA,EAAKD,EAAOF,GAAMA,O4CRbyb,CAAkBxV,IAErC5B,QAAQC,IAAIkX,I,IAENE,G,2MAEF5K,aAAe,SAAC9X,EAAOC,GACnB,EAAKwD,MAAMkf,eAAe1iB,EAAMD,I,EAGpC4iB,aAAe,WACX,EAAKnf,MAAMof,MAAMV,GAAQI,M,EAG7BO,iBAAmB,YAAc,IAAZ9iB,EAAW,EAAXA,MACjB,EAAKyD,MAAMsf,gBAAgB/iB,I,wEAGrB,IAAD,SACuBwE,KAAKf,MAA1Buf,EADF,EACEA,IAAKC,EADP,EACOA,aACZ,OACI,2BACK1b,OAAOrC,OAAO8d,GAAKvb,KAAI,SAAAyb,GAAO,IACpB/gB,EAAkC+gB,EAAlC/gB,KAAMN,EAA4BqhB,EAA5BrhB,GAAIqK,EAAwBgX,EAAxBhX,OAAQkT,EAAgB8D,EAAhB9D,aACnB8C,EAAYI,GAAkBngB,GACpC,OACI,gBAAC+f,EAAD,CACIlb,IAAKnF,EACL5B,KAAM4B,EACNqK,OAAQA,EACRkT,aAAcA,EACdhW,SAAU,EAAK0O,kBAE3B,gBAAC,EAAD,CAAQpY,QAAS8E,KAAKoe,cAAtB,OACA,gBAAC,GAAD,CACItb,MAAOkb,GACPxiB,MAAOijB,EACP7Z,SAAU5E,KAAKse,wB,GAjCJxe,iBA4CzB8M,GAA8E,CAChFuR,eNlF0B,SAAC9gB,EAAYqK,GAAb,MACzB,CAAC/J,KAAMgf,GAAuBgC,cAAejX,SAAQrK,OMiFtCghB,MNrFC,SAACO,GAAD,MAChB,CAACjhB,KAAMgf,GAAuBkC,OAAQD,WMoFhB5V,iBAAeW,gBAAc4U,gBpCjCzB,SAAC3X,GAAD,OAAwB,SAACrJ,EAAUC,GAE9D,IACMshB,EADkBthB,IACD8L,SAAS1C,KAEhC,GAAIkY,IAAalY,EAgBjB,OAdIA,IAAS6B,GAAaqB,OAClBgV,IAAarW,GAAasW,KAC1BxhB,EAASsL,MACTtL,EAASoM,OAEN/C,IAAS6B,GAAasW,GAC7BxhB,EAASyL,MACFpC,IAAS6B,GAAauW,KACzBF,IAAarW,GAAasW,KAC1BxhB,EAASsL,MACTtL,EAASoM,OAIVpM,EAAS,CAACI,KAAM+K,GAAgBuW,SAAUrY,YoCexCsY,GAAU1X,aATmD,SAAA/H,GAAK,MAAK,CAChF+e,IAAK/e,EAAMkU,gBACX8K,aAAchf,EAAM6J,SAAS1C,QAS7BgG,GAFmBpF,CAGrB0W,I,qBCxDWiB,GAAS3X,aAA2D,SAAA/H,GAAK,MAAK,CACvF2f,KAAM3f,EAAM4f,cACZ,CACAC,cVxByB,SAAC9jB,GAAD,MAAqB,CAC9CmC,KAAM2d,GAAkBU,IAAKxgB,WUoBXgM,EApBgC,SAAC,GAA2B,IAA1B4X,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,cAE1D,OACI,gBAAC,KAAD,CAAYC,QAASH,EAAMxa,SAAU0a,GACjC,uBAAK/jB,UAAW,oBACZ,uBAAKA,UAAU,UACX,uBAAKA,UAAU,eACX,gBAACihB,GAAD,OAEJ,uBAAKjhB,UAAU,WACX,gBAACqe,GAAD,MACA,gBAACwD,GAAD,MACA,gBAAC8B,GAAD,aC/BXM,GAAqB,SAAC,GAC/B,OADuC,eAEnC,gBAACL,GAAD,O,kDCHD,SAASM,GAAuBnkB,EAAeW,GAYlD,MAAO,CACHE,UAZWC,SAASC,cAAc,UACnBN,WAAW,MAGR2jB,gBAAgBpkB,EAAOW,GASzCX,QACAW,U,2kBCHD,I,GAmCD0jB,GAAmB,SAAOC,EAAiBC,GAAxB,OACrB,SAACN,EAAmB9f,EAA6BiI,GAC7C,GAAK6X,EAGL,MAAO,CACH/jB,MAAOiE,EAAQA,EAAMjE,MAAQokB,EAC7BlY,OAAQA,EACI,MAALjI,EACIA,EAAMiI,OAGNmY,EAJC,GAEDnY,GAKJjI,EAAQA,EAAMiI,OAASmY,KAI7BC,GAAkBH,GAA8C,CACzE1hB,OAAQ,GACRE,MAAO,IACR,CACCD,OAAQ,IAGC6hB,GAAgBJ,GAA2C,KAAM,IAEjEK,GAAoBL,GAAkD,KAAM,IAE5EM,GAAe,SAAC3kB,EAAOW,GAAR,OAAmB0jB,GAC3CF,GAAuBnkB,EAAOW,GAAS,CACnC4O,QAAS,EACTuK,OAAO,KASF8K,GAAgB,SAA0BC,GAA1B,OACzB,SAAC1gB,EAAsB2gB,GAAvB,aACO3gB,EADP,eAEK2gB,EAAO/iB,GAAK8iB,EAAQ1gB,EAAM2gB,EAAO/iB,IAAK+iB,EAAQ3gB,OAI1C4gB,GAAc,SAACriB,EAAuBiC,GAA+C,IAC/EhC,EAA4CD,EAApDxC,MAAQyC,OAA0BqiB,EAAkBtiB,EAAnC0J,OAASxJ,OAE3BqiB,EAAgC,sBAAOtiB,GAAP,CAAegC,IAMrD,OAHIsgB,EAAWriB,OAASoiB,GACpBC,EAAWC,QAER,MACAxiB,EADP,CAEIxC,MAAO,CACHyC,OAAQsiB,EACRpiB,MATgC,O,6jBCxErC,IAAMsiB,GAAkB5E,cAAa,qBAEvCrf,EAAgB2c,aAAc,SAAC1Z,EAAsB2gB,GAClD,IAAM/iB,EDnBW,SAACoC,GAAD,OACrBsD,OAAOC,KAAKvD,GAAOvB,OACZW,KAAK0O,IAAL,MAAA1O,KAAI,YAAQkE,OAAOC,KAAKvD,GAAOwD,KAAI,SAAAT,GAAG,OAAKA,OAAS,EACrD,ECgBSke,CAAUjhB,GACrB,OAAO,MACAA,EADP,eAEKpC,EDhB4B,SAACA,EAAY6Z,EAAwBxP,GAA0C,IAAD,EAC9CwP,GAAU,GADoC,IAC5G5b,aAD4G,MACpG,IADoG,MAC/FW,cAD+F,MACtF,IADsF,EACjF+B,EADiF,EACjFA,QAASuZ,EADwE,EACxEA,MAAOD,EADiE,EACjEA,UAAWnQ,EADsD,EACtDA,KAC7D,MAAO,CACH9J,KACA6Z,SACApL,YAAa,KACb7L,QAASwf,GAAuBnkB,EAAOW,GACvC+B,QAAS8hB,GAAgB9hB,OAAS2iB,GAAYjZ,GAAU,IAAI1J,SAC5DuZ,MAAOwI,GAAcxI,OAAOoJ,GAAYjZ,GAAU,IAAI6P,OACtDD,UAAW0I,GAAkB1I,OAAWqJ,GAAYjZ,GAAU,IAAI4P,WAClEnQ,KAAM8Y,GAAa3kB,EAAOW,EAApBgkB,CAA4B9Y,OAAMwZ,GAAYjZ,GAAU,IAAIP,OCMxDyZ,CAA0BvjB,EAAI+iB,EAAOlJ,aANX,eASvC1a,EAAgB4c,gBAAiB,SAAC3Z,EAAsB2gB,GAAvB,OD+CT,SAAC3gB,EAAsBpC,GAAvB,OAAsCwjB,gBAAKphB,EAAOpC,GC9CvEua,CAAcnY,EAAO2gB,EAAO/iB,OAVQ,eAavCZ,EAAeid,YAAcwG,IAC1B,SAACtU,EAAuBwU,GAAxB,ODV0B,SAAC3gB,EAAqByX,EAAuBxP,GAA0C,IAAD,EAC1EwP,GAAU,GAA7ClZ,EAD6G,EAC7GA,QAASuZ,EADoG,EACpGA,MAAOD,EAD6F,EAC7FA,UAAWnQ,EADkF,EAClFA,KAElC,OADAO,EAASA,GAAU,GACZ,CACHwP,SACA7Z,GAAIoC,EAAMpC,GACV4C,QAASR,EAAMQ,QACf6L,YAAarM,EAAMqM,YACnB9N,QAAS8hB,GAAgB9hB,EAASyB,EAAMzB,QAAS0J,EAAO1J,SACxDuZ,MAAOwI,GAAcxI,EAAO9X,EAAM8X,MAAO7P,EAAO6P,OAChDD,UAAW0I,GAAkB1I,EAAW7X,EAAM6X,UAAW5P,EAAO4P,WAChEnQ,KAAM8Y,GAAaxgB,EAAMQ,QAAQ3E,MAAOmE,EAAMQ,QAAQhE,OAAhDgkB,CAAwD9Y,EAAM1H,EAAM0H,KAAMO,EAAOP,OCAnF2Z,CAAmBlV,EAASwU,EAAOlJ,YAfH,eAkBvCza,EAAe+c,UAAY0G,IACxB,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEI3L,QAAQ,MACD2L,EAAQ3L,QADR,CAEH3E,MAAO8kB,EAAO9kB,MACda,UAAWO,EAAgBkP,EAAQ3L,QAAQ9D,UAAWikB,EAAO9kB,MAAOsQ,EAAQ3L,QAAQhE,UAExFkL,KAAMyE,EAAQzE,MAAR,MACCyE,EAAQzE,KADT,CAEF3L,MAAM,MACCoQ,EAAQzE,KAAK3L,MADf,CAEDF,MAAO8kB,EAAO9kB,MACda,UAAWO,EAAgBkP,EAAQzE,KAAK3L,MAAMW,UAAWikB,EAAO9kB,MAAOsQ,EAAQzE,KAAK3L,MAAMS,YAGlG+B,QAAS4N,EAAQ5N,SAAWqiB,GAAYzU,EAAQ5N,QAAS,CACrDiC,QAAS2L,EAAQ3L,QACjBmX,UAAWxL,EAAQzE,MAAQyE,EAAQzE,KAAK3L,cApCZ,eAuCvCiB,EAAegd,WAAayG,IACzB,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEI3L,QAAQ,MACD2L,EAAQ3L,QADR,CAEHhE,OAAQmkB,EAAOnkB,OACfE,UAAWO,EAAgBkP,EAAQ3L,QAAQ9D,UAAWyP,EAAQ3L,QAAQ3E,MAAO8kB,EAAOnkB,UAExFkL,KAAMyE,EAAQzE,MAAR,MACCyE,EAAQzE,KADT,CAEF3L,MAAM,MACCoQ,EAAQzE,KAAK3L,MADf,CAEDS,OAAQmkB,EAAOnkB,OACfE,UAAWO,EAAgBkP,EAAQzE,KAAK3L,MAAMW,UAAWyP,EAAQzE,KAAK3L,MAAMF,MAAO8kB,EAAOnkB,YAGlG+B,QAAS4N,EAAQ5N,SAAWqiB,GAAYzU,EAAQ5N,QAAS,CACrDiC,QAAS2L,EAAQ3L,QACjBmX,UAAWxL,EAAQzE,MAAQyE,EAAQzE,KAAK3L,cAzDZ,eA6DvCiB,EAAe4b,gBAAkB6H,IAC9B,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEIzE,KAAMyE,EAAQzE,MAAR,MACCyE,EAAQzE,KADT,CAEFO,OAAO,MACAkE,EAAQzE,KAAKO,OADd,GAEC0Y,EAAO1Y,gBApEc,eAyEvCjL,EAAemB,aAAesiB,IAC3B,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEI3L,QAAQ,MACD2L,EAAQ3L,QADR,CAEH9D,UAAWikB,EAAOjkB,YAEtB2P,YAAa9O,EAAYojB,EAAOjkB,UAAWyP,EAAQzE,MAAQyE,EAAQzE,KAAK3L,MAAMW,WAC9E6B,QAAS4N,EAAQ5N,SAAWqiB,GAAYzU,EAAQ5N,QAAS,CACrDiC,QAAS2L,EAAQ3L,gBAlFW,eAsFvCxD,EAAe4c,iBAAmB6G,IAC/B,SAACtU,EAAuBwU,GACpB,OAAO,MACAxU,EADP,CAEI0L,UAAU,MACH1L,EAAQ0L,UADN,CAEL9b,MAAO4kB,EAAO5kB,cA5FU,eAiGvCiB,EAAekd,YAAcuG,IAC1B,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEIzE,KAAK,MACEyE,EAAQzE,KADX,CAEA3L,MAAM,MACCoQ,EAAQzE,KAAK3L,MADf,CAEDW,UAAWikB,EAAOjkB,cAG1B2P,YAAa9O,EAAY4O,EAAQ3L,QAAQ9D,UAAWikB,EAAOjkB,WAC3D6B,QAAS4N,EAAQ5N,SAAWqiB,GAAYzU,EAAQ5N,QAAS,CACrDoZ,UAAWxL,EAAQzE,KAAK3L,cA7GI,eAiHvCiB,EAAe8c,KAAO2G,IAAiC,SAACtU,GACrD,IAAMmV,EDvBa,SAAC/iB,EAAuBiC,GAAoD,IAAD,EACjEjC,EAA1BxC,MAAQyC,EADmF,EACnFA,OAAQE,EAD2E,EAC3EA,MAEvB,GAAsB,IAAlBF,EAAOC,OAAc,OAAO,KAEhC,IAAM8iB,EAAO/iB,EAAOA,EAAOC,OAAS,GAKpC,MAAO,CACHF,QAAQ,MACDA,EADA,CAEHxC,MAAO,CACHyC,OAPOA,EAAOiD,MAAM,EAAGjD,EAAOC,OAAS,GAQvCC,MAPG,CAAI8B,GAAJ,mBAAgB9B,OAU3B6iB,QCKmBC,CAAYrV,EAAQ5N,QAAS,CAC5CiC,QAAS2L,EAAQ3L,QACjBmX,UAAWxL,EAAQzE,MAAQyE,EAAQzE,KAAK3L,QAE5C,OAAKulB,EAEE,MACAnV,EADP,CAEI5N,QAAS+iB,EAAW/iB,QACpBiC,QAAS8gB,EAAWC,KAAK/gB,SAAW2L,EAAQ3L,QAC5CkH,KAAMyE,EAAQzE,MAAR,MACCyE,EAAQzE,KADT,CAEF3L,MAAOulB,EAAWC,KAAK5J,WAAaxL,EAAQzE,KAAK3L,UARjCoQ,MAtHY,eAmIvCnP,EAAe6c,KAAO4G,IAAiC,SAACtU,GACrD,IAAMsV,EDfa,SAACljB,EAAuBiC,GAAoD,IAAD,EACjEjC,EAA1BxC,MAAQyC,EADmF,EACnFA,OAAQE,EAD2E,EAC3EA,MAEvB,GAAqB,IAAjBA,EAAMD,OAAc,OAAO,KAE/B,IAAMijB,EAAOhjB,EAAM,GAKnB,MAAO,CACHH,QAAQ,MACDA,EADA,CAEHxC,MAAO,CACHyC,OAPI,sBAAOA,GAAP,CAAegC,IAQnB9B,MAPMA,EAAM+C,MAAM,EAAG/C,EAAMD,WAUnCijB,QCHmBC,CAAYxV,EAAQ5N,QAAS,CAC5CiC,QAAS2L,EAAQ3L,QACjBmX,UAAWxL,EAAQzE,MAAQyE,EAAQzE,KAAK3L,QAE5C,OAAK0lB,EAEE,MACAtV,EADP,CAEI5N,QAASkjB,EAAWljB,QACpBiC,QAASihB,EAAWC,KAAKlhB,SAAW2L,EAAQ3L,QAC5CkH,KAAMyE,EAAQzE,MAAR,MACCyE,EAAQzE,KADT,CAEF3L,MAAO0lB,EAAWC,KAAK/J,WAAaxL,EAAQzE,KAAK3L,UARjCoQ,MAxIY,eAqJvCnP,EAAeyc,YAAcgH,IAC1B,SAACtU,EAAuBwU,GAAxB,aACOxU,EADP,CAEIuL,UAAWiJ,EAAOtK,SAClBrY,OAAQ2iB,EAAO3iB,aAzJiB,IA2JzC,I,+NCjLI,IAAM4jB,GAAcxF,aAAa,eACnCjG,GAAY0G,aAAc,SAAC7c,EAAkB2gB,GAAnB,O,2VAAA,IACpB3gB,EADoB,CAEvBQ,QAASmgB,EAAOxY,UAErB,CACC3H,QAAS9C,EAAUoN,QCTjB+W,GAAkBle,EAAmBL,OAAOrC,OAAOiD,IACnD4d,GAAgCne,EAAmBL,OAAOrC,OAAOkD,IACjEqW,GAAY,CAAC,EAAG,KAChBC,GAAanJ,GAAOC,eAAe,IACnCgE,GAAe,CAAC,EAAG,GAEZwM,GAAuB,SAAC9Z,GA4BjC,MA3B8B,CAAC,CAC3BjM,KAAM,OACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAOmI,GACP/H,OAAQgI,KAEb,CACCze,KAAM,UACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAOkD,KAEZ,CACCvZ,KAAM,OACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOwe,KAEZ,CACC7lB,KAAM,qBACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOye,O,+NCxBZ,IAAME,GAAe5F,aAAa,eACpChC,GAAamB,YAAa,SAACvb,EAAmB2gB,GAC3C,IAAM1Y,E,2VAAM,IACLjI,EAAMiI,OADD,GAEL0Y,EAAO1Y,QAGd,MAAO,CACHkT,aAFiB4G,KAGjB9Z,aAGT,CACCA,OAAQ,CACJkD,KAAM,EACNC,QAAS,EACTlN,KAAMgG,EAAW6G,QAErBoQ,aAAc4G,OCtBZF,GAAkBle,EAAmBL,OAAOrC,OAAO4H,KACnDiZ,GAAgCne,EAAmBL,OAAOrC,OAAO6H,KACjE0R,GAAY,CAAC,EAAG,KAChBC,GAAanJ,GAAOC,eAAe,IACnCgE,GAAe,CAAC,EAAG,GAEZ0M,GAAsB,SAACha,GA4BhC,MA3B8B,CAAC,CAC3BjM,KAAM,OACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAOmI,GACP/H,OAAQgI,KAEb,CACCze,KAAM,UACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAOkD,KAEZ,CACCvZ,KAAM,OACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOwe,KAEZ,CACC7lB,KAAM,qBACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOye,O,+NC1BZ,I,GAAMI,GAAc9F,aAAa,eACnC7B,GAAYgB,YAAa,SAACvb,EAAkB2gB,GACzC,IAAM1Y,E,2VAAM,IACLjI,EAAMiI,OADD,GAEL0Y,EAAO1Y,QAGd,MAAO,CACHkT,aAFiB8G,KAGjBha,aAGT,CACCA,OAAQ,CACJkD,KAAM,EACNC,QAAS,EACTlN,KAAM2K,GAAUyD,SAEpB6O,aAAc8G,OCnBLE,GAA4B,SAACla,GACtC,IAAIwP,EAAwB,CAAC,CACzBzb,KAAM,OACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOmB,MAyBf,OArBIyD,GAAUA,EAAOd,OAAStD,EAAea,SACzC+S,EAAO2K,KAAK,CACRpmB,KAAM,YACNkC,KAAM0f,GAAW9e,OACjBU,MAAO,CACH6D,MAAOsB,OAIgD,IAA3DrB,OAAOC,KAAKO,GAAgB8C,QAAQqB,EAAOxB,aAC3CgR,EAAM,sBAAOA,GAAP,CAAe,CACjBzb,KAAM8H,EAAemE,EAAOxB,WAC5BvI,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAO,CAAC,EAAG,GACXnP,KAAM,QAMfuU,G,+NC5BJ,I,GAAM4K,GAAoBjG,aAAa,eACzCZ,GAAkBD,YAAa,SAACvb,EAAwB2gB,GACrD,IAAM1Y,E,2VAAM,IACLjI,EAAMiI,OADD,GAEL0Y,EAAO1Y,QAGd,MAAO,CACHkT,aAFiBgH,GAA0Bla,GAG3CA,aAGT,CACCA,QAAM,IACFd,KAAMtD,EAAezC,KACrBqF,UAAW5D,EAAWyf,aAFpB,eAGDxe,EAAejB,EAAWkB,aAAe,GAHxC,eAIDD,EAAejB,EAAWmB,eAAiB,GAJ1C,eAKDF,EAAejB,EAAWoB,iBAAmB,GAL5C,IAONkX,aAAcgH,OCpBLI,GAAenG,aAAa,eACpCF,GAAasB,cAAe,SAACxd,EAAmB2gB,GAApB,MAAmD,CAC5EpD,MAAOoD,EAAOpD,UAEnB,CACCA,MAAO,KCCLiF,GAAe,eAChBtE,GAAQI,IAAM,CACXrJ,EAAG,GACHwN,EAAG,IACHrW,EAAG,IAILsW,GAAc,eACfxE,GAAQI,IAAM,CAAC,CACZtiB,KAAM,IACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACH6S,MAAO,CAAC,EAAG,KAEhB,CACCrW,KAAM,IACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACHiT,OAAQnB,GAAOC,eAAe,IAC9Bc,MAAO,CAAC,EAAG,OAEhB,CACCrW,KAAM,IACNkC,KAAM0f,GAAWG,OACjBve,MAAO,CACHiT,OAAQnB,GAAOC,eAAe,IAC9Bc,MAAO,CAAC,EAAG,UAgBVsQ,GAAoB,eAC5BzE,GAAQI,KAAM,SAACrW,EAAQoK,GAAT,OAAmB,SAACR,EAAY/H,GAAb,OAAsB+H,EAAa5J,EAAOgN,GAAK5C,EAAM,GAAKA,EAAM,IAAMjT,KAAKwjB,IAAI9Y,EAAO7B,EAAOwa,O,6jBCpD5H,I,GAAMI,GAAyBzG,cAAa,qBAC9Cc,GAAuBkC,QAAS,SAACpf,EAA6B2gB,GAC3D,IAAM/iB,EDJM,SAACM,EAAe8B,GAChC,OAAO9B,EAAK4kB,YAAcxf,OAAOC,KAAKvD,GAAOvB,OACtCW,KAAK0O,IAAL,MAAA1O,KAAI,YACJkE,OACEC,KAAKvD,GACL+F,QAAO,SAAAhD,GAAG,OAAI/C,EAAM+C,GAAK7E,OAASA,KAClCsF,KAAI,SAAAT,GAAG,OARN,SAACA,EAAa7E,GAAd,OAAiC6E,EAAItB,MAAMvD,EAAK4kB,WAAWrkB,QAQjDskB,CAAMhgB,EAAK/C,EAAM+C,GAAK7E,WAAW,EAC/C,GCHS8kB,CAAKrC,EAAOxB,OAAQnf,GAE/B,OADAoH,QAAQC,IAAIzJ,EAAI+iB,EAAOxB,OAAQnf,GACxB,MACAA,EADP,eAEKpC,EDkCuB,SAACA,EAAIM,GAErC,MAAO,CACHN,KACAM,OACA+J,OAAQua,GAAgBtkB,GACxBid,aAAcuH,GAAexkB,ICxCnB+kB,CAAqBrlB,EAAI+iB,EAAOxB,aANC,eAS9CjC,GAAuBgC,eAAgB,SAAClf,EAA6B2gB,GAClE,OAAO,MACA3gB,EADP,eAEK2gB,EAAO/iB,GAFZ,MAGWoC,EAAM2gB,EAAO/iB,IAHxB,CAIQqK,OAAQ0Y,EAAO1Y,cAdoB,IAkBhD,I,klBCdI,I,GAAMib,GAAwB9G,cAAa,qBAC7ClL,GAAsBgE,4BAA6B,SAAClV,EAA4B2gB,GAC7E,OAAK3gB,EAAM2gB,EAAO7f,MAgBV6f,EAAO9N,iBACA,MACA7S,EADP,eAEK2gB,EAAO7f,KAFZ,MAGWd,EAAM2gB,EAAO7f,MAHxB,CAIQA,KAAM6f,EAAO7f,KACb+R,iBAAkB8N,EAAO9N,iBACzBR,MAAOsO,EAAOtO,UAIf+O,KAAKphB,EAAO2gB,EAAO7f,MA1B1B6f,EAAO9N,iBACA,MACA7S,EADP,eAEK2gB,EAAO7f,KAAO,CACXqT,QAAQ,EACRrT,KAAM6f,EAAO7f,KACb+R,iBAAkB8N,EAAO9N,iBACzBR,MAAOsO,EAAOtO,MACdR,WAAY8O,EAAO9O,cAIpB7R,KAf2B,eAiC7CkR,GAAsBmE,iBAAkB,SAACrV,EAA4B2gB,GAClE,OAAO3gB,EAAM2gB,EAAO7f,MAAb,MACAd,EADA,eAEF2gB,EAAO7f,KAFL,MAGId,EAAM2gB,EAAO7f,MAHjB,CAIC+Q,WAAY8O,EAAO9O,eAEvB7R,KAxCsC,eA0C7CkR,GAAsBkE,yBAA0B,SAACpV,EAA4B2gB,GAA7B,aAC1C3gB,EAD0C,eAE5C2gB,EAAO7f,KAFqC,MAGtCd,EAAM2gB,EAAO7f,MAHyB,CAIzCqT,QAAQ,SA9C8B,eAiD7CjD,GAAsBiE,2BAA4B,SAACnV,EAA4B2gB,GAA7B,aAC5C3gB,EAD4C,eAE9C2gB,EAAO7f,KAFuC,MAGxCd,EAAM2gB,EAAO7f,MAH2B,CAI3CqT,QAAQ,SArD8B,IAwD/C,I,6jBC7DI,ICNKgP,GDMCC,GAAkBhH,cAAa,qBACvCnT,GAAgBgB,OAAQ,SAACjK,GAAD,aAClBA,EADkB,CAErBqjB,YAAY,OAHwB,eAKvCpa,GAAgBkB,MAAO,SAACnK,GAAD,aACjBA,EADiB,CAEpBqjB,YAAY,OAPwB,eASvCpa,GAAgBuW,UAAW,SAACxf,EAAsB2gB,GAAvB,aACrB3gB,EADqB,CAExBmH,KAAMwZ,EAAOxZ,UAXuB,IAazC,CACCkc,YAAY,EACZlc,KAAM6B,GAAaqB,U,SCrBX8Y,K,uBAAAA,Q,oOCML,I,GAAMG,GAAelH,aAAa,eACpC+G,GAAapZ,QAAS,SAAC/J,EAAmB2gB,GAEvC,O,2VAAO,IACA3gB,EADP,CAEIjE,MAAO4kB,EAAOnW,WAGvB,CACCzO,MAAO,Y,SCZEwnB,GAAgBnH,cAAa,qBACrCrT,GAAcgB,QAAS,SAAC/J,EAAiB2gB,GACtCvZ,QAAQC,IAAIrH,EAAO2gB,EAAO7W,MADuB,IAG1CoK,EAAmClU,EAAnCkU,gBAAiBU,EAAkB5U,EAAlB4U,eAGxB,OAAOtR,OAAOrC,OAAO2T,GAAgB3S,QAAO,SAACC,EAAD,GAA+D,IAAxDiS,EAAuD,EAAvDA,OAAQrT,EAA+C,EAA/CA,KAAMuR,EAAyC,EAAzCA,MAAOQ,EAAkC,EAAlCA,iBAAkBhB,EAAgB,EAAhBA,WAGtF,GADAzK,QAAQC,IAAIvG,EAAMqT,IACbA,EAAQ,OAAOjS,EAEpB,IAAMshB,EAAqBtP,EAAgBrB,GAIvCH,GAAY+Q,EAFOd,GAAqBa,EAAmBtlB,OAEhCslB,EAAmBvb,OAAQoK,EAA1CoR,CAAiD5R,EAAY8O,EAAO7W,MAGpF,OAFA4I,EAAYtT,KAAKyO,IAAIzO,KAAK0O,IAAI4E,EAAWL,EAAM,IAAKA,EAAM,IAEnDnQ,EAAIwhB,IAAI5iB,EAAM4R,KACtBiR,KAAe3jB,IAAQjE,WApBQ,eAsBrCgN,GAAcI,gBAAiB,SAACnJ,EAAiB2gB,GAAsC,IAC7E7f,EAAQ6f,EAAR7f,KACA8T,EAAkB5U,EAAlB4U,eAEP,OAAOA,EAAe9T,GAChB6iB,KAAe3jB,GAAO0jB,IAAI5iB,EAAM8T,EAAe9T,GAAM+Q,YAAY9V,QACjEiE,KA5B4B,eA8BrC+I,GAAcM,oBAAqB,SAACrJ,GAAqB,IAC/C4U,EAAkB5U,EAAlB4U,eAEP,OAAOtR,OAAOrC,OAAO2T,GAAgB3S,QAAO,SAACC,EAAD,GAA8D,EAAvDiS,OAAwD,IAAhDrT,EAA+C,EAA/CA,KAA+B+Q,GAAgB,EAAzCQ,MAAyC,EAAlCQ,iBAAkC,EAAhBhB,YACtF,OAAO3P,EAAIwhB,IAAI5iB,EAAM+Q,KACtB8R,KAAe3jB,IAAQjE,WAnCQ,IAqCvC,ICLG6nB,GAAcC,aAChBC,aAA0B,CACtBlE,WAAYzD,GAEZle,SAAU+iB,GAEVxW,MAAO8Y,GAEPnb,KAAMyZ,GACN1W,MAAO8W,GACPzb,KAAM2b,GAENla,WAAYqa,GAEZ9E,MAAOgF,GAEPrO,gBAAiB2O,GACjBjO,eAAgBsO,GAChBrZ,SAAUuZ,KAEdG,IAGSzL,GAAQiM,aAAYH,GAAaI,aAAgBC,KAAOC,OCjDtDC,GANO,kBAClB,kBAAC,IAAD,CAAUrM,MAAOA,IACb,kBAAC,GAAD,QCIYgG,QACW,cAA7BpO,OAAO0U,SAASC,UAEe,UAA7B3U,OAAO0U,SAASC,UAEhB3U,OAAO0U,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OAAO,kBAAC,GAAD,MAAS7nB,SAAS8nB,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpL,MAAK,SAAAqL,GACjCA,EAAaC,kB","file":"static/js/main.140844a7.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/button.scss\";\nimport {EventData} from \"../../utils/types\";\n\nexport interface ButtonEventData extends EventData {\n}\n\nexport interface ButtonProps {\n    onClick?(data?: ButtonEventData)\n\n    onMouseDown?(data?: ButtonEventData)\n\n    onMouseUp?(data?: ButtonEventData)\n\n    value?: any\n    name?: string\n\n    className?: string\n    children?: React.ReactNode,\n    disabled?: boolean\n    width?: number\n}\n\nexport const Button: React.FC<ButtonProps> = ({children, onClick, onMouseDown, onMouseUp, disabled, width, className, value, name}) => {\n    return (\n        <button\n            className={classNames(\"button\", className)}\n            onClick={e => onClick && onClick({e, value, name})}\n            onMouseUp={e => onMouseUp && onMouseUp({e, value, name})}\n            onMouseDown={e => onMouseDown && onMouseDown({e, value, name})}\n            style={{width}}\n            disabled={disabled}>\n            {children}\n        </button>\n    )\n};","export const canvasToImageData = (canvas: HTMLCanvasElement): ImageData =>\n    canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas;\n}\n\nexport const resizeImageData = (imageData: ImageData, width: number, height: number): ImageData => {\n    const oldCanvas = imageDataToCanvas(imageData);\n    const newCanvas = document.createElement('canvas');\n    newCanvas.width = width;\n    newCanvas.height = height;\n\n    newCanvas.getContext(\"2d\").drawImage(oldCanvas, 0, 0, width, height);\n\n    return canvasToImageData(newCanvas);\n};\n\nexport const imageDataToBase64 = (imageData: ImageData): string => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n};\n\nexport const base64ToImageData = (src: string): Promise<ImageData> => {\n    return new Promise(resolve => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => {\n\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n\n            if (!ctx) {\n                return null;\n            }\n\n            canvas.width = image.width;\n            canvas.height = image.height;\n            ctx.drawImage(image, 0, 0);\n\n            resolve(ctx.getImageData(0, 0, canvas.width, canvas.height))\n\n        }\n    });\n};\n\nexport const maskedImage = (imageData: ImageData, maskImageData: ImageData): HTMLCanvasElement => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n\n\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n\n    if (maskImageData) {\n        ctx.putImageData(maskImageData, 0, 0);\n        ctx.globalCompositeOperation = \"source-in\";\n    }\n    ctx.drawImage(imageDataToCanvas(imageData), 0, 0, imageData.width, imageData.height);\n\n    return canvas;\n\n};","import {\n    AddPatternAction, CreateRoomAction, EditPatternConfigAction, MaskParams,\n    PatternRedoAction, PatternUndoAction, RemovePatternAction, SetMaskParamsAction,\n    SetPatternHeightAction,\n    SetPatternWidthAction, UpdatePatternImageAction, UpdatePatternMaskAction, UpdatePatternSelectionAction\n} from \"./types\";\nimport {SelectionValue} from \"../../utils/types\";\nimport {PatternConfig} from \"./types\";\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\nimport {AppState} from \"../index\";\nimport {Action} from \"redux\";\nimport {createRoom_s} from \"./service\";\nimport {base64ToImageData, imageDataToBase64} from \"../../utils/imageData\";\nimport {dispatch} from \"d3-dispatch\";\n\ntype ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\n\nexport enum EPatternsAction {\n    ADD_PATTERN = \"patterns/add\",\n    REMOVE_PATTERN = \"patterns/remove\",\n}\n\nexport enum EPatternAction {\n    UPDATE_IMAGE = \"pattern/update-image\",\n    UPDATE_MASK = \"pattern/update-mask\",\n    UPDATE_SELECTION = \"pattern/update-selection\",\n    SET_MASK_PARAMS = \"pattern/set-mask-params\",\n    EDIT_CONFIG = \"pattern/edit-config\",\n    UNDO = \"pattern/undo\",\n    REDO = \"pattern/redo\",\n    STORE_IMAGE = \"pattern/store-image\",\n    UNSTORE_IMAGE = \"pattern/unstore-image\",\n    SET_WIDTH = \"pattern/set-width\",\n    SET_HEIGHT = \"pattern/set-height\",\n    SET_SELECTION_PARAMS = \"pattern/set-selection-params\",\n\n    CREATE_ROOM = \"pattern/create-room\",\n}\n\nexport const addPattern = (config?: PatternConfig): AddPatternAction =>\n    ({type: EPatternsAction.ADD_PATTERN, config});\n\nexport const removePattern = (id: number): RemovePatternAction =>\n    ({type: EPatternsAction.REMOVE_PATTERN, id});\n\nexport const updateImage = (id: number, imageData: ImageData, emit: boolean = true): ThunkResult<UpdatePatternImageAction> =>\n    (dispatch, getState) => {\n\n        const socket = getState().patterns[id].socket;\n\n        emit && socket && socket.emit(\"image\", imageDataToBase64(imageData));\n\n        return dispatch({type: EPatternAction.UPDATE_IMAGE, imageData, id});\n    };\n\nexport const updateMask = (id: number, imageData: ImageData): UpdatePatternMaskAction =>\n    ({type: EPatternAction.UPDATE_MASK, imageData, id});\n\nexport const setMaskParams = (id: number, params: MaskParams): SetMaskParamsAction =>\n    ({type: EPatternAction.SET_MASK_PARAMS, id, params});\n\nexport const updateSelection = (id: number, value: SelectionValue): UpdatePatternSelectionAction =>\n    ({type: EPatternAction.UPDATE_SELECTION, value, id});\n\nexport const editConfig = (id: number, config: PatternConfig): EditPatternConfigAction =>\n    ({type: EPatternAction.EDIT_CONFIG, id, config});\n\nexport const undo = (id: number): PatternUndoAction =>\n    ({type: EPatternAction.UNDO, id});\nexport const redo = (id: number): PatternRedoAction =>\n    ({type: EPatternAction.REDO, id});\n\nexport const setWidth = (id: number, width: number): SetPatternWidthAction =>\n    ({type: EPatternAction.SET_WIDTH, id, width});\nexport const setHeight = (id: number, height: number): SetPatternHeightAction =>\n    ({type: EPatternAction.SET_HEIGHT, id, height});\n\n\nexport const createRoom = (id: number, roomName: string): ThunkResult<CreateRoomAction> =>\n    dispatch => {\n        const socket = createRoom_s(roomName);\n\n        socket.on(\"image\", base64 => {\n            base64ToImageData(base64).then(imageData => {\n                dispatch(updateImage(id, imageData, false));\n            });\n        });\n\n        return dispatch({type: EPatternAction.CREATE_ROOM, id, roomName, socket})\n    };\n\n// export const storeImage = (id: number): PatternStoreAction => ({type: EPatternsAction.STORE_IMAGE});\n// export const unstoreImage = (id: number): PatternUnstoreAction => ({type: EPatternsAction.UNSTORE_IMAGE});\n\n// export const setSelection = (selection: SelectionValue): SetPatternSelectionAction =>\n//     ({type: EPatternsAction.SET_SELECTION, selection});\n// export const setSelectionParams = (params: object): SetPatternSelectionParamsAction =>\n//     ({type: EPatternsAction.SET_SELECTION_PARAMS, params});","import {Action} from \"redux\";\n\nexport enum EToolType {\n    Brush = \"Brush\",\n    Select = \"Select\",\n    Line = \"Line\",\n}\n\nexport interface SetCurrentToolAction extends Action {\n    tool: EToolType\n}\n\nexport const selectionTools = [EToolType.Select];","import * as React from \"react\";\nimport {Button} from \"../_shared/Button\";\nimport {HistoryValue} from \"../../store/patterns/types\";\n\nexport interface HistoryControlsProps {\n\n    history: HistoryValue\n\n    onUndo()\n\n    onRedo()\n}\n\nexport const HistoryControls: React.FC<HistoryControlsProps> = ({onUndo, onRedo, history}) => {\n\n    return (\n        <>\n            <Button\n                onClick={onUndo}\n                disabled={!history.before.length}\n                width={70}>\n                undo{history.before.length ? `(${history.before.length})` : \"\"}</Button>\n            <Button\n                onClick={onRedo}\n                disabled={!history.after.length}\n                width={70}>\n                redo{history.after.length ? `(${history.after.length})` : \"\"}</Button>\n        </>\n    );\n};","import {pointsDistance} from \"./geometry\";\n\nexport enum ESegType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n}\n\nexport enum EPathModeType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n    Rect = \"Rect\",\n    Slice = \"Slice\",\n}\n\nexport interface Segment {\n    type: ESegType\n    values?: number[]\n}\n\nexport const RECT_LENGTH = 5;\n\nexport const Path = {\n    [EPathModeType.M]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.M, values: [x, y]}],\n    [EPathModeType.L]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.L, values: [x, y]}],\n    [EPathModeType.Z]: (path: Segment[]): Segment[] =>\n        [...path, {type: ESegType.Z}],\n    [EPathModeType.Rect]: (path: Segment[], [x1, y1, x2, y2]: number[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            {type: ESegType.M, values: [x1, y1]},\n            {type: ESegType.L, values: [x2, y1]},\n            {type: ESegType.L, values: [x2, y2]},\n            {type: ESegType.L, values: [x1, y2]},\n            {type: ESegType.Z},\n            ...path.slice(sliceEnd + 1)\n        ]\n    },\n    [EPathModeType.Slice]: (path: Segment[], slice: Segment[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            ...slice,\n            ...path.slice(sliceEnd + 1)\n        ]\n    }\n};\n\nexport const findSliceBounds = (path, n) => {\n    let sliceStart, sliceEnd;\n    let m = 0;\n    for (let i = 0; i < path.length; i++) {\n        if (path[i].type === ESegType.M) {\n            if (m === n) {\n                sliceStart = i;\n                for (let j = i; j < path.length; j++) {\n                    if (path[j].type === ESegType.Z) {\n                        sliceEnd = j;\n                        break;\n                    }\n                }\n                break;\n            }\n            m++;\n        }\n    }\n\n    return {\n        sliceStart: typeof sliceStart === \"undefined\" ? path.length : sliceStart,\n        sliceEnd: typeof sliceEnd === \"undefined\" ? path.length : sliceEnd,\n    }\n};\n\nexport const getLastSlice = (path: Segment[]) => {\n    let i;\n    for (i = path.length - 1; i >= 0; i--) {\n        if (path[i].type === ESegType.M) {\n            break;\n        }\n    }\n\n    return path.slice(i);\n};\n\nexport interface NearestSegmentData {\n    index: number,\n    segment: Segment,\n    distance: number\n    startInSlice?: number,\n    sliceStart?: number\n    sliceEnd?: number\n    sliceN?: number\n    slice?: Segment[]\n}\n\nexport const getNearestSegment = (path: Segment[], x: number, y: number): NearestSegmentData => {\n    if (!path || !path.length)\n        return;\n\n    const nearest: NearestSegmentData = path.slice(1).reduce((res: NearestSegmentData, segment, index) => {\n        index++;\n\n        if (!segment.values)\n            return res;\n\n        const distance = pointsDistance(x, y, segment.values[0], segment.values[1]);\n\n        return distance < res.distance ? {\n            distance, segment,\n            index\n        } : res;\n    }, {\n        sliceStart: 0,\n        sliceEnd: 0,\n        startInSlice: 0,\n        index: 0,\n        segment: path[0],\n        distance: pointsDistance(x, y, path[0].values[0], path[0].values[1])\n    });\n\n    let sliceStart, sliceEnd;\n    nearest.sliceN = -1;\n    for (let i = 0; i < path.length; i++) {\n\n        if (path[i].type === ESegType.M && i <= nearest.index) {\n            sliceStart = i;\n            nearest.sliceN += 1;\n        }\n        if (path[i].type === ESegType.Z && i > nearest.index && !sliceEnd) {\n            sliceEnd = i;\n        }\n    }\n\n    nearest.sliceStart = sliceStart;\n    nearest.sliceEnd = sliceEnd;\n    nearest.startInSlice = sliceStart ? nearest.index % sliceStart : nearest.index;\n\n    nearest.slice = path.slice(nearest.sliceStart, nearest.sliceEnd + 1);\n\n\n    return nearest;\n};\n\nexport const pathDataToString = (pathData): string => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n    (path as any).setPathData(pathData);\n\n    return path.getAttribute(\"d\");\n};\n\nexport const stringToPathData = (string: string) => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n\n    path.setAttribute(\"d\", string);\n\n    return (path as any).getPathData();\n};","export const pointsDistance = (x1, y1, x2, y2) => {\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n};","import React from 'react';\nimport {canvasToImageData} from \"../../utils/imageData\";\n\nexport interface CanvasSVGProps {\n    children?: React.ReactNode\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    onDrag?(e: MouseEvent, pre: MouseEvent)\n\n    onMove?(e: MouseEvent, pre: MouseEvent)\n\n    onDown?(e: MouseEvent)\n\n    onUp?(e: MouseEvent)\n}\n\nexport interface CanvasSVGState {\n    dragging: boolean\n}\n\nexport class SVG extends React.PureComponent<CanvasSVGProps, CanvasSVGState> {\n\n    elementRef;\n    pre;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: false\n        };\n\n        this.elementRef = React.createRef();\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.elementRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        this.elementRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n    }\n\n    // selectToolHandlers\n\n    private mouseDownHandler = e => {\n        this.setState({dragging: true});\n\n        const {onDown} = this.props;\n\n        onDown && onDown(e);\n    };\n\n    private mouseUpHandler = e => {\n        if (this.state.dragging) {\n            this.setState({dragging: false});\n\n            this.pre = null;\n            const {onUp} = this.props;\n\n            onUp && onUp(e);\n        }\n    };\n\n    private mouseMoveHandler = e => {\n        const {onDrag, onMove} = this.props;\n\n        this.state.dragging && onDrag && onDrag(e, this.pre);\n\n        onMove && onMove(e, this.pre);\n\n        this.pre = e;\n    };\n\n    render() {\n        const {children, width, height, className, style} = this.props;\n        return (\n            <svg\n                ref={this.elementRef}\n                width={width}\n                height={height}\n                className={className}\n                style={style}>\n                {children}\n            </svg>\n        )\n    }\n}","const defaultValue = (value, key?) => key;\nexport const objectToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = defaultValue,\n    text: (value: any, key: string) => string = defaultValue,\n    withNull?: boolean,\n    nullText?: string\n) => {\n    const items = Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));\n\n    return withNull\n        ? [{\n            value: null,\n            text: nullText || \"-\"\n        }, ...items] : items;\n\n};\n\nconst defaultArrayValue = (item) => item;\nexport const arrayToSelectItems = (\n    array: any[],\n    value: (item: any) => any = defaultArrayValue,\n    text: (item: any) => string = defaultArrayValue\n) =>\n    array.map(item => ({\n        value: value(item),\n        text: text(item),\n    }));\n\nconst defaultKey = ({name}) => name;\nexport const arrayToObject = (\n    array: any[],\n    key: (item: any) => string = defaultKey,\n    value: (item: any) => any = defaultValue\n) =>\n    array.reduce((res, item) => ({\n        ...res,\n        [key(item)]: value(item),\n    }), {});\n\n\nexport const enumToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = value => value,\n    text: (value: any, key: string) => string = value => value\n) =>\n    Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));","import {Action} from \"redux\";\n\nexport enum ECurveType {\n    CurveBasis = \"curveBasis\",\n    CurveBundle = \"curveBundle\",\n    CurveCardinal = \"curveCardinal\",\n    CurveCatmullRom = \"curveCatmullRom\",\n    CurveLinear = \"curveLinear\",\n    CurveMonotoneX = \"curveMonotoneX\",\n    CurveMonotoneY = \"curveMonotoneY\",\n    CurveNatural = \"curveNatural\",\n    CurveStep = \"curveStep\",\n    CurveStepBefore = \"curveStepBefore\",\n    CurveStepAfter = \"curveStepAfter\",\n}\n\nexport const CurveValueName = {\n    [ECurveType.CurveBundle]: \"beta\",\n    [ECurveType.CurveCardinal]: \"tension\",\n    [ECurveType.CurveCatmullRom]: \"alpha\"\n};\n\nexport enum ESelectionMode {\n    Line = \"Line\",\n    Rect = \"Rect\",\n    SimplePoints = \"SimplePoints\",\n    Points = \"Points\"\n}\n\nexport interface SelectToolParams {\n    mode: ESelectionMode\n    curveType?: ECurveType\n    curveValue?: number\n}\n\nexport interface SetSelectToolParamsAction extends Action {\n    params: SelectToolParams\n}","import {Action} from \"redux\";\n\nexport enum EBrushType {\n    Square = \"Square\",\n    Circle = \"Circle\",\n    Pattern = \"Pattern\",\n}\n\nexport interface BrushParams {\n    size: number\n    opacity: number\n    type: EBrushType\n    pattern: number\n    compositeOperation: EBrushCompositeOperation\n}\n\nexport interface SetBrushParamsAction extends Action {\n    params: BrushParams\n}\n\n\nexport interface SetSizeAction extends Action {\n    size: number\n}\n\nexport interface SetOpacityAction extends Action {\n    opacity: number\n}\n\nexport interface SetTypeAction extends Action {\n    brushType: EBrushType\n}\n\n\nexport enum EBrushCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n}","import * as React from \"react\";\nimport {pointsDistance} from \"../../utils/geometry\";\nimport {SVG} from \"../_shared/SVG\";\nimport * as d3 from \"d3\";\nimport {\n    EPathModeType,\n    ESegType,\n    getLastSlice,\n    getNearestSegment,\n    NearestSegmentData,\n    Path,\n    Segment,\n    stringToPathData\n} from \"../../utils/path\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport classNames from \"classnames\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {ESelectionMode, ECurveType, CurveValueName, SelectToolParams} from \"../../store/selectTool/types\";\nimport {SelectionValue} from '../../utils/types';\nimport {SelectionParams} from \"../../store/patterns/types\";\nimport \"../../styles/selection.scss\"\n\n\nconst lineFunction = d3\n    .line<Segment>()\n    .x(({values}) => values ? values[0] : 0)\n    .y(({values}) => values ? values[1] : 0)\n    .defined(({values}) => !!values);\n\n\nconst HANDLER_SIZE = 5;\n\n\nexport const selectionModesSelectItems = arrayToSelectItems(\n    [ESelectionMode.Rect, ESelectionMode.Line, ESelectionMode.Points]);\n\nexport const curveTypesSelectItems = arrayToSelectItems(Object.values(ECurveType));\n\nexport interface CanvasSelectionStateProps {\n    currentTool: EToolType\n    selectToolParams: SelectToolParams\n}\n\nexport interface CanvasSelectionActionProps {\n}\n\nexport interface CanvasSelectionOwnProps {\n    isActive: boolean\n    params: SelectionParams\n\n    name: any\n    width: number\n    height: number\n\n    value?: SelectionValue\n    className?: string\n\n    onChange?(value?: any)\n}\n\nexport interface CanvasSelectionProps extends CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps {\n\n}\n\nexport interface CanvasSelectionState {\n\n    startX: number\n    startY: number\n    offsetX: number\n    offsetY: number\n    points: any[]\n    closed: boolean\n    path: any[]\n    prevPath: any[] // нужно чтобы знать когда обновлять стейт из пропсов\n    curvePath: any[]\n    currentSliceN: number\n}\n\nclass CanvasSelectionComponent extends React.PureComponent<CanvasSelectionProps, CanvasSelectionState> {\n\n    canvasRef;\n    pathRef;\n    pathPointsRef;\n    maskPathRef;\n    maskRef;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n        this.pathRef = React.createRef();\n        this.pathPointsRef = React.createRef();\n        this.maskPathRef = React.createRef();\n        this.maskRef = React.createRef();\n\n        this.state = {\n            startX: null,\n            startY: null,\n            offsetX: null,\n            offsetY: null,\n            points: [],\n            closed: true,\n            path: [],\n            prevPath: null,\n            curvePath: [],\n            currentSliceN: 0\n        };\n    }\n\n    componentDidMount() {\n        const {value} = this.props;\n        Array.isArray(value) && this.setState({\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length\n        })\n    }\n\n    componentDidUpdate(prevProps: CanvasSelectionProps) {\n        if (prevProps.selectToolParams.mode !== this.props.selectToolParams.mode) {\n            this.selectToolHandlers[prevProps.selectToolParams.mode].exit(this.props.selectToolParams.mode)\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps: CanvasSelectionProps, prevState) {\n        const {value} = nextProps;\n        return Array.isArray(value) && value !== prevState.prevPath ? {\n            prevPath: value,\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length,\n        } : {}\n    }\n\n    commitChanges = () => {\n        const {onChange} = this.props;\n\n        onChange && onChange(this.state.path);\n    };\n\n    selectToolHandlers = {\n        [ESelectionMode.Rect]: ({\n            down: e => {\n                const {path} = this.state;\n\n                if (path.length) {\n\n                    const nearest: NearestSegmentData = getNearestSegment(path, e.offsetX, e.offsetY);\n\n                    if (nearest && nearest.distance < HANDLER_SIZE * 2) {\n\n                        if (nearest.slice.length !== 5) {\n                            return this.setState(state => ({\n                                startX: e.offsetX,\n                                startY: e.offsetY,\n                                offsetX: 0,\n                                offsetY: 0,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], nearest.sliceN)\n                            }));\n                        } else {\n\n                            const oppositeIndex = (nearest.startInSlice + 2) % 4;\n                            const oppositeSeg = nearest.slice[oppositeIndex];\n\n                            const offsetX = nearest.segment.values[0] - e.offsetX;\n                            const offsetY = nearest.segment.values[1] - e.offsetY;\n\n                            const startX = oppositeSeg.values[0];\n                            const startY = oppositeSeg.values[1];\n\n                            return this.setState(state => ({\n                                startX, startY,\n                                offsetX, offsetY,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [startX, startY, e.offsetX + offsetX, e.offsetY + offsetY], nearest.sliceN)\n                            }));\n                        }\n                    }\n                }\n                this.setState(({currentSliceN, path}) => ({\n                    offsetX: 0,\n                    offsetY: 0,\n                    startX: e.offsetX,\n                    startY: e.offsetY,\n                    path: Path[EPathModeType.Rect](path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n\n            },\n            drag: e => {\n                this.setState(({path, startX, startY, offsetX, offsetY, currentSliceN}) => ({\n                    path: Path[EPathModeType.Rect](path, [startX, startY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n            },\n            up: () => {\n                this.setState(state => ({\n                    startX: 0, startY: 0, offsetX: 0, offsetY: 0,\n                    currentSliceN: state.path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }),\n        [ESelectionMode.SimplePoints]: {\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    this.setState(({path}) => ({\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n\n                    if (curvePath.length) {\n                        this.setState(({path, currentSliceN}) => ({\n                            curvePath: [],\n                            path: Path[EPathModeType.Slice](path, curvePath, currentSliceN)\n                        }))\n                    }\n\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.Z](path),\n                            currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                        }), this.commitChanges);\n                    } else {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                        }));\n                    }\n                }\n            },\n            drag: () => undefined,\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        },\n        [ESelectionMode.Points]: ({\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    // если пустой путь или закрытый\n\n                    const curvePath = Path[EPathModeType.M](this.state.curvePath, [e.offsetX, e.offsetY]);\n\n                    this.setState(({path}) => ({\n                        curvePath,\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n                    if (!curvePath.length) {\n                        this.setState(({path}) => ({curvePath: getLastSlice(path)}))\n                    }\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        // если пришли к началу\n\n                        this.setState(({path, curvePath}) => {\n                            let newCurvePath = Path[EPathModeType.L](curvePath, [subFirst.values[0], subFirst.values[1]]);\n                            newCurvePath = Path[EPathModeType.Z](newCurvePath);\n\n                            return {\n                                curvePath: [],\n                                path: Path[EPathModeType.Z](this.line(path, newCurvePath)),\n                                currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                            }\n                        }, this.commitChanges);\n                    } else {\n                        // следующая точкка\n\n                        this.setState(({path, curvePath}) => {\n                            const newCurvePath = Path[EPathModeType.L](curvePath, [e.offsetX, e.offsetY]);\n\n                            return {\n                                curvePath: newCurvePath,\n                                path: this.line(path, newCurvePath)\n                            }\n                        });\n                    }\n                }\n            },\n            drag: () => undefined, // можно сделать чтобы последняя точка перетаскивалась пока держишь\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        }),\n        [ESelectionMode.Line]: {\n            down: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            drag: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            up: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.Z](path),\n                    currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }\n    };\n\n    line = (path, line) => {\n        const {selectToolParams} = this.props;\n        const {curveType} = selectToolParams;\n        const curveValue = selectToolParams[CurveValueName[curveType]];\n\n        let curve = d3[curveType || \"curveLinear\"];\n        if (Object.keys(CurveValueName).indexOf(curveType) !== -1)\n            curve = curve[CurveValueName[curveType]](curveValue);\n\n        return Path[EPathModeType.Slice](\n            path,\n            stringToPathData(\n                lineFunction.curve(curve)(getLastSlice(line))),\n            this.state.currentSliceN);\n    };\n\n    render() {\n        console.log(\"selector render\", this.state.path);\n        const {width, height, selectToolParams: {mode}, isActive, name} = this.props;\n\n        this.pathRef.current && this.pathRef.current.setPathData(this.state.path);\n        this.maskPathRef.current && this.maskPathRef.current.setPathData(this.state.path);\n\n        return (\n            <div className={classNames(\"selection\", {\n                [\"selectionActive\"]: isActive\n            })}>\n                <SVG\n                    width={width}\n                    height={height}\n                    onDown={this.selectToolHandlers[mode].down}\n                    onDrag={this.selectToolHandlers[mode].drag}\n                    onUp={this.selectToolHandlers[mode].up}>\n                    {this.state.path && this.state.path.length && <>\n                        <mask\n                            id={`selectionMask${name}`}\n                            ref={this.maskRef}>\n                            <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\"/>\n                            <path\n                                ref={this.maskPathRef}\n                                fillOpacity={1}\n                                fill=\"black\"/>\n                        </mask>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" fillOpacity={0.3}\n                              mask={`url(#selectionMask${name})`}/>\n                        <path\n                            ref={this.pathRef}\n                            fillOpacity={0}\n                            fill=\"black\"\n                            stroke=\"red\"/>\n                    </>}\n                </SVG>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps: MapStateToProps<CanvasSelectionStateProps, CanvasSelectionOwnProps, AppState> = state => ({\n    selectToolParams: state.selectTool.params,\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasSelectionActionProps, CanvasSelectionOwnProps> = {};\n\nexport const Selection = connect<CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasSelectionComponent);","import React from 'react';\nimport {canvasToImageData} from \"../../utils/imageData\";\nimport \"../../styles/canvas.scss\";\nimport * as classNames from \"classnames\";\n\nexport interface CanvasEvent {\n    e: MouseEvent\n    pre?: MouseEvent\n    ctx: CanvasRenderingContext2D\n    canvas: HTMLCanvasElement\n    drawing?: boolean\n}\n\nexport interface CanvasProps {\n    value?: ImageData\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    children?: React.ReactNode\n\n    updateOnDrag?: boolean\n\n    onDown?(e: CanvasEvent)\n    onUp?(e: CanvasEvent)\n    onDraw?(e: CanvasEvent)\n\n    drawProcess?(e: CanvasEvent)\n\n    clickProcess?(e: CanvasEvent)\n\n    moveProcess?(e: CanvasEvent)\n\n    releaseProcess?(e: CanvasEvent)\n\n    onChange?(imageData?: ImageData)\n\n\n}\n\nexport interface CanvasState {\n    drawing: boolean\n}\n\nexport class Canvas extends React.PureComponent<CanvasProps, CanvasState> {\n\n    canvasRef;\n    ctx;\n    pre;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            drawing: false\n        };\n\n        this.canvasRef = React.createRef();\n        this.ctx = null;\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.ctx = this.canvasRef.current.getContext(\"2d\");\n\n\n        this.canvasRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n\n        if (this.props.value instanceof ImageData) {\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        this.canvasRef.current.removeEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        // console.log(Object.keys(this.props).reduce((res, key) => ({\n        //     ...res,\n        //     [key]: prevProps[key] !== this.props[key]\n        // }), {}));\n        //\n        // console.log(prevProps.value !== this.props.value ||\n        //     prevProps.width !== this.props.width ||\n        //     prevProps.height !== this.props.height);\n        if ((\n            prevProps.value !== this.props.value ||\n            prevProps.width !== this.props.width ||\n            prevProps.height !== this.props.height\n        ) && this.props.value instanceof ImageData) {\n            this.ctx = this.canvasRef.current.getContext(\"2d\");\n            console.log()\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    private mouseDownHandler = e => {\n        console.log('canvas down');\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        this.setState({drawing: true});\n\n        const event = {\n            e,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: true\n        };\n\n        const {onDown} = this.props;\n\n        onDown && onDown(event);\n\n        const {clickProcess} = this.props;\n\n        clickProcess && clickProcess(event);\n\n\n    };\n\n    private mouseUpHandler = e => {\n        console.log('canvas up');\n        document.removeEventListener(\"mouseup\", this.mouseUpHandler);\n        if (this.state.drawing) {\n            this.setState({drawing: false});\n\n            this.pre = null;\n            const {onChange} = this.props;\n\n            onChange && onChange(canvasToImageData(this.canvasRef.current));\n\n            const event = {\n                e,\n                ctx: this.ctx,\n                canvas: this.canvasRef.current,\n                drawing: false\n            };\n\n            const {onUp} = this.props;\n\n            onUp && onUp(event);\n\n            const {releaseProcess} = this.props;\n\n            releaseProcess && releaseProcess(event);\n        }\n    };\n\n    private mouseMoveHandler = e => {\n        const {drawProcess, moveProcess} = this.props;\n\n        this.state.drawing && drawProcess && drawProcess({\n            e,\n            pre: this.pre,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: true\n        });\n\n        moveProcess && moveProcess({\n            e,\n            pre: this.pre,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: this.state.drawing\n        });\n\n        // обновление стxейта, может понадобиться для мультиплеера\n        // const {onChange, updateOnDrag = true} = this.props;\n        // updateOnDrag && this.state.drawing && onChange && onChange(canvasToImageData(this.canvasRef.current));\n\n        this.pre = e;\n    };\n\n    // public\n\n    // public setImageData = image =>\n    //     this.ctx.putImageData(image, 0, 0);\n    //\n    // public drawImage = (...p) =>\n    //     this.ctx.drawImage(...p);\n    // public getCtx = () =>\n    //     this.ctx;\n    //\n    // public getImageData = () =>\n    //     this.ctx.getImageData(0, 0, this.props.width, this.props.height);\n    //\n    // public clear = () => {\n    //     this.ctx.clearRect(0, 0, this.props.width, this.props.height);\n    // };\n\n    render() {\n        console.log(\"canvas render\");\n        const {value, width, height, className, style, children} = this.props;\n        return (\n            <div className={classNames(className, \"canvas\")}>\n                <canvas\n                    style={style}\n                    ref={this.canvasRef}\n                    width={width || (value ? value.width : 300)}\n                    height={height || (value ? value.height : 300)}/>\n                {children}\n            </div>\n        )\n    }\n}","import {Action} from \"redux\";\nimport {EBrushType} from \"../brush/types\";\n\nexport enum ELineType {\n    Default = \"Default\",\n    Interrupted = \"Interrupted\",\n    InterruptedOneStroke = \"InterruptedOneStroke\",\n    Pattren = \"Pattren\",\n}\n\nexport enum ELineCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n}\n\nexport interface LineParams {\n    size: number\n    opacity: number\n    type: ELineType\n    compositeOperation: ELineCompositeOperation\n    pattern: number\n}\n\nexport interface SetLineParamsAction extends Action {\n    params: LineParams\n}","import {Action} from \"redux\";\n\nexport enum EChangeAction {\n    CHANGE = \"change\",\n    TO_START_VALUE = \"change/to-start-value\",\n    ALL_TO_START_VALUE = \"change/all-to-start-value\"\n}\n\nexport interface ChangeAction extends Action {\n    time: number\n}\n\nexport interface ChangeToStartValueAction extends Action {\n    path: string\n}\n\nexport const change = (time: number): ChangeAction =>\n    ({type: EChangeAction.CHANGE, time});\n\nexport const toStartValue = (path: string): ChangeToStartValueAction =>\n    ({type: EChangeAction.TO_START_VALUE, path});\n\nexport const allToStartValue = (): Action =>\n    ({type: EChangeAction.ALL_TO_START_VALUE});","export enum ChangingMode {\n    OnDraw = \"onDraw\",\n    On = \"on\",\n    Off = \"off\"\n}","import {allToStartValue, change} from \"../change/actions\";\nimport {ChangingMode} from \"./types\";\nimport {AppState} from \"../index\";\n\n// todo прикрутить сюда тайпскрипт\n\nexport enum EChangingAction {\n    START = \"changing/start\",\n    STOP = \"changing/stop\",\n    SET_MODE = \"changing/set-mode\"\n}\n\nlet requestID = null;\n\nexport const startChanging = () => (dispatch, getState) => {\n\n    if (!requestID) {\n        requestID && cancelAnimationFrame(requestID);\n\n        const startTime = performance.now();\n\n        requestID = requestAnimationFrame(function changing(time) {\n\n            dispatch(change(time - startTime));\n\n            requestID = requestAnimationFrame(changing);\n        });\n\n        return dispatch({type: EChangingAction.START})\n    }\n};\n\nexport const stopChanging = () => (dispatch, getState) => {\n\n    requestID && cancelAnimationFrame(requestID);\n\n    requestID = null;\n\n    return dispatch({type: EChangingAction.STOP})\n};\n\nexport const startDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw)\n        return dispatch(startChanging())\n\n};\nexport const stopDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw) {\n        dispatch(allToStartValue());\n        return dispatch(stopChanging())\n    }\n};\n\nexport const setChangingMode = (mode: ChangingMode) => (dispatch, getState) => {\n\n    const state: AppState = getState();\n    const prevMode = state.changing.mode;\n\n    if (prevMode === mode) return;\n\n    if (mode === ChangingMode.OnDraw) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    } else if (mode === ChangingMode.On) {\n        dispatch(startChanging());\n    } else if (mode === ChangingMode.Off) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    }\n\n    return dispatch({type: EChangingAction.SET_MODE, mode})\n};\n","import * as React from \"react\";\nimport {Canvas, CanvasProps} from \"../_shared/Canvas\";\nimport {circle} from \"../../utils/canvas\";\nimport {AppState} from \"../../store\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {EBrushCompositeOperation, EBrushType} from \"../../store/brush/types\";\nimport {LineState} from \"../../store/line/reducer\";\nimport get from \"lodash/get\";\nimport {ELineType} from \"../../store/line/types\";\nimport {ELineCompositeOperation} from \"../../store/line/types\";\nimport {startDrawChanging, stopDrawChanging} from \"../../store/changing/actions\";\nimport {PatternsState} from \"../../store/patterns/reducer\";\n\nexport interface CanvasDrawStateProps {\n    brush: BrushState\n    line: LineState\n    tool: EToolType\n    patterns: PatternsState\n}\n\nexport interface CanvasDrawActionProps {\n    startChanging()\n\n    stopChanging()\n}\n\nexport interface CanvasDrawOwnProps extends CanvasProps {\n}\n\nexport interface CanvasDrawProps extends CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps {\n}\n\nexport interface CanvasDrawState {\n}\n\nfunction getRandomColor() {\n    // return \"black\";\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nclass CanvasDrawComponent extends React.PureComponent<CanvasDrawProps, CanvasDrawState> {\n\n    handlers = {\n        [EToolType.Brush]: {\n            [EBrushType.Square]: (() => {\n                const squareBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: squareBrush,\n                    click: squareBrush\n                }\n            })(),\n            [EBrushType.Circle]: (() => {\n                const circleBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: circleBrush,\n                    click: circleBrush\n                }\n            })(),\n            [EBrushType.Pattern]: (() => {\n                const patternBrush = (ev) => {\n                    const {ctx, e} = ev;\n                    const {patterns} = this.props;\n                    const {size, opacity, compositeOperation, pattern} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n\n                    const p = patterns[pattern] && patterns[pattern].resultImage;\n                    if (p) {\n                        //const i = patterns[pattern].imageMasked;\n                        ctx.drawImage(p, e.offsetX - p.width / 2, e.offsetY - p.height / 2, p.width, p.height);\n\n                        ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                        ctx.globalAlpha = 1;\n                    }\n                };\n                return {\n                    draw: patternBrush,\n                    click: patternBrush\n                }\n            })(),\n        },\n        [EToolType.Line]: {\n            [ELineType.Default]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.beginPath();\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();\n                    ctx.lineWidth = size;\n\n                    ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    ctx.lineTo(e.offsetX, e.offsetY);\n                    // ctx.strokeStyle = getRandomColor();\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.Interrupted]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n                    ctx.beginPath();\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.InterruptedOneStroke]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    if (!pre) return;//\"green\";\n\n                    ctx.beginPath();\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                }\n            }\n        },\n    };\n\n    render() {\n        const {tool, startChanging, stopChanging} = this.props;\n\n        const getType = getTypeField[tool];\n        const type = getType ? getType(this.props) : 0;\n        const handlersByTool = this.handlers[tool];\n        const handlers = handlersByTool && handlersByTool[type];\n        console.log(handlers);\n        return (\n            <Canvas\n                onDown={startChanging}\n                onUp={stopChanging}\n                drawProcess={handlers && handlers.draw}\n                clickProcess={handlers && handlers.click}\n                releaseProcess={handlers && handlers.release}\n                {...this.props}/>\n        );\n    }\n}\n\nconst getTypeField = {\n    [EToolType.Line]: props => get(props, \"line.params.type\"),\n    [EToolType.Brush]: props => get(props, \"brush.params.type\"),\n};\n\nconst mapStateToProps: MapStateToProps<CanvasDrawStateProps, CanvasDrawOwnProps, AppState> = state => ({\n    brush: state.brush,\n    line: state.line,\n    tool: state.tool.current,\n    patterns: state.patterns\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasDrawActionProps, CanvasDrawOwnProps> = {\n    startChanging: startDrawChanging, stopChanging: stopDrawChanging\n};\n\nexport const Draw = connect<CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasDrawComponent);","import * as React from \"react\";\n\nexport interface InputNumberProps {\n    onChange(value: number): void\n\n    min?: number\n    max?: number\n    step?: number\n    value?: number\n    delay?: number\n    notZero?: boolean\n}\n\nlet timer;\n\nexport const InputNumber: React.FC<InputNumberProps> = ({value, onChange, min = 0, max = 1, step = 0.05, delay, notZero}) => {\n\n    const [_value, set_value] = React.useState(value);\n\n    React.useEffect(() => {\n        value !== _value && !timer && set_value(value)\n    });\n\n    const changeHandler = e => {\n        const n_value = +e.target.value;\n\n        if (!delay) {\n\n            if (notZero && !n_value) {\n                return;\n            }\n\n            set_value(n_value);\n            onChange(n_value)\n\n        } else {\n\n            set_value(n_value);\n\n            timer && clearTimeout(timer);\n            timer = setTimeout(() => {\n                if (notZero && !n_value) {\n                    set_value(value);\n                    return;\n                }\n\n                onChange(n_value);\n                clearTimeout(timer);\n                timer = null; // чистим таймер чтобы обновлять значение из пропсов только когда таймер не запущен\n\n            }, delay)\n        }\n    };\n\n    return (\n        <input\n            type=\"number\"\n            step={step}\n            min={min}\n            max={max}\n            value={_value}\n            onChange={changeHandler}/>\n    );\n};","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {EToolType, selectionTools} from \"../../store/tool/types\";\nimport {Selection} from \"./Selection\";\nimport {Draw} from \"./Draw\";\nimport {StoreState} from \"../../store/patterns/types\";\nimport {SelectionValue} from \"../../utils/types\";\nimport {SelectionParams, SelectionState} from \"../../store/patterns/types\";\nimport \"../../styles/area.scss\";\n\nexport interface AreaStateProps {\n    currentTool: EToolType\n}\n\nexport interface AreaActionProps {\n}\n\nexport interface AreaOwnProps {\n    name: any // нужен для маски выделения\n    height: number\n    width: number\n\n    imageValue: ImageData\n    selectionValue: SelectionValue\n    selectionParams: SelectionParams\n\n    onImageChange(imageData: ImageData)\n\n    onSelectionChange(selectionValue: SelectionValue)\n}\n\nexport interface AreaProps extends AreaStateProps, AreaActionProps, AreaOwnProps {\n\n}\n\nclass AreaComponent extends React.PureComponent<AreaProps> {\n    render() {\n        const {currentTool, name, height, width, imageValue, selectionValue, selectionParams, onImageChange, onSelectionChange} = this.props;\n\n        return (\n            <div className=\"area\">\n                <Draw\n                    value={imageValue}\n                    width={width}\n                    height={height}\n                    onChange={onImageChange}/>\n                <Selection\n                    isActive={selectionTools.indexOf(currentTool) !== -1}\n                    name={name}\n                    width={width}\n                    height={height}\n                    value={selectionValue}\n                    params={selectionParams}\n                    onChange={onSelectionChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<AreaStateProps, AreaOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<AreaActionProps, AreaOwnProps> = {};\n\nexport const Area = connect<AreaStateProps, AreaActionProps, AreaOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(AreaComponent);","import * as React from \"react\";\nimport * as classNames from \"classnames\";\n\nexport interface InputTextProps {\n    onChange?(value: string): void\n\n    onFocus?()\n    onBlur?()\n\n    className?: string\n\n    value: string\n}\n\nexport const InputText: React.FC<InputTextProps> = ({onChange, onFocus, onBlur, value, className}) => {\n\n    const changeHandler = e => {\n        onChange && onChange(e.target.value)\n    };\n\n    return (\n        <input\n            className={classNames(className, \"input-text\")}\n            type=\"text\"\n            value={value}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            onChange={changeHandler}/>\n    );\n};","import * as React from \"react\";\nimport {Button, ButtonEventData, ButtonProps} from \"./Button\";\nimport * as classNames from \"classnames\";\n\nexport interface ButtonSelectEventData extends ButtonEventData {\n    selected?: boolean\n}\n\nexport interface ButtonSelectProps extends ButtonProps {\n    selected?: boolean\n\n    onClick?(data?: ButtonSelectEventData)\n\n    onMouseDown?(data?: ButtonSelectEventData)\n    onMouseUp?(data?: ButtonSelectEventData)\n}\n\nexport const ButtonSelect: React.FC<ButtonSelectProps> = ({className, selected, onClick, onMouseDown, onMouseUp, ...props}) => {\n\n    return (\n        <Button\n            {...props}\n            onClick={data => onClick && onClick({...data, selected})}\n            onMouseDown={data => onMouseDown && onMouseDown({...data, selected})}\n            onMouseUp={data => onMouseUp && onMouseUp({...data, selected})}\n            className={classNames(\"button-select\", className, {[\"button-select-selected\"]: selected})}/>\n    );\n};","// Which HTML element is the target of the event\nlet curtop;\nfunction mouseTarget(e) {\n    var targ;\n    if (!e) var e = window.event as any;\n    if (e.target) targ = e.target;\n    else if (e.srcElement) targ = e.srcElement;\n    if (targ.nodeType == 3) // defeat Safari bug\n        targ = targ.parentNode;\n    return targ;\n}\n\n// Mouse position relative to the document\n// From http://www.quirksmode.org/js/events_properties.html\nfunction mousePositionDocument(e) {\n    var posx = 0;\n    var posy = 0;\n    if (!e) {\n        var e = window.event as any;\n    }\n    if (e.pageX || e.pageY) {\n        posx = e.pageX;\n        posy = e.pageY;\n    }\n    else if (e.clientX || e.clientY) {\n        posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n    return {\n        x : posx,\n        y : posy\n    };\n}\n\n// Find out where an element is on the page\n// From http://www.quirksmode.org/js/findpos.html\nfunction findPos(obj) {\n    var curleft = curtop = 0;\n    if (obj.offsetParent) {\n        do {\n            curleft += obj.offsetLeft;\n            curtop += obj.offsetTop;\n        } while (obj = obj.offsetParent);\n    }\n    return {\n        left : curleft,\n        top : curtop\n    };\n}\n\n// Mouse position relative to the element\n// not working on IE7 and below\nexport function mousePositionElement(e) {\n    var mousePosDoc = mousePositionDocument(e);\n    var target = mouseTarget(e);\n    var targetPos = findPos(target);\n    var posx = mousePosDoc.x - targetPos.left;\n    var posy = mousePosDoc.y - targetPos.top;\n    return {\n        x : posx,\n        y : posy\n    };\n}","import * as React from \"react\";\nimport * as keyboardjs from \"keyboardjs\";\n\nexport interface KeyProps {\n    keys: string | string[]\n\n    onPress?(e?: any, keys?: string | string[])\n\n    onRelease?(e?: any, keys?: string | string[])\n}\n\nexport interface KeyState {\n    keys: string\n}\n\nexport class Key extends React.PureComponent<KeyProps, KeyState> {\n\n    // state = {\n    //     keys: null\n    // };\n\n    handlePress = e => {\n        e.preventRepeat();\n        const {onPress, keys} = this.props;\n        onPress && onPress(e, keys)\n    };\n\n    handleRelease = e => {\n        const {onRelease, keys} = this.props;\n        onRelease && onRelease(e, keys)\n    };\n\n    // static getDerivedStateFromProps(props, state) {\n    //     if (props.keys !== state.keys) {\n    //         return {keys: props.keys};\n    //     }\n    //     return;\n    // }\n\n    componentDidMount() {\n        const {keys} = this.props;\n        console.log(this.props);\n        keyboardjs.bind(keys, this.handlePress, this.handleRelease)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.keys !== this.props.keys) {\n            keyboardjs.unbind(prevProps.keys, this.handlePress, this.handleRelease);\n            keyboardjs.bind(this.props.keys, this.handlePress, this.handleRelease);\n        }\n    }\n\n    componentWillUnmount() {\n        keyboardjs.unbind(this.props.keys, this.handlePress, this.handleRelease);\n    }\n\n    render() {\n        console.log(\"keys render\", this.props.keys);\n        return <></>;\n    }\n}","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect, ButtonSelectProps, ButtonSelectEventData} from \"./ButtonSelect\";\nimport {Key} from \"./Key\";\nimport {mousePositionElement} from \"../../utils/mouse\";\nimport {range} from \"d3-array\";\n\nconst DEFAULT_WIDTH = 70;\nconst defaultGetText = value => value.toFixed(1);\n\nexport const ValueD = {\n    VerticalLinear: (step: number) => (oldValue: any, dx: number, dy) => oldValue - dy / step,\n};\n\nexport interface ButtonNumberEventData extends ButtonSelectEventData {\n}\n\nexport interface ButtonNumberProps extends ButtonSelectProps {\n\n    width?: number\n    precision?: number\n\n    text?: string\n\n    getText?(value?: any): string\n\n    range?: [number, number]\n\n    shortcut?: string | string[]\n\n\n    valueD?(oldValue: any, dx: number, dy: number): any\n\n    onChange?(data?: ButtonNumberEventData)\n\n    onMouseDown?(data?: ButtonNumberEventData)\n\n    onMouseUp?(data?: ButtonNumberEventData)\n\n    onClick?(data?: ButtonNumberEventData)\n\n    onPress?(data?: ButtonNumberEventData)\n\n    onRelease?(data?: ButtonNumberEventData)\n\n\n    changeFunctionId?: string\n    changingStartValue?: number\n    amplitude?: number\n\n}\n\nexport interface ButtonNumberState {\n    value?: any\n    startPoint: [number, number]\n    startValue?: any\n    changing: boolean\n}\n\nexport class ButtonNumber extends React.Component<ButtonNumberProps, ButtonNumberState> {\n\n    constructor(props) {\n        super(props);\n\n        const {range} = props;\n\n        this.state = {\n            value: props.value || range[0],\n            startPoint: null,\n            startValue: null,\n            changing: false,\n        };\n\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.value !== this.state.value\n            || nextProps.changingStartValue !== this.props.changingStartValue\n            || nextProps.amplitude !== this.props.amplitude\n            || nextProps.changeFunctionId !== this.props.changeFunctionId\n            || nextProps.shortcut !== this.props.shortcut\n            || nextProps.className !== this.props.className;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            ...(!prevState.startPoint && nextProps.value !== prevState.value ? {\n                value: nextProps.value\n            } : {}),\n        };\n    }\n\n    handleDown = data => {\n\n        console.log(\"down\");\n\n\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {e} = data;\n        e.persist();\n\n        const {onMouseDown, name, selected} = this.props;\n        const {value} = this.state;\n\n        onMouseDown && onMouseDown({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: [e.clientX, e.clientY]\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handleMove);\n            document.addEventListener(\"mouseup\", this.handleUp);\n        });\n    };\n\n    handleMove = e => {\n        const {onChange, name, selected} = this.props;\n        const value = this.calcValue(e);\n\n\n        console.log(\"move\", value);\n\n        onChange && onChange({e, value, name, selected});\n\n        this.setState({value});\n    };\n\n\n    handleUp = (e) => {\n        // //  modulation\n\n\n        const {changingStartValue, onClick, onMouseUp, onChange, name, selected, width = DEFAULT_WIDTH, precision = 100, range} = this.props;\n        let value = this.calcValue(e);\n\n\n\n\n\n        const one = (range[1] - range[0]) / precision;\n//!changingStartValue &&\n        if (Math.abs(value - this.state.startValue) < one) {\n\n            const y = mousePositionElement(e).x;\n            console.log(\"11111\", y, width / 2, this.state.startValue);\n            value = Math.min(Math.max(\n                this.state.startValue + (y > width / 2 ? one : -one)\n                , range[0]), range[1]);\n\n            console.log(value, \"=\", this.state.startValue, \"+\", (y > width / 2 ? 1 : -1));\n            onChange && onChange({e, value, name, selected});\n        } else {\n            onMouseUp && onMouseUp({e, value, name, selected});\n\n            onClick && onClick({value, name, e, selected});\n\n        }\n\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handleMove);\n            document.removeEventListener(\"mouseup\", this.handleUp);\n        });\n\n\n\n    };\n\n\n    handlePress = e => {\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {onPress, name, selected} = this.props;\n        const {value} = this.state;\n\n        onPress && onPress({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: null\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    handlePressed = e => {\n        if (!this.state.startPoint) {\n            this.setState({\n                startPoint: [e.clientX, e.clientY]\n            });\n        } else {\n            const {onChange, name, selected} = this.props;\n            const value = this.calcValue(e);\n\n            onChange && onChange({e, value, name, selected});\n\n            this.setState({value});\n        }\n    };\n\n    handleRelease = e => {\n        const {onRelease, name, selected} = this.props;\n        const {value} = this.state;\n\n        onRelease && onRelease({value, name, e, selected});\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    calcValue = e => {\n        console.log(this.state.startValue);\n        const {range, valueD = ValueD.VerticalLinear(5)} = this.props;\n\n        let nextValue = valueD(this.state.startValue, e.clientX - this.state.startPoint[0], e.clientY - this.state.startPoint[1]);\n        nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n        return nextValue;\n    };\n\n    render() {\n        const {changingStartValue, changeFunctionId, amplitude, range, width = DEFAULT_WIDTH, className, getText = defaultGetText, text, shortcut, ...otherProps} = this.props;\n        const {value = 0, startValue} = this.state;\n\n        console.log(\"number button render\", getText(value));\n\n\n        // console.log(changingStartValue, amplitude);\n\n        const startVPerc = (changingStartValue / (range[1] - range[0]));\n\n        const ampWidth = (Math.min(startVPerc, amplitude) + Math.min(1 - startVPerc, amplitude));\n\n        console.log(startVPerc, amplitude, Math.min(startVPerc, amplitude), Math.min(startVPerc * (-1) + 100, amplitude))\n        return (\n            <ButtonSelect\n                {...otherProps}\n                className={classNames(\"button-number\", className, {\n                    [\"button-number-active\"]: !!startValue,\n                })}\n                width={width}\n                onMouseDown={this.handleDown}>\n                <div\n                    className={\"button-number-value\"}\n                    style={{width: (value - range[0]) / (range[1] - range[0]) * 100 + \"%\"}}>\n                    {getText ? getText(value) : text}\n                </div>\n                {changingStartValue && amplitude &&\n                <div\n                    className={\"button-number-amplitude\"}\n                    style={{\n                        width: ampWidth * 100 + \"%\",\n                        left: `calc(${(Math.max(startVPerc - amplitude, 0)) * 100}%)`\n                    }}>\n                    <span>\n                    {changeFunctionId}\n                    </span>\n                </div>}\n                {shortcut &&\n                <Key\n                    keys={shortcut}\n                    onPress={this.handlePress}\n                    onRelease={this.handleRelease}/>}\n            </ButtonSelect>\n        );\n    }\n}","import {ActivateValueChangingAction, DeactivateValueChangingAction, SetValueInChangingListAction} from \"./types\";\nimport {toStartValue} from \"../change/actions\";\nimport {AppState} from \"../index\";\n\n\n// todo typescript\nexport enum EChangingValuesAction {\n    SET_VALUE_IN_CHANGING_LIST = \"changing-values/set-value\",\n    SET_START_VALUE = \"changing-values/set-start-value\",\n\n    ACTIVATE_VALUE_CHANGING = \"changing-values/activate\",\n    DEACTIVATE_VALUE_CHANGING = \"changing-values/deactivate\",\n}\n\nexport const setValueInChangingList =\n    (path: string, changeFunctionId: string, range: [number, number], startValue: number) => (dispatch) => {\n        dispatch(toStartValue(path));\n        dispatch({\n            type: EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST,\n            path, changeFunctionId, range, startValue\n        })\n    };\n\nexport const setStartValue =\n    (path: string, startValue: number) => (dispatch) => {\n        dispatch({\n            type: EChangingValuesAction.SET_START_VALUE,\n            path, startValue\n        })\n    };\n\nexport const activateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch({type: EChangingValuesAction.ACTIVATE_VALUE_CHANGING, path});\n    }\n};\n\nexport const deactivateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch(toStartValue(path));\n        dispatch({type: EChangingValuesAction.DEACTIVATE_VALUE_CHANGING, path});\n    }\n};","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect} from \"./ButtonSelect\";\nimport {ButtonEventData} from \"./Button\";\n\nexport interface SelectButtonsEventData extends ButtonEventData {\n    item: any\n    items: any[]\n}\n\nexport interface SelectButtonsProps {\n    className?: string\n    name?: string\n    items: any[]\n    value?: any\n\n    nullAble?: boolean\n\n    br?: number\n\n    onChange?(data?: SelectButtonsEventData)\n\n    getValue?(item?: any)\n\n    getText?(item?: any)\n}\n\nexport const defaultGetValue = ({value}) => value;\nexport const defaultGetText = ({text}) => text;\n\nexport class SelectButtons extends React.PureComponent<SelectButtonsProps> {\n\n\n    handleClick = ({value: item, selected, e}) => {\n        const {name, items, onChange, getValue = defaultGetValue, nullAble, value: oldValue} = this.props;\n        let value = getValue(item);\n\n        if (nullAble && oldValue === value) {\n            value = null\n        }\n\n        onChange && onChange({\n            value,\n            e, item, items, name\n        });\n    };\n\n    render() {\n        const {className, items, value, name, getValue = defaultGetValue, getText = defaultGetText, br} = this.props;\n\n        console.log(\"select buttons render\", name);\n\n        return (\n            <span className={classNames(className, \"select-buttons\")}>\n            {items.map((item, index) => (\n                <>\n                    {!!br && !!index && !(index % br) && <br/>}\n                    <ButtonSelect\n                        value={item}\n                        key={getValue(item)}\n                        selected={getValue(item) === value}\n                        onMouseUp={(e) => {\n                            console.log(e)\n                        }}\n                        onClick={this.handleClick}>\n                        {getText(item)}\n                    </ButtonSelect>\n                </>\n            ))}</span>\n        );\n    }\n}","import * as React from \"react\";\nimport {defaultGetText, SelectButtons, SelectButtonsProps} from \"./SelectButtons\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/selectDrop.scss\"\nimport {Button} from \"./Button\";\n\nexport interface SelectDropProps extends SelectButtonsProps {\n\n}\n\nexport interface SelectDropState {\n\n}\n\nexport class SelectDrop extends React.PureComponent<SelectDropProps, SelectDropState> {\n\n    render() {\n        const {className, ...props} = this.props;\n        const {value, getText = defaultGetText} = props;\n        console.log(\"select drop render\", props.name, value);\n\n        return (\n            <div className={classNames(className, \"select-drop\")}>\n                <Button className={\"select-drop-value\"}>\n                    {value || \"null\"}\n                </Button>\n                <SelectButtons {...props} className={\"select-drop-items\"}/>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/hover-hideable.scss\";\n\nexport interface HoverHideableProps {\n    children?: React.ReactNode\n    button?: React.ReactNode\n    className?: string\n\n}\n\nexport interface HoverHideableState {\n\n}\n\nexport class HoverHideable extends React.PureComponent<HoverHideableProps, HoverHideableState> {\n\n    render() {\n        const {children, button, className} = this.props;\n        return (\n            <div className={classNames(\"hover-hideable\", className)}>\n                {button}\n                <div className={\"hover-hideable-hidden-part\"}>{children}</div>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {InputText} from \"./InputText\";\nimport * as keyboardjs from \"keyboardjs\";\nimport \"../../styles/inputShortcut.scss\";\n\nexport interface ShortcutInputProps {\n    onChange(value: string)\n\n    value: string\n\n\n}\n\nexport interface ShortcutInputState {\n\n}\n\nexport class ShortcutInput extends React.PureComponent<ShortcutInputProps, ShortcutInputState> {\n\n    handleChange = (e) => {\n        this.props.onChange(e.key === \"Backspace\" ? null : e.key);\n    };\n\n    handleFocus = () => {\n        keyboardjs.bind(\"\", this.handleChange)\n    };\n    handleBlur = () => {\n        keyboardjs.unbind(\"\", this.handleChange)\n    };\n\n\n    render() {\n        const {value} = this.props;\n        return (\n            <InputText\n                className={\"shortcut-input\"}\n                value={value}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n                onChange={() => {return;\n                }}/>\n        );\n    }\n}","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport * as classNames from \"classnames\";\nimport {ButtonNumber, ButtonNumberProps} from \"./ButtonNumber\";\nimport {objectToSelectItems} from \"../../utils/utils\";\nimport {ChangeFunctionsState} from \"../../store/changeFunctions/reducer\";\nimport {Button} from \"./Button\";\nimport {SelectDrop} from \"./SelectDrop\";\nimport {\n    activateValueChanging,\n    deactivateValueChanging,\n    setValueInChangingList,\n    setStartValue\n} from \"../../store/changingValues/actions\";\nimport {ChangingValuesState} from \"../../store/changingValues/reducer\";\nimport {toStartValue} from \"../../store/change/actions\";\nimport \"../../styles/buttonNumberCF.scss\";\nimport {SelectButtons} from \"./SelectButtons\";\nimport {HoverHideable} from \"./HoverHideable\";\nimport {ShortcutInput} from \"./ShortcutInput\";\n\nexport interface ButtonNumberCFStateProps {\n    changeFunctions: ChangeFunctionsState\n    changingValues: ChangingValuesState\n}\n\nexport interface ButtonNumberCFActionProps {\n    setValueInChangingList(\n        path: string,\n        changeFunctionId: string,\n        range: [number, number],\n        startValue: number)\n\n    deactivateValueChanging(path: string)\n\n    activateValueChanging(path: string)\n\n    toStartValue(path: string)\n\n    setStartValue(path: string, startValue: number)\n}\n\nexport interface ButtonNumberCFOwnProps extends ButtonNumberProps {\n    path: string\n}\n\nexport interface ButtonNumberCFProps extends ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps {\n\n}\n\nexport interface ButtonNumberCFState {\n    changeFunctionsItems: any[],\n    changeFunctions: ChangeFunctionsState\n    active: boolean\n    shortcut: string\n}\n\nclass ButtonNumberCFComponent extends React.PureComponent<ButtonNumberCFProps, ButtonNumberCFState> {\n\n    state = {\n        changeFunctionsItems: [],\n        changeFunctions: null,\n        active: false,\n        shortcut: null\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.changeFunctions !== state.changeFunctions) {\n            return {\n                changeFunctions: props.changeFunctions,\n                changeFunctionsItems: objectToSelectItems(props.changeFunctions, ({id}) => id, ({id}) => id)\n            }\n        }\n        return null;\n    }\n\n    handleCFChange = ({value: changeFunctionId}) => {\n        const {setValueInChangingList, path, range, value} = this.props;\n        setValueInChangingList(path, changeFunctionId, range, value);\n    };\n\n    handleChange = (data) => {\n\n        this.props.onChange(data);\n\n        const {setStartValue, path, value} = this.props;\n        setStartValue(path, value);\n    };\n\n    handleStartManualChanging = () => {\n        const {deactivateValueChanging, path} = this.props;\n        deactivateValueChanging(path);\n        this.setState({active: true});\n    };\n\n    handleStopManualChanging = () => {\n        const {activateValueChanging, path} = this.props;\n        activateValueChanging(path);\n        this.setState({active: false});\n    };\n\n    handleShortcutChange = shortcut => this.setState({shortcut});\n\n    render() {\n        const {changeFunctions, changingValues, path, ...buttonNumberProps} = this.props;\n\n        const {onChange, onMouseDown, onMouseUp, onPress, onRelease, ...othersButtonNumberProps} = buttonNumberProps;\n\n        console.log(\"render b cf\");\n\n        const changingValueData = changingValues[path];\n        const changingStartValue = changingValueData && changingValueData.startValue;\n        const changeFunctionId = changingValueData && changingValues[path].changeFunctionId;\n        const changingAmplitude = changingValueData && changeFunctions[changeFunctionId].params.a;\n\n        return (\n            <HoverHideable\n                className={\"button-number-cf\"}\n                button={\n                    <ButtonNumber\n                        {...othersButtonNumberProps}\n\n                        shortcut={this.state.shortcut}\n\n                        className={classNames('button-number-cf-value', {\n                            [\"button-number-cf-value-active\"]: this.state.active\n                        })}\n\n                        changeFunctionId={changeFunctionId}\n                        changingStartValue={changingStartValue}\n                        amplitude={changingAmplitude}\n\n                        onChange={this.handleChange}\n                        onMouseDown={this.handleStartManualChanging}\n                        onPress={this.handleStartManualChanging}\n                        onMouseUp={this.handleStopManualChanging}\n                        onRelease={this.handleStopManualChanging}/>\n                }>\n                {!this.state.active &&\n                <HoverHideable\n                    className={\"button-number-cf-settings\"}\n                    button={<div className=\"button-number-cf-settings-handler\"><div></div></div>}>\n\n                    <ShortcutInput\n                        value={this.state.shortcut}\n                        onChange={this.handleShortcutChange}/>\n                    <SelectDrop\n                        nullAble\n                        className={\"button-number-cf-select\"}\n                        value={changingValues[this.props.path] && changingValues[this.props.path].changeFunctionId}\n                        onChange={this.handleCFChange}\n                        items={this.state.changeFunctionsItems}/>\n                </HoverHideable>\n                }\n            </HoverHideable>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ButtonNumberCFStateProps, {}, AppState> = state => ({\n    changeFunctions: state.changeFunctions,\n    changingValues: state.changingValues\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ButtonNumberCFActionProps, ButtonNumberCFOwnProps> = {\n    setValueInChangingList, deactivateValueChanging, activateValueChanging, toStartValue, setStartValue\n};\n\nexport const ButtonNumberCF = connect<ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ButtonNumberCFComponent);","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {Canvas, CanvasProps} from \"../_shared/Canvas\";\nimport \"../../styles/mask.scss\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {LineState} from \"../../store/line/reducer\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {startDrawChanging, stopDrawChanging} from \"../../store/changing/actions\";\nimport get from \"lodash/get\";\nimport {ELineCompositeOperation, ELineType} from \"../../store/line/types\";\nimport {EBrushType} from \"../../store/brush/types\";\nimport {MaskParams} from \"../../store/patterns/types\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\n\nexport interface MaskDrawStateProps {\n    brush: BrushState\n    line: LineState\n    tool: EToolType\n}\n\nexport interface MaskDrawActionProps {\n    startChanging()\n\n    stopChanging()\n}\n\nexport interface MaskDrawOwnProps extends CanvasProps {\n    params?: MaskParams\n    name: any\n\n    onParamsChange(params: MaskParams)\n}\n\nexport interface MaskDrawProps extends MaskDrawStateProps, MaskDrawActionProps, MaskDrawOwnProps {\n\n}\n\nexport interface MaskDrawState {\n\n}\n\nconst opacityRange = [0, 1] as [number, number];\n\nconst brush = ({e, pre, ctx, canvas}, {size, opacity, type, compositeOperation}) => {\n    ctx.fillStyle = getRandomColor();//\"black\";\n    ctx.globalAlpha = opacity;\n    ctx.globalCompositeOperation = compositeOperation;\n\n    if (type === EBrushType.Square) {\n        ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n    } else if (type === EBrushType.Circle) {\n        ctx.beginPath();\n        ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n    // else if (this.state.brush.type === EBrushType.Pattern && this.state.patterns[this.state.currentPattern]) {\n    //     const p = this.state.patterns[this.state.currentPattern].image;\n    //     const i = this.state.patterns[this.state.currentPattern].imageMasked;\n    //     ctx.drawImage(i, e.offsetX - p.width / 2, e.offsetY - p.height / 2, p.width, p.height);\n    // }\n\n    ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n    ctx.globalAlpha = 1;\n};\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nconst BLACK = \"black\";\n\nenum ECompositeOperation {\n    sourceOver = \"source-over\",\n    destinationOver = \"destination-over\",\n    destinationOut = \"destination-out\",\n}\n\nclass MaskDrawComponent extends React.PureComponent<MaskDrawProps, MaskDrawState> {\n\n    handlers = {\n        [EToolType.Brush]: {\n            [EBrushType.Square]: {\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                },\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.fillRect(e.offsetX - size / 2, e.offsetY - size / 2, size, size);\n\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                }\n            },\n            [EBrushType.Circle]: {\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {black, opacity} = this.props.params;\n                    const {size} = this.props.brush.params;\n\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                },\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.brush.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.fillStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.beginPath();\n                    ctx.arc(e.offsetX, e.offsetY, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n\n                    ctx.globalCompositeOperation = ECompositeOperation.sourceOver;\n                    ctx.globalAlpha = 1;\n                }\n            },\n        },\n        [EToolType.Line]: {\n            [ELineType.Default]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n                    ctx.strokeStyle = BLACK;\n\n                    ctx.beginPath();\n                    ctx.lineWidth = size;\n\n                    ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity} = this.props.line.params;\n                    ctx.lineTo(e.offsetX, e.offsetY);\n                    // ctx.strokeStyle = getRandomColor();\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.Interrupted]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.strokeStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n                    ctx.beginPath();\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;\n\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.InterruptedOneStroke]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size} = this.props.line.params;\n\n                    const {black, opacity} = this.props.params;\n                    ctx.strokeStyle = BLACK;\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = black\n                        ? ECompositeOperation.destinationOver\n                        : ECompositeOperation.destinationOut;\n\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;//\"green\";\n\n                    ctx.beginPath();\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                }\n            }\n        },\n    };\n\n    handleOpacityChange = ({value}) =>\n        this.props.onParamsChange({[\"opacity\"]: value});\n\n    handleBlackChange = (data) =>\n        this.props.onParamsChange({[\"black\"]: !data.selected});\n\n    render() {\n\n        const {tool, startChanging, stopChanging, params, name} = this.props;\n\n        const getType = getTypeField[tool];\n        const type = getType ? getType(this.props) : 0;\n        const handlersByTool = this.handlers[tool];\n        const handlers = handlersByTool && handlersByTool[type];\n\n        return (\n            <>\n                <div>\n                    <ButtonNumberCF\n                        path={`patterns.${name}.mask.params.opacity`}\n                        name={\"opacity\"}\n                        range={opacityRange}\n                        value={params.opacity}\n                        onChange={this.handleOpacityChange}/>\n                    <div>\n                        <ButtonSelect\n                            name={\"black\"}\n                            selected={params.black}\n                            onClick={this.handleBlackChange}/>\n                    </div>\n                </div>\n                <Canvas\n                    className={\"maskCanvas\"}\n                    onDown={startChanging}\n                    onUp={stopChanging}\n                    drawProcess={handlers && handlers.draw}\n                    clickProcess={handlers && handlers.click}\n                    releaseProcess={handlers && handlers.release}\n                    {...this.props}/>\n            </>\n        );\n    }\n}\n\nconst getTypeField = {\n    [EToolType.Line]: props => get(props, \"line.params.type\"),\n    [EToolType.Brush]: props => get(props, \"brush.params.type\"),\n};\n\nconst mapStateToProps: MapStateToProps<MaskDrawStateProps, MaskDrawOwnProps, AppState> = state => ({\n    brush: state.brush,\n    line: state.line,\n    tool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<MaskDrawActionProps, MaskDrawOwnProps> = {\n    startChanging: startDrawChanging, stopChanging: stopDrawChanging\n};\n\nexport const MaskDraw = connect<MaskDrawStateProps, MaskDrawActionProps, MaskDrawOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(MaskDrawComponent);","import * as React from \"react\";\nimport {Button} from \"../_shared/Button\";\nimport \"../../styles/pattern.scss\";\nimport {MaskParams, PatternConfig, SelectionState, StoreState} from \"../../store/patterns/types\";\nimport {HistoryState} from \"../../store/patterns/types\";\nimport {HistoryControls} from \"./HistoryControls\";\nimport {SelectionValue} from \"../../utils/types\";\nimport {Area} from \"../Area\";\nimport {InputNumber} from \"../_shared/InputNumber\";\nimport {InputText} from \"../_shared/InputText\";\nimport {MaskDraw} from \"../Area/MaskDraw\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\nimport {ButtonNumber} from \"../_shared/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {Canvas} from \"../_shared/Canvas\";\n\nexport interface PatternWindowProps {\n    id: number\n    imageValue: ImageData\n    maskValue?: ImageData\n    maskParams?: MaskParams\n    height: number\n    width: number\n\n    connected?: string\n\n    config: PatternConfig\n    history: HistoryState\n    store: StoreState\n    selection: SelectionState\n\n    resultImage: HTMLCanvasElement\n\n    onImageChange(id: number, imageData: ImageData)\n\n    onMaskChange(id: number, imageData: ImageData)\n\n    onMaskParamsChange(id: number, params: MaskParams)\n\n    onSelectionChange(id: number, selectionValue: SelectionValue)\n\n    onRemove(id: number)\n\n    onUndo(id: number)\n\n    onRedo(id: number)\n\n    onSetWidth(id: number, width: number)\n\n    onSetHeight(id: number, height: number)\n\n    onCreateRoom(id: number, name: string)\n\n    onConfigChange(id: number, value: PatternConfig)\n}\n\nexport interface PatternWindowState {\n    roomName?: string\n}\n\nconst inputNumberProps = {min: 0, max: 500, step: 1, delay: 1000, notZero: true};\n\nexport class Pattern extends React.PureComponent<PatternWindowProps, PatternWindowState> {\n\n    state = {\n        roomName: \"222\"\n    };\n\n\n    handleImageChange = imageData => this.props.onImageChange(this.props.id, imageData);\n\n    handleMaskChange = imageData => this.props.onMaskChange(this.props.id, imageData);\n\n    handleSelectionChange = value =>\n        this.props.onSelectionChange(this.props.id, value);\n\n    handleClearSelection = () =>\n        this.props.onSelectionChange(this.props.id, []);\n\n    handleRemove = () => this.props.onRemove(this.props.id);\n\n    handleUndo = () => this.props.onUndo(this.props.id);\n\n    handleRedo = () => this.props.onRedo(this.props.id);\n\n    handleSetWidth = width => this.props.onSetWidth(this.props.id, width);\n\n    handleSetHeight = height => this.props.onSetHeight(this.props.id, height);\n\n\n    handleMaskParamsChange = (params: MaskParams) =>\n        this.props.onMaskParamsChange(this.props.id, params);\n\n    handleCreateRoom = () => {\n        this.props.onCreateRoom(this.props.id, this.state.roomName);\n    };\n\n    handleConfigToggle = (data) => {\n        this.props.onConfigChange(this.props.id, {\n            ...this.props.config,\n            [data.name]: !data.selected\n        })\n    };\n\n    render() {\n        const {resultImage, connected, imageValue, maskValue, maskParams, height, width, id, config, history, store, selection} = this.props;\n\n        console.log(\"pattern render \", id, resultImage);\n        return (\n            <div className=\"pattern\">\n                <div className={\"areas\"}>\n                    <Area\n                        name={id}\n                        width={width}\n                        height={height}\n\n                        imageValue={imageValue}\n\n                        selectionValue={selection.value}\n                        selectionParams={selection.params}\n\n                        onImageChange={this.handleImageChange}\n                        onSelectionChange={this.handleSelectionChange}/>\n                    {config.mask &&\n                    <MaskDraw\n                        params={maskParams}\n                        value={maskValue}\n                        name={id}\n                        width={width}\n                        height={height}\n                        onParamsChange={this.handleMaskParamsChange}\n                        onChange={this.handleMaskChange}/>}\n                    {/*{resultImage instanceof HTMLCanvasElement ? resultImage : \"\"}*/}\n                </div>\n                <div className=\"pattern-controls\">\n                    <Button onClick={this.handleRemove}>del</Button> {id}\n\n                    {connected}\n                    <InputText\n                        value={this.state.roomName}\n                        onChange={roomName => this.setState({roomName})}/>\n                    <Button\n                        onClick={this.handleCreateRoom}/>\n\n\n                    <InputNumber\n                        onChange={this.handleSetWidth}\n                        value={width}\n                        {...inputNumberProps}/>\n                    <InputNumber\n                        onChange={this.handleSetHeight}\n                        value={height}\n                        {...inputNumberProps}/>\n\n                    {config.history &&\n                    <HistoryControls\n                        history={history.value}\n                        onUndo={this.handleUndo}\n                        onRedo={this.handleRedo}/>}\n\n                    {selection.value && selection.value.length &&\n                    <Button\n                        onClick={this.handleClearSelection}>clear</Button>}\n\n\n                    <div>\n                        <ButtonSelect\n                            name={\"mask\"}\n                            selected={config.mask}\n                            onClick={this.handleConfigToggle}>mask</ButtonSelect>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}","import {EToolType, SetCurrentToolAction} from \"./types\";\n\nexport enum EToolAction {\n    SET_CURRENT = \"tools/set-current\"\n}\n\nexport const setCurrentTool = (tool: EToolType): SetCurrentToolAction =>\n    ({type: EToolAction.SET_CURRENT, tool});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../store\";\nimport {Button} from \"./_shared/Button\";\nimport {\n    addPattern,\n    redo,\n    removePattern,\n    undo,\n    updateImage,\n    updateSelection,\n    setHeight,\n    setWidth,\n    createRoom, editConfig, updateMask, setMaskParams\n} from \"../store/patterns/actions\";\nimport {EPatternType, MaskParams} from \"../store/patterns/types\";\nimport {Pattern} from \"./Pattern/\";\nimport {PatternConfig} from \"../store/patterns/types\";\nimport {SelectionValue} from \"../utils/types\";\n\nexport interface PatternsStateProps {\n    patterns: any\n}\n\nexport interface PatternsActionProps {\n    addPattern(config?: PatternConfig)\n\n    removePattern(id: number)\n\n    updateImage(id: number, imageData: ImageData)\n\n    updateMask(id: number, imageData: ImageData)\n\n    setMaskParams(id: number, params: MaskParams)\n\n    updateSelection(id: number, value: SelectionValue)\n\n    redo(id: number)\n\n    undo(id: number)\n\n    setWidth(id: number, value: number)\n\n    setHeight(id: number, value: number)\n\n    editConfig(id: number, config: PatternConfig)\n\n    createRoom(id: number, name: string)\n}\n\nexport interface PatternsOwnProps {\n\n}\n\nexport interface PatternsProps extends PatternsStateProps, PatternsActionProps, PatternsOwnProps {\n\n}\n\nexport interface PatternsState {\n\n}\n\nclass PatternsComponent extends React.PureComponent<PatternsProps, PatternsState> {\n\n    handleAddClick = () => this.props.addPattern({history: true, selection: true});\n\n    render() {\n        const {createRoom, removePattern, patterns, updateImage, updateMask, setMaskParams, updateSelection, undo, redo, setWidth, setHeight,editConfig } = this.props;\n        return (\n            <>\n                {patterns.map(({id, current, mask, config, history, store, selection, connected, resultImage}) => {\n                    return (\n                        <Pattern\n                            key={id}\n                            id={id}\n                            config={config}\n\n                            connected={connected}\n\n                            history={history}\n                            store={store}\n                            selection={selection}\n                            imageValue={current ? current.imageData : null}\n                            maskValue={mask ? mask.value.imageData : null}\n                            resultImage={resultImage}\n                            maskParams={mask ? mask.params : null}\n                            width={current ? current.width : null}\n                            height={current ? current.height : null}\n\n                            onUndo={undo}\n                            onRedo={redo}\n                            onImageChange={updateImage}\n                            onMaskChange={updateMask}\n                            onMaskParamsChange={setMaskParams}\n                            onSelectionChange={updateSelection}\n                            onRemove={removePattern}\n                            onSetWidth={setWidth}\n                            onSetHeight={setHeight}\n                            onCreateRoom={createRoom}\n                            onConfigChange={editConfig}/>\n                    );\n                })}\n                <Button onClick={this.handleAddClick}>add</Button>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<PatternsStateProps, {}, AppState> = state => ({\n    patterns: Object.values(state.patterns)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<PatternsActionProps, PatternsOwnProps> = {\n    setMaskParams, createRoom, addPattern, removePattern, updateImage, updateSelection, redo, undo, setWidth, setHeight, editConfig, updateMask\n};\n\nexport const Patterns = connect<PatternsStateProps, PatternsActionProps, PatternsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(PatternsComponent);","import * as io from \"socket.io-client\";\n\n\nexport const createRoom_s = (name) => {\n    const socket = io(\"http://localhost:3002\", {\n        path: '/room',\n        query: {name}\n    });\n    return socket;\n};","import {BrushParams, SetBrushParamsAction} from \"./types\";\n\nexport enum EBrushAction {\n    SET_PARAMS = \"brush/set-params\",\n}\n\nexport const setBrushParams = (params: BrushParams): SetBrushParamsAction =>\n    ({type: EBrushAction.SET_PARAMS, params});","import {createSelector} from \"reselect\";\nimport {objectToSelectItems} from \"../../utils/utils\";\n\nconst getPatternsState = state => state.patterns;\n\n\nexport const getPatternsSelectItems = createSelector(\n    [getPatternsState],\n    patterns => objectToSelectItems(patterns, (value, key) => +key));","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {setBrushParams} from \"../../store/brush/actions\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {createSelector} from \"reselect\";\n\nexport interface BrushStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: BrushParams\n    patternsSelectItems: any[]\n}\n\nexport interface BrushActionProps {\n    setBrushParams(params: BrushParams)\n}\n\nexport interface BrushOwnProps {\n\n}\n\nexport interface BrushProps extends BrushStateProps, BrushActionProps, BrushOwnProps {\n\n}\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass BrushComponent extends React.PureComponent<BrushProps> {\n\n    handleSizeChange = ({value}) => {\n        console.log(value);\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            size: value\n        })\n    };\n\n    handlePatternChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            pattern: +value\n        })\n    };\n\n    handleCompositeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            compositeOperation: value\n        })\n    };\n\n    handleOpacityChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            opacity: value\n        })\n    };\n\n    handleTypeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            type: value\n        })\n    };\n\n    render() {\n\n\n        const {paramsConfig, paramsConfigMap, paramsValue, setBrushParams, patternsSelectItems} = this.props;\n\n        return (\n            <>\n                <SelectButtons\n                    value={paramsValue.type}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleTypeChange}/>\n                <br/>\n\n\n                <ButtonNumberCF\n                    path={\"brush.params.size\"}\n                    value={paramsValue.size}\n                    name={\"size\"}\n                    onChange={this.handleSizeChange}\n                    range={sizeRange}\n                    valueD={sizeValueD}/>\n\n                <ButtonNumberCF\n                    path={\"brush.params.opacity\"}\n                    value={paramsValue.opacity}\n                    name={\"opacity\"}\n                    onChange={this.handleOpacityChange}\n                    range={opacityRange}\n                    valueD={opacityValueD}/>\n                <SelectDrop\n                    value={paramsValue.compositeOperation}\n                    items={paramsConfigMap[\"compositeOperation\"].props.items}\n                    onChange={this.handleCompositeChange}/>\n\n                <br/>\n\n                {paramsValue.type === EBrushType.Pattern &&\n                <SelectButtons\n                    value={paramsValue.pattern}\n                    onChange={this.handlePatternChange}\n                    items={patternsSelectItems}/>}\n            </>\n        );\n    }\n}\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.brush.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<BrushStateProps, BrushOwnProps, AppState> = state => ({\n    paramsConfig: state.brush.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.brush.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<BrushActionProps, BrushOwnProps> = {\n    setBrushParams\n};\n\nexport const Brush = connect<BrushStateProps, BrushActionProps, BrushOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(BrushComponent);","import {LineParams, SetLineParamsAction} from \"./types\";\n\nexport enum ELineAction {\n    SET_PARAMS = \"line/set-params\",\n}\n\nexport const setLineParams = (params: LineParams): SetLineParamsAction =>\n    ({type: ELineAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ELineType, LineParams} from \"../../store/line/types\";\nimport {setLineParams} from \"../../store/line/actions\";\nimport {createSelector} from \"reselect\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {ValueD} from \"../_shared/ButtonNumber\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\n\nexport interface LineStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: LineParams\n    patternsSelectItems: any[]\n}\n\nexport interface LineActionProps {\n    setLineParams(params: LineParams)\n}\n\nexport interface LineOwnProps {\n\n}\n\nexport interface LineProps extends LineStateProps, LineActionProps, LineOwnProps {\n\n}\n\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass LineComponent extends React.PureComponent<LineProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setLineParams, paramsValue} = this.props;\n        setLineParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsConfigMap, paramsConfig, paramsValue, patternsSelectItems} = this.props;\n        return (\n            <>\n                <SelectButtons\n                    br={3}\n                    value={paramsValue.type}\n                    name={\"type\"}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleParamChange}/>\n                <br/>\n\n                <ButtonNumberCF\n                    path={\"line.params.size\"}\n                    value={paramsValue.size}\n                    name={\"size\"}\n                    onChange={this.handleParamChange}\n                    range={sizeRange}\n                    valueD={sizeValueD}/>\n\n                <ButtonNumberCF\n                    path={\"line.params.opacity\"}\n                    value={paramsValue.opacity}\n                    name={\"opacity\"}\n                    onChange={this.handleParamChange}\n                    range={opacityRange}\n                    valueD={opacityValueD}/>\n                <SelectDrop\n                    name={\"compositeOperation\"}\n                    value={paramsValue.compositeOperation}\n                    items={paramsConfigMap[\"compositeOperation\"].props.items}\n                    onChange={this.handleParamChange}/>\n\n                <br/>\n\n                {paramsValue.type === ELineType.Pattren &&\n                <SelectButtons\n                    name={\"pattern\"}\n                    value={paramsValue.pattern}\n                    onChange={this.handleParamChange}\n                    items={patternsSelectItems}/>}\n            </>\n        );\n    }\n};\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.line.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<LineStateProps, LineOwnProps, AppState> = state => ({\n    paramsConfig: state.line.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.line.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<LineActionProps, LineOwnProps> = {\n    setLineParams\n};\n\nexport const Line = connect<LineStateProps, LineActionProps, LineOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(LineComponent);","import {SelectToolParams, SetSelectToolParamsAction} from \"./types\";\n\nexport enum ESelectToolAction {\n    SET_PARAMS = \"select/set-params\",\n}\n\nexport const setSelectToolParams = (params: SelectToolParams): SetSelectToolParamsAction =>\n    ({type: ESelectToolAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {setSelectToolParams} from \"../../store/selectTool/actions\";\nimport {ESelectionMode, SelectToolParams} from \"../../store/selectTool/types\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {createSelector} from \"reselect\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ButtonNumber, ValueD} from \"../_shared/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\n\nexport interface SelectToolStateProps {\n\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: object\n    paramsValue: SelectToolParams\n}\n\nexport interface SelectToolActionProps {\n    setSelectToolParams(params: SelectToolParams)\n}\n\nexport interface SelectToolOwnProps {\n\n}\n\nexport interface SelectToolProps extends SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps {\n\n}\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass SelectToolComponent extends React.PureComponent<SelectToolProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setSelectToolParams, paramsValue} = this.props;\n        setSelectToolParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsValue, paramsConfigMap, paramsConfig, setSelectToolParams} = this.props;\n        const {mode, curveType, ...otherParams} = paramsConfigMap;\n        return (\n            <>\n                <SelectDrop\n                    name=\"mode\"\n                    value={paramsValue.mode}\n                    items={mode.props.items}\n                    onChange={this.handleParamChange}/>\n                {paramsValue.mode === ESelectionMode.Points &&\n                <SelectDrop\n                    name=\"curveType\"\n                    value={paramsValue.curveType}\n                    items={curveType.props.items}\n                    onChange={this.handleParamChange}/>}\n\n                {Object.values(otherParams).map(({name, props}) => (\n                    <ButtonNumberCF\n                        value={paramsValue[name]}\n                        name={name}\n                        path={`selectTool.params.${name}`}\n                        range={props.range}\n                        onChange={this.handleParamChange}\n                        valueD={opacityValueD}/>\n                ))}\n\n            </>\n        );\n    }\n}\n\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.selectTool.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<SelectToolStateProps, SelectToolOwnProps, AppState> = state => ({\n    paramsConfig: state.selectTool.paramsConfig,\n    paramsValue: state.selectTool.params,\n    paramsConfigMap: paramsConfigMapSelector(state),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<SelectToolActionProps, SelectToolOwnProps> = {\n    setSelectToolParams\n};\n\nexport const SelectTool = connect<SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(SelectToolComponent);","import {handleActions} from \"redux-actions\";\n\nexport enum EFullScreenAction {\n    ON = \"fullscreen/on\",\n    OFF = \"fullscreen/off\",\n    SET = \"fullscreen/set\",\n    REVERSE = \"fullscreen/reverse\",\n}\n\nexport type FullScreenState = boolean;\n\nexport const fullscreenReducer = handleActions<FullScreenState>({\n    [EFullScreenAction.ON]: () => true,\n    [EFullScreenAction.OFF]: () => false,\n    [EFullScreenAction.SET]: (s, a) => a.value,\n    [EFullScreenAction.REVERSE]: (s) => !s,\n}, false);\n\nexport const goFullScreen = () => ({\n    type: EFullScreenAction.ON\n});\nexport const setFullScreen = (value: boolean) => ({\n    type: EFullScreenAction.SET, value\n});\nexport const reverseFullScreen = () => ({\n    type: EFullScreenAction.REVERSE\n});","import {Room} from \"./reducer\";\nimport {ConnectRoomsAction, UpdateRoomsAction} from \"./types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppState} from \"../index\";\nimport {Action} from \"redux\";\nimport {connectRooms} from \"./service\";\n\ntype ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\nexport enum ERoomsAction {\n    UPDATE_ROOMS = \"rooms/update\",\n    CONNECT_ROOMS = \"rooms/connect\",\n}\n\nexport const updateRooms = (rooms: Room[]): UpdateRoomsAction => ({\n    type: ERoomsAction.UPDATE_ROOMS,\n    rooms\n});\n\nexport const roomsConnect = (): ThunkResult<ConnectRoomsAction> =>\n    dispatch => {\n\n        const socket = connectRooms();\n\n        socket.on(\"updateRooms\", (rooms) => {\n            dispatch(updateRooms(Object.values(rooms)))\n        });\n        return dispatch({type: ERoomsAction.CONNECT_ROOMS});\n    };","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {setCurrentTool} from \"../../store/tool/actions\";\nimport {Brush} from \"./Brush\";\nimport {Line} from \"./Line\";\nimport {ButtonSelect} from \"../_shared/ButtonSelect\";\nimport {SelectTool} from \"./SelectTool\";\nimport {Button} from \"../_shared/Button\";\nimport {reverseFullScreen} from \"../../store/fullscreen\";\n\nexport const ToolsParams = {\n    [EToolType.Brush]: {component: Brush, type: EToolType.Brush},\n    [EToolType.Line]: {component: Line, type: EToolType.Line},\n    [EToolType.Select]: {component: SelectTool, type: EToolType.Select},\n};\n\nexport interface ToolsStateProps {\n    currentTool: EToolType\n}\n\nexport interface ToolsActionProps {\n    setCurrentTool(tool: EToolType)\n    reverseFullScreen()\n}\n\nexport interface ToolsOwnProps {\n\n}\n\nexport interface ToolsProps extends ToolsStateProps, ToolsActionProps, ToolsOwnProps {\n\n}\n\nconst ToolsComponent: React.FC<ToolsProps> = ({currentTool, setCurrentTool, reverseFullScreen}) => {\n\n    const ToolControls = ToolsParams[currentTool].component;\n    return (\n        <div className=\"tools\">\n            <Button onClick={reverseFullScreen}>full</Button>\n            <div>\n                {Object.keys(ToolsParams).map(toolType => (\n                    <ButtonSelect\n                        key={toolType}\n                        selected={toolType === currentTool}\n                        onClick={() => setCurrentTool(ToolsParams[toolType].type)}>\n                        {toolType}</ButtonSelect>\n                ))}\n            </div>\n            <ToolControls/>\n        </div>\n    );\n};\n\nconst mapStateToProps: MapStateToProps<ToolsStateProps, ToolsOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ToolsActionProps, ToolsOwnProps> = {\n    setCurrentTool, reverseFullScreen\n};\n\nexport const Tools = connect<ToolsStateProps, ToolsActionProps, ToolsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ToolsComponent);","import {AddCFAction, ChangeCFParamsAction, ECFType} from \"./types\";\n\nexport enum EChangeFunctionsAction {\n    ADD_CF = \"change-functions/add\",\n    CHANGE_PARAMS = \"change-functions/change-params\",\n}\n\nexport const addCF = (cfType: ECFType): AddCFAction =>\n    ({type: EChangeFunctionsAction.ADD_CF, cfType});\n\nexport const changeCFParams = (id: string, params: any): ChangeCFParamsAction =>\n    ({type: EChangeFunctionsAction.CHANGE_PARAMS, params, id});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../store\";\nimport {Room} from \"../store/rooms/reducer\";\nimport {Button} from \"./_shared/Button\";\nimport {roomsConnect} from \"../store/rooms/actions\";\n\nexport interface RoomsStateProps {\n    rooms: Room[]\n}\n\nexport interface RoomsActionProps {\n    roomsConnect()\n}\n\nexport interface RoomsOwnProps {\n\n}\n\nexport interface RoomsProps extends RoomsStateProps, RoomsActionProps, RoomsOwnProps {\n\n}\n\nexport interface RoomsState {\n\n}\n\nclass RoomsComponent extends React.PureComponent<RoomsProps, RoomsState> {\n\n    componentDidMount() {\n        this.props.roomsConnect();\n    }\n\n    handleRoomConnect = room => {\n        console.log(room);\n    };\n\n    render() {\n        const {rooms} = this.props;\n        return (\n            <>\n                {rooms.map(room =>\n                    <Button onClick={this.handleRoomConnect} value={room}>{room.name}</Button>\n                )}\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<RoomsStateProps, RoomsOwnProps, AppState> = state => ({\n    rooms: state.rooms.rooms\n});\n\nconst mapDispatchToProps: MapDispatchToProps<RoomsActionProps, RoomsOwnProps> = {\n    roomsConnect\n};\n\nexport const Rooms = connect<RoomsStateProps, RoomsActionProps, RoomsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(RoomsComponent);","import * as io from \"socket.io-client\";\n\n\nexport const connectRooms = () => {\n    const socket = io(\"http://localhost:3002\", {\n        path: '/rooms',\n    });\n    return socket;\n};","import * as React from \"react\";\nimport {ButtonSelect} from \"./ButtonSelect\";\nimport {ButtonNumber} from \"./ButtonNumber\";\nimport {SelectButtons} from \"./SelectButtons\";\nimport {EventData} from \"../../utils/types\";\n\nexport interface ParamConfig {\n    type: EParamType\n    props?: any\n    name: string\n}\n\nexport enum EParamType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    Select = \"select\",\n}\n\nexport const ParamComponents = {\n    [EParamType.Boolean]: ButtonSelect,\n    [EParamType.Select]: SelectButtons,\n    [EParamType.Number]: ButtonNumber,\n};\n\nexport interface ParamsProps {\n    data: any\n    value?: any\n    name?: string\n\n    onChange?(value?: any, name?: string)\n}\n\nexport interface ParamsState {\n\n}\n\nexport class Params extends React.PureComponent<ParamsProps, ParamsState> {\n\n    handleChange = (data: EventData) => {\n        const {value, onChange, name} = this.props;\n\n        console.log(data);\n        onChange && onChange({...value, [data.name]: data.value}, name);\n    };\n\n    render() {\n        const {data, value} = this.props;\n        return (\n            <div className={\"params\"}>\n                {data.map(paramConfig => {\n                    const {type, name, props} = paramConfig;\n                    const Component = ParamComponents[type] || ButtonSelect;\n                    return (\n                        <Component\n                            {...props}\n                            value={value[name]}\n                            name={name}\n                            onChange={this.handleChange}\n                            key={name}/>\n                    );\n                })}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/ButtonNumberCF\";\nimport \"../../styles/sinChangeFunction.scss\";\n\nexport interface SinCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface SinCFState {\n\n}\n\nexport class SinCF extends React.PureComponent<SinCFProps, SinCFState> {\n\n    handleAChange = ({value}) => {\n        this.props.onChange({...this.props.params, a: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"sin-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.${name}.params.a`}\n                    value={params.a}\n                    range={[0, 1]}\n                    onChange={this.handleAChange}\n                />\n                <Params\n                    name={name}\n                    data={paramsConfig}\n                    value={params}\n                    onChange={onChange}\n                />\n            </div>\n        );\n    }\n}","import {Action} from \"redux\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\n\n\nexport enum ECFType {\n    SIN = \"sin\"\n}\n\nexport interface ChangeFunction {\n    id: string\n    type: ECFType\n    params: any\n    // paramsConfig: any\n    paramsConfig: ParamConfig[]\n}\n\nexport interface AddCFAction extends Action {\n    cfType: ECFType\n}\n\nexport interface ChangeCFParamsAction extends Action {\n    id: string\n    params: any\n}\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ChangeFunctionsState} from \"../../store/changeFunctions/reducer\";\nimport {addCF, changeCFParams} from \"../../store/changeFunctions/actions\";\nimport {SinCF} from \"./SinCF\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\nimport {Button} from \"../_shared/Button\";\nimport {setChangingMode, startChanging, stopChanging} from \"../../store/changing/actions\";\nimport {SelectDrop} from \"../_shared/SelectDrop\";\nimport {enumToSelectItems, objectToSelectItems} from \"../../utils/utils\";\nimport {ChangingMode} from \"../../store/changing/types\";\nimport {SelectButtons} from \"../_shared/SelectButtons\";\n\nexport interface ChangeFStateProps {\n    cfs: ChangeFunctionsState\n    changingMode: ChangingMode\n}\n\nexport interface ChangeFActionProps {\n    changeCFParams(id: string, params: any)\n    addCF(cfType: ECFType)\n    startChanging()\n    stopChanging()\n    setChangingMode(mode: ChangingMode)\n}\n\nexport interface ChangeFOwnProps {\n\n}\n\nexport interface ChangeFProps extends ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps {\n\n}\n\nexport interface ChangeFState {\n\n}\n\nconst CFComponentByType = {\n    [ECFType.SIN]: SinCF\n};\n\nconst modesItems = enumToSelectItems(ChangingMode);\n\nconsole.log(modesItems);\n\nclass ChangeFComponent extends React.PureComponent<ChangeFProps, ChangeFState> {\n\n    handleChange = (value, name) => {\n        this.props.changeCFParams(name, value);\n    };\n\n    handleAddSin = () => {\n        this.props.addCF(ECFType.SIN);\n    };\n\n    handleModeChange = ({value}) => {\n        this.props.setChangingMode(value);\n    };\n\n    render() {\n        const {cfs, changingMode} = this.props;\n        return (\n            <div>\n                {Object.values(cfs).map(cf => {\n                    const {type, id, params, paramsConfig} = cf;\n                    const Component = CFComponentByType[type];\n                    return (\n                        <Component\n                            key={id}\n                            name={id}\n                            params={params}\n                            paramsConfig={paramsConfig}\n                            onChange={this.handleChange}/>);\n                })}\n                <Button onClick={this.handleAddSin}>sin</Button>\n                <SelectButtons\n                    items={modesItems}\n                    value={changingMode}\n                    onChange={this.handleModeChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ChangeFStateProps, {}, AppState> = state => ({\n    cfs: state.changeFunctions,\n    changingMode: state.changing.mode\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ChangeFActionProps, ChangeFOwnProps> = {\n    changeCFParams, addCF, startChanging, stopChanging, setChangingMode\n};\n\nexport const ChangeF = connect<ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChangeFComponent);","import * as React from \"react\";\nimport \"../styles/layout.scss\";\nimport {Patterns} from \"./Patterns\";\nimport {Tools} from \"./Tools\";\nimport {Rooms} from \"./Rooms\";\nimport {ChangeF} from \"./ChangeF\";\nimport {connect} from \"react-redux\";\nimport {setFullScreen} from \"../store/fullscreen\";\nimport {AppState} from \"../store\";\nimport FullScreen from \"react-full-screen\";\n\nexport interface LayoutStateProps {\n    full: boolean\n}\n\nexport interface LayoutActionProps {\n    setFullScreen(value: boolean)\n}\n\nexport interface LayoutProps extends LayoutStateProps, LayoutActionProps {\n}\n\nexport const LayoutComponent: React.FC<LayoutProps> = ({full, setFullScreen}) => {\n\n    return (\n        <FullScreen enabled={full} onChange={setFullScreen}>\n            <div className={\"layout-container\"}>\n                <div className=\"layout\">\n                    <div className=\"tools-panel\">\n                        <Tools/>\n                    </div>\n                    <div className=\"windows\">\n                        <Patterns/>\n                        <Rooms/>\n                        <ChangeF/>\n                    </div>\n                </div>\n            </div>\n        </FullScreen>\n    );\n};\n\nexport const Layout = connect<LayoutStateProps, LayoutActionProps, {}, AppState>(state => ({\n    full: state.fullScreen\n}), {\n    setFullScreen\n})(LayoutComponent);","import * as React from \"react\";\nimport {Layout} from \"./Layout\";\n\nexport const Main: React.FC<{}> = ({}) => {\n    return (\n        <Layout/>\n    );\n};","import {CanvasState} from \"./types\";\n\nexport function createCleanCanvasState(width: number, height: number): CanvasState {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n\n    const imageData = ctx.createImageData(width, height);\n\n    // noise\n    // for (let i = 0; i < imageData.data.length; i++) {\n    //     imageData.data[i] = Math.random() * 100;\n    // }\n\n    return {\n        imageData,\n        width,\n        height\n    };\n}\n\nexport function createCanvasStateFromImageData(imageData: ImageData, width?: number, height?: number): CanvasState {\n    return {\n        imageData,\n        width: width || imageData.width,\n        height: height || imageData.height\n    };\n}","import {\n    HistoryParams, HistoryState, HistoryValue,\n    MaskParams,\n    PatternAction,\n    PatternConfig, PatternHistoryItem,\n    PatternParams, PatternState,\n    SelectionParams,\n    StoreParams\n} from \"./types\";\nimport {createCleanCanvasState} from \"../../utils/state\";\nimport {PatternsState} from \"./reducer\";\nimport {omit} from \"lodash\";\nimport {CanvasState, FunctionState, MaskValue, SelectionValue} from \"../../utils/types\";\n\nexport const patternId = (state: PatternsState) =>\n    Object.keys(state).length\n        ? (Math.max(...Object.keys(state).map(key => +key))) + 1\n        : 1;\n\n\nexport const createPatternInitialState = (id: number, config?: PatternConfig, params?: PatternParams): PatternState => {\n    const {width = 300, height = 300, history, store, selection, mask} = config || {};\n    return {\n        id,\n        config,\n        resultImage: null,\n        current: createCleanCanvasState(width, height),\n        history: getHistoryState(history, undefined, (params || {}).history),\n        store: getStoreState(store, undefined, (params || {}).store),\n        selection: getSelectionState(selection, undefined, (params || {}).selection),\n        mask: getMaskState(width, height)(mask, undefined, (params || {}).mask),\n    }\n};\n\nexport const updatePatternState = (state: PatternState, config: PatternConfig, params?: PatternParams): PatternState => {\n    const {history, store, selection, mask} = config || {};\n    params = params || {};\n    return {\n        config,\n        id: state.id,\n        current: state.current,\n        resultImage: state.resultImage,\n        history: getHistoryState(history, state.history, params.history),\n        store: getStoreState(store, state.store, params.store),\n        selection: getSelectionState(selection, state.selection, params.selection),\n        mask: getMaskState(state.current.width, state.current.height)(mask, state.mask, params.mask),\n    }\n};\n\nconst getFunctionState = <V, P>(initialValue: V, initialParams: P) =>\n    (enabled?: boolean, state?: FunctionState<V, P>, params?: P): FunctionState<V, P> => {\n        if (!enabled)\n            return;\n\n        return {\n            value: state ? state.value : initialValue,\n            params: params\n                ? (state ? {\n                    ...state.params,\n                    ...params\n                } : {\n                    ...initialParams,\n                    ...params\n                })\n                : (state ? state.params : initialParams)\n        };\n    };\n\nexport const getHistoryState = getFunctionState<HistoryValue, HistoryParams>({\n    before: [],\n    after: [],\n}, {\n    length: 4\n});\n\nexport const getStoreState = getFunctionState<CanvasState, StoreParams>(null, {});\n\nexport const getSelectionState = getFunctionState<SelectionValue, SelectionParams>(null, {});\n\nexport const getMaskState = (width, height) => getFunctionState<MaskValue, MaskParams>(\n    createCleanCanvasState(width, height), {\n        opacity: 1,\n        black: true\n    });\n\n\nexport const removePattern = (state: PatternsState, id: number) => omit(state, id);\n\nexport type PatternReducer<T extends PatternAction> =\n    (pattern: PatternState, action: T, state: PatternsState) => PatternState\n\nexport const reducePattern = <T extends PatternAction>(reducer: PatternReducer<T>) =>\n    (state: PatternsState, action: T) => ({\n        ...state,\n        [action.id]: reducer(state[action.id], action, state)\n    });\n\n\nexport const historyPush = (history: HistoryState, current: PatternHistoryItem): HistoryState => {\n    const {value: {before}, params: {length: historyLength}} = history;\n\n    const beforeNext: PatternHistoryItem[] = [...before, current];\n    const afterNext: PatternHistoryItem[] = [];\n\n    if (beforeNext.length > historyLength)\n        beforeNext.shift();\n\n    return {\n        ...history,\n        value: {\n            before: beforeNext,\n            after: afterNext\n        }\n    }\n};\n\nexport interface PatternUndoResult {\n    history: HistoryState\n    prev: PatternHistoryItem\n}\n\nexport const historyUndo = (history: HistoryState, current: PatternHistoryItem): PatternUndoResult => {\n    const {value: {before, after}} = history;\n\n    if (before.length === 0) return null;\n\n    const prev = before[before.length - 1];\n\n    const beforeNext = before.slice(0, before.length - 1); // pop\n    const afterNext = [current, ...after]; // unshift current\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        prev\n    }\n};\nexport interface PatternRedoResult {\n    history: HistoryState\n    next: PatternHistoryItem\n}\n\nexport const historyRedo = (history: HistoryState, current: PatternHistoryItem): PatternRedoResult => {\n    const {value: {before, after}} = history;\n\n    if (after.length === 0) return null;\n\n    const next = after[0];\n\n    const beforeNext = [...before, current]; // push current\n    const afterNext = after.slice(1, after.length); // shift\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        next\n    }\n};","import {handleActions} from \"redux-actions\";\nimport {EPatternAction, EPatternsAction} from \"./actions\";\nimport {\n    createPatternInitialState,\n    historyPush, historyRedo, historyUndo,\n    patternId,\n    reducePattern,\n    removePattern,\n    updatePatternState\n} from \"./helpers\";\nimport {\n    AddPatternAction,\n    CreateRoomAction,\n    EditPatternConfigAction,\n    PatternState,\n    PatternUndoAction,\n    RemovePatternAction, SetMaskParamsAction,\n    SetPatternHeightAction,\n    SetPatternWidthAction,\n    UpdatePatternImageAction,\n    UpdatePatternMaskAction,\n    UpdatePatternSelectionAction\n} from \"./types\";\nimport {maskedImage, resizeImageData} from \"../../utils/imageData\";\n\n\nexport interface PatternsState {\n    [id: string]: PatternState\n}\n\nexport const patternsReducer = handleActions<PatternsState>({\n\n    [EPatternsAction.ADD_PATTERN]: (state: PatternsState, action: AddPatternAction) => {\n        const id = patternId(state);\n        return {\n            ...state,\n            [id]: createPatternInitialState(id, action.config)\n        }\n    },\n    [EPatternsAction.REMOVE_PATTERN]: (state: PatternsState, action: RemovePatternAction) =>\n        removePattern(state, action.id),\n\n\n    [EPatternAction.EDIT_CONFIG]: reducePattern<EditPatternConfigAction>(\n        (pattern: PatternState, action) =>\n            updatePatternState(pattern, action.config)),\n\n\n    [EPatternAction.SET_WIDTH]: reducePattern<SetPatternWidthAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                width: action.width,\n                imageData: resizeImageData(pattern.current.imageData, action.width, pattern.current.height)\n            },\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    width: action.width,\n                    imageData: resizeImageData(pattern.mask.value.imageData, action.width, pattern.mask.value.height)\n                }\n            },\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current,\n                maskValue: pattern.mask && pattern.mask.value\n            })\n        })),\n    [EPatternAction.SET_HEIGHT]: reducePattern<SetPatternHeightAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                height: action.height,\n                imageData: resizeImageData(pattern.current.imageData, pattern.current.width, action.height)\n            },\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    height: action.height,\n                    imageData: resizeImageData(pattern.mask.value.imageData, pattern.mask.value.width, action.height)\n                }\n            },\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current,\n                maskValue: pattern.mask && pattern.mask.value\n            })\n        })),\n\n    [EPatternAction.SET_MASK_PARAMS]: reducePattern<SetMaskParamsAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                params: {\n                    ...pattern.mask.params,\n                    ...action.params\n                }\n            }\n        })),\n\n    [EPatternAction.UPDATE_IMAGE]: reducePattern<UpdatePatternImageAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                imageData: action.imageData\n            },\n            resultImage: maskedImage(action.imageData, pattern.mask && pattern.mask.value.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current\n            })\n        })),\n\n    [EPatternAction.UPDATE_SELECTION]: reducePattern<UpdatePatternSelectionAction>(\n        (pattern: PatternState, action) => {\n            return ({\n                ...pattern,\n                selection: {\n                    ...pattern.selection,\n                    value: action.value\n                }\n            })\n        }),\n\n    [EPatternAction.UPDATE_MASK]: reducePattern<UpdatePatternMaskAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    imageData: action.imageData\n                }\n            },\n            resultImage: maskedImage(pattern.current.imageData, action.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                maskValue: pattern.mask.value\n            })\n        })),\n\n    [EPatternAction.UNDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const undoResult = historyUndo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!undoResult) return pattern;\n\n        return {\n            ...pattern,\n            history: undoResult.history,\n            current: undoResult.prev.current || pattern.current,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: undoResult.prev.maskValue || pattern.mask.value\n            }\n        }\n\n    }),\n    [EPatternAction.REDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const redoResult = historyRedo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!redoResult) return pattern;\n\n        return {\n            ...pattern,\n            history: redoResult.history,\n            current: redoResult.next.current || pattern.current,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                value: redoResult.next.maskValue || pattern.mask.value\n            }\n        }\n    }),\n\n    [EPatternAction.CREATE_ROOM]: reducePattern<CreateRoomAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            connected: action.roomName,\n            socket: action.socket,\n        }))\n}, {});\n\n\n","import {handleActions} from \"redux-actions\";\nimport {EToolType, SetCurrentToolAction} from \"./types\";\nimport {EToolAction} from \"./actions\";\n\nexport interface ToolState {\n    current: EToolType\n}\n\nexport const toolReducer = handleActions<ToolState>({\n    [EToolAction.SET_CURRENT]: (state: ToolState, action: SetCurrentToolAction) => ({\n        ...state,\n        current: action.tool\n    })\n}, {\n    current: EToolType.Brush\n});\n\n\n","import {BrushParams,EBrushCompositeOperation, EBrushType} from \"./types\";\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(EBrushType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(EBrushCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\n\nexport const getBrushParamsConfig = (params?: BrushParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {BrushParams, EBrushType, SetBrushParamsAction} from \"./types\";\nimport {EBrushAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getBrushParamsConfig} from \"./helpers\";\n\nexport interface BrushState {\n    params: BrushParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const brushReducer = handleActions<BrushState>({\n    [EBrushAction.SET_PARAMS]: (state: BrushState, action: SetBrushParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getBrushParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        size: 5,\n        opacity: 1,\n        type: EBrushType.Square\n    },\n    paramsConfig: getBrushParamsConfig()\n});\n\n\n","\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {ELineType, LineParams} from \"./types\";\nimport {ELineCompositeOperation} from \"./types\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(ELineType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(ELineCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\n\nexport const getLineParamsConfig = (params?: LineParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {ELineType, LineParams, SetLineParamsAction} from \"./types\";\nimport {ELineAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getLineParamsConfig} from \"./helpers\";\n\nexport interface LineState {\n    params: LineParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const lineReducer = handleActions<LineState>({\n    [ELineAction.SET_PARAMS]: (state: LineState, action: SetLineParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getLineParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        size: 5,\n        opacity: 1,\n        type: ELineType.Default\n    },\n    paramsConfig: getLineParamsConfig()\n});\n\n\n","import {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {\n    curveTypesSelectItems,\n    selectionModesSelectItems\n} from \"../../components/Area/Selection\";\nimport {\n    CurveValueName,\n    ESelectionMode, SelectToolParams\n} from \"./types\";\n\nexport const getSelectToolParamsConfig = (params?: SelectToolParams) => {\n    let config: ParamConfig[] = [{\n        name: \"mode\",\n        type: EParamType.Select,\n        props: {\n            items: selectionModesSelectItems,\n        }\n    }];\n\n    if (params && params.mode === ESelectionMode.Points) {\n        config.push({\n            name: \"curveType\",\n            type: EParamType.Select,\n            props: {\n                items: curveTypesSelectItems\n            }\n        });\n\n        if (Object.keys(CurveValueName).indexOf(params.curveType) !== -1) {\n            config = [...config, {\n                name: CurveValueName[params.curveType],\n                type: EParamType.Number,\n                props: {\n                    range: [0, 1],\n                    text: 1\n                }\n            }]\n        }\n    }\n\n    return config;\n};","import {handleActions} from \"redux-actions\";\nimport {SetSelectToolParamsAction, SelectToolParams, CurveValueName} from \"./types\";\nimport {ESelectToolAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {ECurveType, ESelectionMode} from \"./types\";\nimport {getSelectToolParamsConfig} from \"./helpers\";\n\nexport interface SelectToolState {\n    params: SelectToolParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const selectToolReducer = handleActions<SelectToolState>({\n    [ESelectToolAction.SET_PARAMS]: (state: SelectToolState, action: SetSelectToolParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getSelectToolParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    },\n}, {\n    params: {\n        mode: ESelectionMode.Rect,\n        curveType: ECurveType.CurveLinear,\n        [CurveValueName[ECurveType.CurveBundle]]: 0,\n        [CurveValueName[ECurveType.CurveCardinal]]: 1,\n        [CurveValueName[ECurveType.CurveCatmullRom]]: 1\n    },\n    paramsConfig: getSelectToolParamsConfig(),\n});\n\n\n","import {handleActions} from \"redux-actions\";\nimport {ERoomsAction} from \"./actions\";\nimport {UpdateRoomsAction} from \"./types\";\n\nexport interface Room {\n    name: string\n}\n\nexport interface RoomsState {\n    rooms: Room[]\n}\n\nexport const roomsReducer = handleActions<RoomsState>({\n    [ERoomsAction.UPDATE_ROOMS]: (state: RoomsState, action: UpdateRoomsAction) => ({\n        rooms: action.rooms\n    })\n}, {\n    rooms: []\n});\n","import {EParamType} from \"../../components/_shared/Params\";\nimport {ChangeFunctionsState} from \"./reducer\";\nimport {ECFType} from \"./types\";\nimport {ValueD} from \"../../components/_shared/ButtonNumber\";\n\n\nconst getId = (key: string, type: ECFType) => +key.slice(type.toString().length);\n\nexport const cfId = (type: ECFType, state: ChangeFunctionsState) => {\n    return type.toString() + (Object.keys(state).length\n        ? (Math.max(\n        ...Object\n            .keys(state)\n            .filter(key => state[key].type === type)\n            .map(key => getId(key, state[key].type)))) + 1\n        : 1);\n};\n\nconst chInitialParams = {\n    [ECFType.SIN]: {\n        a: 0.3,\n        t: 300,\n        p: 0,\n    }\n};\n\nconst chParamsConfig = {\n    [ECFType.SIN]: [{\n        name: \"a\",\n        type: EParamType.Number,\n        props: {\n            range: [0, 1] as [number, number]\n        }\n    }, {\n        name: \"t\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(0.1),\n            range: [1, 1000] as [number, number]\n        }\n    }, {\n        name: \"p\",\n        type: EParamType.Number,\n        props: {\n            valueD: ValueD.VerticalLinear(0.5),\n            range: [1, 1500] as [number, number]\n        }\n    }]\n};\n\nexport const createCFInitialState = (id, type: ECFType) => {\n\n    return {\n        id,\n        type,\n        params: chInitialParams[type],\n        paramsConfig: chParamsConfig[type]\n    }\n};\n\n\nexport const changeFunctionByType = {\n    [ECFType.SIN]: (params, range) => (startValue, time) => startValue + params.a * (range[1] - range[0]) * Math.sin(time / params.t)\n};","import {handleActions} from \"redux-actions\";\nimport {AddCFAction, ChangeCFParamsAction, ChangeFunction, ECFType} from \"./types\";\nimport {EChangeFunctionsAction} from \"./actions\";\nimport {cfId, createCFInitialState} from \"./helpers\";\n\n\nexport interface ChangeFunctionsState {\n    [key: string]: ChangeFunction\n}\n\nexport const changeFunctionsReducer = handleActions<ChangeFunctionsState>({\n    [EChangeFunctionsAction.ADD_CF]: (state: ChangeFunctionsState, action: AddCFAction) => {\n        const id = cfId(action.cfType, state);\n        console.log(id, action.cfType, state);\n        return {\n            ...state,\n            [id]: createCFInitialState(id, action.cfType)\n        }\n    },\n    [EChangeFunctionsAction.CHANGE_PARAMS]: (state: ChangeFunctionsState, action: ChangeCFParamsAction) => {\n        return {\n            ...state,\n            [action.id]: {\n                ...state[action.id],\n                params: action.params\n            }\n        }\n    }\n}, {});","import {handleActions} from \"redux-actions\";\nimport {\n    ActivateValueChangingAction,\n    ChangingValue,\n    DeactivateValueChangingAction, SetStartValueAction,\n    SetValueInChangingListAction\n} from \"./types\";\nimport {EChangingValuesAction} from \"./actions\";\nimport omit from \"lodash/omit\";\n\nexport interface ChangingValuesState {\n    [path: string]: ChangingValue\n}\n\nexport const changingValuesReducer = handleActions<ChangingValuesState>({\n    [EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST]: (state: ChangingValuesState, action: SetValueInChangingListAction) => {\n        if (!state[action.path]) {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        active: true,\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                        startValue: action.startValue,\n                    }\n                }\n            } else {\n                return state;\n            }\n        } else {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        ...state[action.path],\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                    }\n                }\n            } else {\n                return omit(state, action.path);\n            }\n        }\n    },\n    [EChangingValuesAction.SET_START_VALUE]: (state: ChangingValuesState, action: SetStartValueAction) => {\n        return state[action.path] ? {\n            ...state,\n            [action.path]: {\n                ...state[action.path],\n                startValue: action.startValue,\n            }\n        } : state\n    },\n    [EChangingValuesAction.ACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: ActivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: true\n        }\n    }),\n    [EChangingValuesAction.DEACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: DeactivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: false\n        }\n    }),\n}, {});","import {handleActions} from \"redux-actions\";\nimport {EChangingAction} from \"./actions\";\nimport {ChangingMode} from \"./types\";\n\nexport interface ChangingState {\n    isChanging: boolean\n    mode: ChangingMode\n}\n\nexport const changingReducer = handleActions<ChangingState>({\n    [EChangingAction.START]: (state: ChangingState) => ({\n        ...state,\n        isChanging: true\n    }),\n    [EChangingAction.STOP]: (state: ChangingState) => ({\n        ...state,\n        isChanging: false\n    }),\n    [EChangingAction.SET_MODE]: (state: ChangingState, action) => ({\n        ...state,\n        mode: action.mode\n    }),\n}, {\n    isChanging: false,\n    mode: ChangingMode.OnDraw\n});\n","import {ChangeColorAction} from \"./types\";\n\n\nexport enum EColorAction {\n    CHANGE = \"color/change\",\n}\n\nexport const changeColor = (color: string): ChangeColorAction =>\n    ({type: EColorAction.CHANGE, color});","import {handleActions} from \"redux-actions\";\nimport {ChangeColorAction} from \"./types\";\nimport {EColorAction} from \"./actions\";\n\n\nexport interface ColorState {\n    value: string\n}\n\nexport const colorReducer = handleActions<ColorState>({\n    [EColorAction.CHANGE]: (state: ColorState, action: ChangeColorAction) => {\n\n        return {\n            ...state,\n            value: action.color\n        }\n    },\n}, {\n    value: \"#000000\"\n});","import {handleActions} from \"redux-actions\";\nimport * as immutable from 'object-path-immutable';\nimport {AppState} from \"../index\";\nimport {ChangeToStartValueAction, EChangeAction} from \"./actions\";\nimport {changeFunctionByType} from \"../changeFunctions/helpers\";\n\nexport const changeReducer = handleActions<AppState>({\n    [EChangeAction.CHANGE]: (state: AppState, action) => {\n        console.log(state, action.time);\n\n        const {changeFunctions, changingValues} = state;\n\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n\n            console.log(path, active);\n            if (!active) return res;\n\n            const changeFunctionData = changeFunctions[changeFunctionId];\n\n            const changeFunction = changeFunctionByType[changeFunctionData.type];\n\n            let nextValue = changeFunction(changeFunctionData.params, range)(startValue, action.time);\n            nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n\n            return res.set(path, nextValue)\n        }, immutable.wrap(state)).value();\n    },\n    [EChangeAction.TO_START_VALUE]: (state: AppState, action: ChangeToStartValueAction) => {\n        const {path} = action;\n        const {changingValues} = state;\n\n        return changingValues[path]\n            ? immutable.wrap(state).set(path, changingValues[path].startValue).value()\n            : state;\n    },\n    [EChangeAction.ALL_TO_START_VALUE]: (state: AppState) => {\n        const {changingValues} = state;\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n            return res.set(path, startValue)\n        }, immutable.wrap(state)).value();\n    },\n}, {});","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reduceReducers from 'reduce-reducers';\n\nimport {PatternsState, patternsReducer} from \"./patterns/reducer\";\nimport {ToolState, toolReducer} from \"./tool/reducer\";\nimport {BrushState, brushReducer} from \"./brush/reducer\";\nimport {LineState, lineReducer} from \"./line/reducer\";\nimport {SelectToolState, selectToolReducer} from \"./selectTool/reducer\";\nimport {RoomsState, roomsReducer} from \"./rooms/reducer\";\nimport {ChangeFunctionsState, changeFunctionsReducer} from \"./changeFunctions/reducer\";\nimport {ChangingValuesState, changingValuesReducer} from \"./changingValues/reducer\";\nimport {changingReducer, ChangingState} from \"./changing/reducer\";\nimport {colorReducer, ColorState} from \"./color/reducer\";\nimport {changeReducer} from \"./change/reducer\";\nimport {fullscreenReducer, FullScreenState} from \"./fullscreen\";\n\nexport interface AppState {\n    fullScreen: FullScreenState\n\n    patterns: PatternsState\n\n    color: ColorState\n\n    tool: ToolState\n    brush: BrushState\n    line: LineState\n\n    selectTool: SelectToolState\n\n    rooms: RoomsState\n\n    changeFunctions: ChangeFunctionsState\n    changingValues: ChangingValuesState\n    changing: ChangingState\n}\n\nconst rootReducer = reduceReducers(\n    combineReducers<AppState>({\n        fullScreen: fullscreenReducer,\n\n        patterns: patternsReducer,\n\n        color: colorReducer,\n\n        tool: toolReducer,\n        brush: brushReducer,\n        line: lineReducer,\n\n        selectTool: selectToolReducer,\n\n        rooms: roomsReducer,\n\n        changeFunctions: changeFunctionsReducer,\n        changingValues: changingValuesReducer,\n        changing: changingReducer\n    }),\n    changeReducer\n);\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\nimport './App.scss';\nimport {Main} from \"./components/Main\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nconst App: React.FC = () => (\n    <Provider store={store}>\n        <Main/>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"path-data-polyfill\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}