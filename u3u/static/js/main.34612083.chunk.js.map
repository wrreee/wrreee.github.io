{"version":3,"sources":["store/patterns/actions.ts","store/patterns/history/actions.ts","store/tool/types.ts","components/Pattern/HistoryControls.tsx","utils/path.ts","utils/geometry.ts","components/_shared/SVG.tsx","utils/utils.ts","store/selectTool/types.ts","components/Area/Selection.tsx","utils/canvas/helpers/base.ts","utils/canvas/helpers/imageData.ts","utils/offset.ts","store/patterns/repeating/types.ts","utils/draw.ts","components/_shared/Canvas.tsx","store/brush/types.ts","store/line/types.ts","store/change/actions.ts","store/changing/types.ts","components/Area/canvasPosition.servise.ts","store/changing/actions.ts","utils/canvas/helpers/draw.ts","utils/canvas/helpers/geometry.ts","components/Area/Draw.tsx","components/_shared/InputNumber.tsx","store/changeFunctions/types.ts","components/Area/index.tsx","components/_shared/buttons/ButtonSelect.tsx","components/_shared/Key.tsx","components/_shared/buttons/ButtonNumber/LoopAmplitude.tsx","store/changingValues/actions.ts","components/_shared/buttons/ButtonNumber/index.tsx","components/_shared/buttons/ButtonNumber/SinAmplitude.tsx","components/_shared/buttons/ButtonNumber/ParaboloidAmplitude.tsx","components/_shared/buttons/SelectButtons.tsx","components/_shared/buttons/SelectDrop.tsx","store/patterns/rotating/actions.ts","components/_shared/HoverHideable.tsx","components/_shared/InputText.tsx","components/_shared/ShortcutInput.tsx","store/changeFunctions/selectors.ts","components/_shared/buttons/ButtonNumberCF.tsx","components/Pattern/RotatingControls.tsx","utils/bezier.ts","store/patterns/repeating/actions.ts","components/_shared/canvases/BezierCurveRepeating.tsx","store/patterns/pattern/actions.ts","components/Pattern/RepeatingControls.tsx","components/Pattern/SelectionControls.tsx","store/patterns/pattern/helpers.ts","components/_shared/Params.tsx","store/patterns/video/capture/pixels.ts","store/patterns/video/services.ts","store/patterns/video/actions.ts","store/changeFunctions/functions/sin.ts","store/changeFunctions/functions/loop.ts","store/changeFunctions/functions/helpers.ts","store/changeFunctions/functions/xyParaboloid.ts","store/changeFunctions/helpers.ts","store/patterns/mask/actions.ts","components/Pattern/VideoControls.tsx","components/_shared/File.tsx","store/patterns/import/actions.ts","store/patterns/room/actions.ts","store/patterns/selection/actions.ts","store/patterns/room/service.ts","components/Pattern/RoomControls.tsx","components/Pattern/index.tsx","utils/patterns/function.ts","store/patterns/selection/helpers.ts","store/tool/actions.ts","components/Patterns.tsx","store/brush/actions.ts","store/color/actions.ts","store/patterns/selectors.ts","components/_shared/canvases/ImageData.tsx","components/_shared/Color/ColorValue.tsx","components/_shared/Color/index.tsx","store/line/actions.ts","components/ColorPalette/index.tsx","components/Tools/Brush.tsx","store/selectTool/actions.ts","components/Tools/Line.tsx","store/fullscreen/index.ts","components/Tools/SelectTool.tsx","store/changeFunctions/actions.ts","components/Tools/index.tsx","components/_shared/canvases/Wave.tsx","components/ChangeF/SinCF.tsx","components/ChangeF/LoopCF.tsx","components/_shared/canvases/CanvasByDrawFunction.tsx","components/_shared/canvases/Surface2d.tsx","components/ChangeF/XYCF.tsx","components/ChangeF/index.tsx","store/language/translations/index.ts","store/language/index.ts","components/AppControls.tsx","components/Layout.tsx","components/Main.tsx","utils/state.ts","store/rooms/actions.ts","store/patterns/history/helpers.ts","store/patterns/store/helpers.ts","store/patterns/mask/helpers.ts","store/patterns/rotating/helpers.ts","store/patterns/repeating/helpers.ts","store/patterns/import/helpers.ts","store/patterns/video/helpers.ts","store/patterns/pattern/reducers.ts","store/patterns/helpers.ts","store/patterns/history/reducers.ts","store/patterns/mask/reducers.ts","store/patterns/import/reducers.ts","store/patterns/repeating/reducers.ts","store/patterns/rotating/reducers.ts","store/patterns/selection/reducers.ts","store/patterns/video/reducers.ts","store/patterns/room/reducers.ts","store/patterns/reducer.ts","store/patterns/store/reducers.ts","store/tool/reducer.ts","store/brush/helpers.ts","store/brush/reducer.ts","store/line/helpers.ts","store/line/reducer.ts","store/selectTool/helpers.ts","store/selectTool/reducer.ts","store/rooms/reducer.ts","store/changeFunctions/reducer.ts","store/changingValues/reducer.ts","store/changing/reducer.ts","store/color/reducer.ts","store/change/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["EPatternsAction","EHistoryAction","addPattern","config","params","type","ADD_PATTERN","EToolType","mapDispatchToProps","redo","id","REDO","undo","UNDO","HistoryControls","connect","state","patternId","history","patterns","value","onUndo","React","onRedo","t","useTranslation","className","onClick","disabled","before","length","width","after","ESegType","EPathModeType","selectionTools","Select","pointsDistance","x1","y1","x2","y2","Math","sqrt","pow","SVG","props","elementRef","pre","mouseDownHandler","e","setState","dragging","onDown","mouseUpHandler","onUp","mouseMoveHandler","onDrag","onMove","createRef","this","current","addEventListener","document","children","height","style","ref","PureComponent","Path","M","path","x","y","values","L","Z","Rect","n","findSliceBounds","sliceStart","sliceEnd","slice","Slice","m","i","j","getLastSlice","defaultArrayValue","item","arrayToSelectItems","array","text","map","ECurveType","tosSzZ","string","offset","split","toString","join","tozZsS","ESelectionMode","CurveValueName","CurveBundle","CurveCardinal","CurveCatmullRom","lineFunction","d3","defined","selectionModesSelectItems","Line","Points","curveTypesSelectItems","Object","undefined","toLowerCase","CanvasSelectionComponent","canvasRef","pathRef","pathPointsRef","maskPathRef","maskRef","commitChanges","onChange","getBBox","selectToolHandlers","down","nearest","reduce","res","segment","index","distance","startInSlice","sliceN","getNearestSegment","offsetX","offsetY","HANDLER_SIZE","startX","startY","currentSliceN","oppositeIndex","oppositeSeg","drag","up","filter","exit","nextMode","SimplePoints","curvePath","subFirst","reverse","newCurvePath","line","selectToolParams","curveType","curveValue","curve","keys","indexOf","createElementNS","setAttribute","getPathData","stringToPathData","points","closed","prevPath","Array","isArray","prevProps","mode","console","log","isActive","name","setPathData","classNames","fill","fillOpacity","mask","stroke","nextProps","prevState","Selection","selectTool","currentTool","tool","createCanvas","canvas","createElement","context","getContext","canvasToImageData","getImageData","imageDataToCanvas","imageData","putImageData","resizeImageData","noStretch","oldCanvas","newCanvas","imageSmoothingEnabled","drawImage","imageDataToBase64","toDataURL","getMaskedImage","maskImageData","globalCompositeOperation","getOffset","elem","getBoundingClientRect","box","body","docElem","documentElement","scrollTop","window","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","top","left","round","getOffsetRect","parseInt","offsetTop","offsetLeft","offsetParent","getOffsetSum","ERepeatingType","getRepeatingCoords","pattern","repeating","Grid","gridParams","xn","yn","bezierPoints","xOut","yOut","xd","rotation","yd","Bezier","tx","ai","get","ty","aj","xij","yij","push","outer","EBrushType","EBrushCompositeOperation","Canvas","ctx","requestID","pointerLock","requestPointerLock","mouseDragHandler","drawing","startEvent","event","start","setTimeout","onDraw","requestAnimationFrame","changing","time","canvasCenter","rotatedE","cx","cy","angle","radians","PI","cos","sin","rotate","pageX","pageY","stop","cancelAnimationFrame","movementX","movementY","removeEventListener","exitPointerLock","releaseProcess","mouseEnterHandler","mouseLeaveHandler","onLeave","ImageData","ELineType","ELineCompositeOperation","EChangeAction","ChangingMode","toStartValue","TO_START_VALUE","allToStartValue","ALL_TO_START_VALUE","EChangingAction","position","setPosition","CursorHelper","color","size","setPos","appendChild","cssText","TextHelper","setText","innerText","startChanging","dispatch","getState","startTime","performance","now","CHANGE","change","START","stopChanging","STOP","drawMasked","draw","drawWithRotation","translate","drawMaskedWithRotation","circle","r","beginPath","arc","getRandomColor","floor","random","timer","ECFType","CanvasDrawComponent","coords","handlers","Brush","Square","squareBrush","ev","brush","opacity","compositeOperation","fillStyle","globalAlpha","selectionMask","selection","forEach","image","fillRect","SourceOver","click","cursors","transform","strokeOpacity","Circle","circleBrush","Pattern","patternBrush","patternSize","destinationPattern","brushPattern","brushRotation","destinationRotation","brushPatternImage","resultImage","destAngle","brushAngle","brushOffset","Default","strokeStyle","lineWidth","moveTo","lineTo","release","closePath","Interrupted","InterruptedOneStroke","downHandler","clickHandler","moveHandler","leaveHandler","upHandler","getHandlers","getType","ToolTypeGetter","handleChange","data","OnDraw","Draw","getStyle","AreaComponent","imageValue","selectionValue","selectionParams","onImageChange","onSelectionChange","Area","InputNumber","min","max","step","delay","notZero","_value","set_value","classnames","n_value","target","clearTimeout","ButtonSelect","selected","onMouseDown","onMouseUp","Key","handlePress","preventRepeat","onPress","handleRelease","onRelease","keyboardjs","EChangingValuesAction","defaultGetText","toFixed","ValueD","oldValue","dx","dy","amplitudeComponent","SIN","range","changingStartValue","changeFunctionId","startVPerc","buttonWidth","ampWidth","a","LOOP","end","XY_PARABOLOID","rgb","Color","colorTo","ButtonNumber","buttonRef","handleDown","startValue","persist","startPoint","clientX","clientY","handleMove","handleUp","calcValue","calculateOneStep","precision","one","abs","handlePressed","valueD","integer","nextValue","nextState","changeFunctionParams","shortcut","changeFunctionType","getText","otherProps","Amplitude","defaultGetValue","SelectButtons","handleClick","items","getValue","nullAble","br","key","SelectDrop","nullText","valueItem","find","ERotationAction","HoverHideable","button","InputText","onFocus","onBlur","placeholder","ShortcutInput","handleFocus","handleBlur","getCFs","changeFunctions","functions","getChangeFunctionsSelectItems","createSelector","namesList","list","ButtonNumberCFComponent","active","handleCFChange","setValueInChangingList","setStartValue","handleStartManualChanging","deactivateValueChanging","handleStopManualChanging","activateValueChanging","handleShortcutChange","changeFunction","changeFunctionsSelectItems","changingValues","buttonNumberProps","othersButtonNumberProps","changingValueData","changingParams","changingType","SET_VALUE_IN_CHANGING_LIST","DEACTIVATE_VALUE_CHANGING","ACTIVATE_VALUE_CHANGING","SET_START_VALUE","ButtonNumberCF","angleRange","angleValueD","offsetRange","offsetValueD","RotationControlsComponent","handleAngleChange","setRotation","handleOffsetChange","SET_ROTATION","RotationControls","withTranslation","bindDrawFunctions","cvs","randomColors","randomIndex","drawCircle","p","ox","oy","getCanvas","reset","evt","mouse","setColor","c","noColor","setRandomColor","setRandomFill","replace","setFill","noFill","drawSkeleton","colors","nocoords","pts","drawLine","drawPoints","drawCurve","quadraticCurveTo","bezierCurveTo","p1","p2","drawPoint","rect","bind","drawArc","s","drawbbox","bbox","drawRect","w","h","drawHull","hull","drawShape","shape","order","forward","startcap","endcap","back","drawText","fillText","ERepeatingAction","O","BezierCurveRepeating","drawFunctions","font","textBaseline","textAlign","handleUpdate","forceUpdate","Ox","Oy","lpts","moving","mx","my","mp","handler","onupdate","found","cursor","update","handleInteraction","snapshot","strokeWidth","arx","ary","xi","yi","textAnchor","d","cords","point_w","EPatternAction","repeatingRange","repeatingOutRange","repeatingValueD","RepeatingControlsComponent","handleGridParamsChange","setRepeating","handleIntegerChange","handleBezierChange","SET_REPEATING","RepeatingControls","SelectionControls","onClear","onCreatePattern","onCut","segments","reducePattern","reducer","action","getPatternConfig","startImage","startMask","store","room","getPatternParams","import","EParamType","updateImage","emit","socket","UPDATE_IMAGE","StackType","PixelsStack","setType","newEl","shift","pop","unshift","set","pixels","Captures","captures","pause","sketch","noLoop","play","loop","onNewFrame","cf","createCapture","stopped","others","remove","stream","getTracks","capture","stack","getFrameN","from","o","frameN","getPixel","pixelsStack","P5","setup","pixelDensity","parent","video","mandatory","minWidth","minHeight","optional","maxFrameRate","audio","b","frameRate","loadPixels","updatePixels","EVideoAction","ParamComponents","Boolean","Number","sinParamsConfig","loopParamsConfig","xyParaboloid","centerX","centerY","kx","ky","xyParaboloidParamsConfig","chInitialParams","zd","chParamsConfig","createCFInitialState","paramsConfig","changeFunctionByType","S","ES","f","znorm","videoChangeFunctionByType","xk","yk","EMaskAction","VideoControlsComponent","handleChangeOnParam","setVideoParams","videoParams","on","handleChangeParam","handlePause","availableChangeTypes","cfId","cfParams","cfType","SET_VIDEO_PARAMS","onNewVideoFrame","VideoControls","File","inputRef","handleFile","reader","FileReader","onload","img","Image","src","result","files","readAsDataURL","htmlFor","EImportAction","updateMask","UPDATE_MASK","ERoomAction","ESelectionAction","createRoom","roomName","io","query","base64","Promise","resolve","then","CREATE_ROOM","RoomControlsComponent","handleCreateRoom","connected","RoomControls","inputNumberProps","PatternComponent","handleImageChange","handleMaskChange","onMaskChange","handleSelectionChange","bBox","handleClearSelection","handleRemove","onRemove","handleDouble","onDouble","handleSetWidth","onSetWidth","handleSetHeight","onSetHeight","handleMaskParamsChange","onMaskParamsChange","onCreateRoom","handleConfigToggle","editConfig","handleLoad","onLoad","handleSave","onSave","handleFitChange","importParams","setImportParams","fit","handleCreatePatternFromSelection","onCreatePatternFromSelection","handleCutBySelection","onCutBySelection","maskValue","EDIT_CONFIG","SET_IMPORT_PARAMS","getFunctionState","initialValue","initialParams","enabled","getSelectionState","getMaskFromSegments","Path2D","pathData","getAttribute","pathDataToString","getSelectedImageData","EToolAction","updateSelection","UPDATE_SELECTION","PatternsComponent","handleAddClick","removePattern","setMaskParams","setWidth","setHeight","save","load","createPatternFromSelection","doublePattern","cutPatternBySelection","SET_MASK_PARAMS","REMOVE_PATTERN","SET_WIDTH","SET_HEIGHT","dataURL","link","href","download","date","Date","getDay","getTime","dateZs","removeChild","SAVE","imageToImageData","oldWidth","oldHeight","imageData2","LOAD","getSelectedMask","Patterns","EBrushAction","EColorAction","getPatternsSelectItems","ImageDataCanvas","ColorValue","backgroundColor","ELineAction","ColorComponent","changeColor","ColorPalette","sizeRange","sizeValueD","patternSizeRange","patternSizeValueD","opacityRange","opacityValueD","BrushComponent","handleSizeChange","setBrushParams","paramsValue","handlePatternChange","handleCompositeChange","handleOpacityChange","handleTypeChange","handleParamChange","paramsConfigMap","patternsSelectItems","paramsConfigMapSelector","paramConfig","SET_PARAMS","ESelectToolAction","LineComponent","setLineParams","EFullScreenAction","SelectToolComponent","setSelectToolParams","otherParams","SelectTool","EChangeFunctionsAction","fullscreenReducer","handleActions","ON","OFF","SET","REVERSE","reverseFullScreen","ToolsParams","component","setCurrentTool","SET_CURRENT","Tools","i18n","ToolControls","toolType","Wave","A","T","W","H","Tmax","Amax","pn","deg","SinCF","tRange","tValueD","seRange","seValueD","LoopCF","nextContext","CanvasByDrawFunction","Surface2d","xa","ya","WW","HH","XYCF","CFComponentByType","ChangeFComponent","changeCFParams","handleDelete","removeCF","handleAddSin","addCF","handleAddLoop","handleAddXY","handleModeChange","setChangingMode","cfs","changingMode","Component","CHANGE_PARAMS","ADD_CF","prevMode","On","Off","SET_MODE","REMOVE_CF","ChangeF","languageFromLocalStorage","localStorage","getItem","use","initReactI18next","init","interpolation","escapeValue","lng","resources","en","common","common_en","ru","common_ru","ELanguageAction","languageReducer","language","languages","AppControlsComponent","handleLanguage","setLanguage","newLang","changeLanguage","isFull","setItem","AppControls","fullScreen","Layout","full","setFullScreen","Main","createCleanCanvasState","createImageData","createCanvasStateFromImageData","ERoomsAction","getHistoryState","historyPush","historyLength","beforeNext","getStoreState","getMaskState","black","getRotationState","getRepeatingState","getImportState","getVideoState","patternReducers","maskState","updatePatternState","newCurrentImageData","newMaskImageData","historyReducers","undoResult","prev","afterNext","historyUndo","redoResult","next","historyRedo","maskReducers","importReducers","repeatingReducers","rotatingReducers","selectionReducers","videoReducers","roomReducers","patternsReducer","createPatternInitialState","omit","toolReducer","typeSelectItems","compositeOperationSelectItems","getBrushParamsConfig","brushReducer","getLineParamsConfig","lineReducer","getSelectToolParamsConfig","selectToolReducer","CurveLinear","roomsReducer","UPDATE_ROOMS","rooms","changeFunctionsReducer","getId","newFunctions","changingValuesReducer","toDelete","changingReducer","isChanging","colorReducer","changeReducer","changeFunctionData","immutable","rootReducer","reduceReducers","combineReducers","createStore","applyMiddleware","thunk","logger","App","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34612083.chunk.js","sourcesContent":["import {AddPatternAction, PatternConfig, PatternParams, RemovePatternAction} from \"./pattern/types\";\n\n// TODO типы\n\n\nexport enum EPatternsAction {\n    ADD_PATTERN = \"patterns/add\",\n    REMOVE_PATTERN = \"patterns/remove\",\n}\n\nexport const addPattern = (config?: PatternConfig, params?: PatternParams): AddPatternAction =>\n    ({type: EPatternsAction.ADD_PATTERN, config, params});\n\nexport const removePattern = (id: string): RemovePatternAction =>\n    ({type: EPatternsAction.REMOVE_PATTERN, id});\n\n","import {PatternAction} from \"../pattern/types\";\n\n\nexport enum EHistoryAction {\n    UNDO = \"pattern/undo\",\n    REDO = \"pattern/redo\",\n}\n\nexport interface PatternUndoAction extends PatternAction {\n}\n\nexport interface PatternRedoAction extends PatternAction {\n}\n\nexport const undo = (id: string): PatternUndoAction =>\n    ({type: EHistoryAction.UNDO, id});\nexport const redo = (id: string): PatternRedoAction =>\n    ({type: EHistoryAction.REDO, id});","import {Action} from \"redux\";\n\nexport enum EToolType {\n    Brush = \"Brush\",\n    Select = \"Select\",\n    Line = \"Line\",\n}\n\nexport interface SetCurrentToolAction extends Action {\n    tool: EToolType\n}\n\nexport const selectionTools = [EToolType.Select];","import * as React from \"react\";\nimport {Button} from \"../_shared/buttons/Button\";\nimport {HistoryValue} from \"../../store/patterns/history/types\";\nimport {useTranslation} from 'react-i18next';\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {redo, undo} from \"../../store/patterns/history/actions\";\n\nexport interface HistoryControlsStateProps {\n    history: HistoryValue\n\n}\n\nexport interface HistoryControlsActionProps {\n\n    redo(id: string)\n\n    undo(id: string)\n\n}\n\nexport interface HistoryControlsOwnProps {\n    patternId: string\n\n}\n\nexport interface HistoryControlsProps extends HistoryControlsStateProps, HistoryControlsActionProps, HistoryControlsOwnProps {\n\n}\n\nexport const HistoryControlsComponent: React.FC<HistoryControlsProps> = ({undo, redo, history, patternId}) => {\n\n    const onUndo = React.useCallback(() => {\n        undo(patternId);\n    }, [patternId]);\n\n    const onRedo = React.useCallback(() => {\n        redo(patternId);\n    }, [patternId]);\n\n    const {t} = useTranslation(\"common\");\n    return (\n        <div className={'flex-row history-controls'}>\n            <Button\n                onClick={onUndo}\n                disabled={!history.before.length}\n                width={70}>\n                {t('patternControls.undo')}{history.before.length ? `(${history.before.length})` : \"\"}</Button>\n            <Button\n                onClick={onRedo}\n                disabled={!history.after.length}\n                width={70}>\n                {t('patternControls.redo')}{history.after.length ? `(${history.after.length})` : \"\"}</Button>\n        </div>\n    );\n};\n\nconst mapStateToProps: MapStateToProps<HistoryControlsStateProps, HistoryControlsOwnProps, AppState> = (state, {patternId}) => ({\n    history: state.patterns[patternId]?.history.value\n});\n\nconst mapDispatchToProps: MapDispatchToProps<HistoryControlsActionProps, HistoryControlsOwnProps> = {\n    redo,\n    undo,\n};\n\nexport const HistoryControls = connect<HistoryControlsStateProps, HistoryControlsActionProps, HistoryControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(HistoryControlsComponent);\n","import {pointsDistance} from \"./geometry\";\n\nexport enum ESegType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n}\n\nexport enum EPathModeType {\n    M = \"M\",\n    L = \"L\",\n    Z = \"Z\",\n    Rect = \"Rect\",\n    Slice = \"Slice\",\n}\n\nexport interface Segment {\n    type: ESegType\n    values?: number[]\n}\n\nexport const RECT_LENGTH = 5;\n\nexport const Path = {\n    [EPathModeType.M]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.M, values: [x, y]}],\n    [EPathModeType.L]: (path: Segment[], [x, y]: number[]): Segment[] =>\n        [...path, {type: ESegType.L, values: [x, y]}],\n    [EPathModeType.Z]: (path: Segment[]): Segment[] =>\n        [...path, {type: ESegType.Z}],\n    [EPathModeType.Rect]: (path: Segment[], [x1, y1, x2, y2]: number[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            {type: ESegType.M, values: [x1, y1]},\n            {type: ESegType.L, values: [x2, y1]},\n            {type: ESegType.L, values: [x2, y2]},\n            {type: ESegType.L, values: [x1, y2]},\n            {type: ESegType.Z},\n            ...path.slice(sliceEnd + 1)\n        ]\n    },\n    [EPathModeType.Slice]: (path: Segment[], slice: Segment[], n = 0): Segment[] => {\n        let {sliceStart, sliceEnd} = findSliceBounds(path, n);\n        return [\n            ...path.slice(0, sliceStart),\n            ...slice,\n            ...path.slice(sliceEnd + 1)\n        ]\n    }\n};\n\nexport const findSliceBounds = (path, n) => {\n    let sliceStart, sliceEnd;\n    let m = 0;\n    for (let i = 0; i < path.length; i++) {\n        if (path[i].type === ESegType.M) {\n            if (m === n) {\n                sliceStart = i;\n                for (let j = i; j < path.length; j++) {\n                    if (path[j].type === ESegType.Z) {\n                        sliceEnd = j;\n                        break;\n                    }\n                }\n                break;\n            }\n            m++;\n        }\n    }\n\n    return {\n        sliceStart: typeof sliceStart === \"undefined\" ? path.length : sliceStart,\n        sliceEnd: typeof sliceEnd === \"undefined\" ? path.length : sliceEnd,\n    }\n};\n\nexport const getLastSlice = (path: Segment[]) => {\n    let i;\n    for (i = path.length - 1; i >= 0; i--) {\n        if (path[i].type === ESegType.M) {\n            break;\n        }\n    }\n\n    return path.slice(i);\n};\n\nexport interface NearestSegmentData {\n    index: number,\n    segment: Segment,\n    distance: number\n    startInSlice?: number,\n    sliceStart?: number\n    sliceEnd?: number\n    sliceN?: number\n    slice?: Segment[]\n}\n\nexport const getNearestSegment = (path: Segment[], x: number, y: number): NearestSegmentData => {\n    if (!path || !path.length)\n        return;\n\n    const nearest: NearestSegmentData = path.slice(1).reduce((res: NearestSegmentData, segment, index) => {\n        index++;\n\n        if (!segment.values)\n            return res;\n\n        const distance = pointsDistance(x, y, segment.values[0], segment.values[1]);\n\n        return distance < res.distance ? {\n            distance, segment,\n            index\n        } : res;\n    }, {\n        sliceStart: 0,\n        sliceEnd: 0,\n        startInSlice: 0,\n        index: 0,\n        segment: path[0],\n        distance: pointsDistance(x, y, path[0].values[0], path[0].values[1])\n    });\n\n    let sliceStart, sliceEnd;\n    nearest.sliceN = -1;\n    for (let i = 0; i < path.length; i++) {\n\n        if (path[i].type === ESegType.M && i <= nearest.index) {\n            sliceStart = i;\n            nearest.sliceN += 1;\n        }\n        if (path[i].type === ESegType.Z && i > nearest.index && !sliceEnd) {\n            sliceEnd = i;\n        }\n    }\n\n    nearest.sliceStart = sliceStart;\n    nearest.sliceEnd = sliceEnd;\n    nearest.startInSlice = sliceStart ? nearest.index % sliceStart : nearest.index;\n\n    nearest.slice = path.slice(nearest.sliceStart, nearest.sliceEnd + 1);\n\n\n    return nearest;\n};\n\nexport const pathDataToString = (pathData): string => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n    (path as any).setPathData(pathData);\n\n    return path.getAttribute(\"d\");\n};\n\nexport const stringToPathData = (string: string) => {\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n\n    path.setAttribute(\"d\", string);\n\n    return (path as any).getPathData();\n};\n\n","export const pointsDistance = (x1, y1, x2, y2) => {\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n};","import React from 'react';\nimport {canvasToImageData} from \"../../utils/canvas/helpers/imageData\";\n\nexport interface CanvasSVGProps {\n    children?: React.ReactNode\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    onDrag?(e: MouseEvent, pre: MouseEvent)\n\n    onMove?(e: MouseEvent, pre: MouseEvent)\n\n    onDown?(e: MouseEvent)\n\n    onUp?(e: MouseEvent)\n}\n\nexport interface CanvasSVGState {\n    dragging: boolean\n}\n\nexport class SVG extends React.PureComponent<CanvasSVGProps, CanvasSVGState> {\n\n    elementRef;\n    pre;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dragging: false\n        };\n\n        this.elementRef = React.createRef();\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.elementRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        this.elementRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n    }\n\n    // selectToolHandlers\n\n    private mouseDownHandler = e => {\n        this.setState({dragging: true});\n\n        const {onDown} = this.props;\n\n        onDown && onDown(e);\n    };\n\n    private mouseUpHandler = e => {\n        if (this.state.dragging) {\n            this.setState({dragging: false});\n\n            this.pre = null;\n            const {onUp} = this.props;\n\n            onUp && onUp(e);\n        }\n    };\n\n    private mouseMoveHandler = e => {\n        const {onDrag, onMove} = this.props;\n\n        this.state.dragging && onDrag && onDrag(e, this.pre);\n\n        onMove && onMove(e, this.pre);\n\n        this.pre = e;\n    };\n\n    render() {\n        const {children, width, height, className, style} = this.props;\n        return (\n            <svg\n                ref={this.elementRef}\n                width={width}\n                height={height}\n                className={className}\n                style={style}>\n                {children}\n            </svg>\n        )\n    }\n}","const defaultValue = (value, key?) => key;\nexport const objectToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = defaultValue,\n    text: (value: any, key: string) => string = defaultValue,\n    withNull?: boolean,\n    nullText?: string\n) => {\n    const items = Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));\n\n    return withNull\n        ? [{\n            value: null,\n            text: nullText || \"-\"\n        }, ...items] : items;\n\n};\n\nexport interface SelectItem {\n    value\n    text\n}\n\nconst defaultArrayValue = (item) => item;\nexport const arrayToSelectItems = (\n    array: any[],\n    value: (item: any) => any = defaultArrayValue,\n    text: (item: any) => string = defaultArrayValue\n): SelectItem[] =>\n    array?.map(item => ({\n        value: value(item),\n        text: text(item),\n    })) || [];\n\nconst defaultKey = ({name}) => name;\nexport const arrayToObject = (\n    array: any[],\n    key: (item: any) => string = defaultKey,\n    value: (item: any) => any = defaultValue\n) =>\n    array.reduce((res, item) => ({\n        ...res,\n        [key(item)]: value(item),\n    }), {});\n\n\nexport const enumToSelectItems = (\n    object: object,\n    value: (value: any, key: string) => any = value => value,\n    text: (value: any, key: string) => string = value => value\n) =>\n    Object.keys(object).map(key => ({\n        value: value(object[key], key),\n        text: text(object[key], key),\n    }));\n\nexport function randomInteger(min, max) {\n    var rand = min - 0.5 + Math.random() * (max - min + 1);\n    rand = Math.round(rand);\n    return rand;\n}\n\nexport const randomZ = () => {\n    const size0 = randomInteger(4, 11);\n\n    let s = \"\";\n    for (let i = 0; i < size0; i++) {\n        const ff = randomInteger(1, 20) > 10;\n        s += ff ? \"Z\" : \"z\"\n    }\n\n    return s;\n\n};\n\nconst tosSzZ = (string, offset) => string\n    .split(((0 + offset) % 4).toString()).join(\"z\")\n    .split(((1 + offset) % 4).toString()).join(\"s\")\n    .split(((2 + offset) % 4).toString()).join(\"k\")\n    .split(((3 + offset) % 4).toString()).join(\"i\");\nconst tozZsS = (string, offset) => string\n    .split(((0 + offset) % 4).toString()).join(\"s\")\n    .split(((1 + offset) % 4).toString()).join(\"z\")\n    .split(((2 + offset) % 4).toString()).join(\"S\")\n    .split(((3 + offset) % 4).toString()).join(\"z\");\n\n\nlet offset = 0;\nexport const dateZs = () => {\n\n    const date = new Date();\n\n    let f;\n\n    if (date.getDay() === 4) {\n        f = tozZsS;\n    } else if (date.getDay() === 4) {\n        f = tozZsS;\n    } else {\n        f = tosSzZ;\n    }\n\n    offset = (offset + 1) % 4;\n\n    return f(date.getTime().toString(4), 0);\n\n};","import {Action} from \"redux\";\n\nexport enum ECurveType {\n    CurveBasis = \"curveBasis\",\n    CurveBundle = \"curveBundle\",\n    CurveCardinal = \"curveCardinal\",\n    CurveCatmullRom = \"curveCatmullRom\",\n    CurveLinear = \"curveLinear\",\n    CurveMonotoneX = \"curveMonotoneX\",\n    CurveMonotoneY = \"curveMonotoneY\",\n    CurveNatural = \"curveNatural\",\n    CurveStep = \"curveStep\",\n    CurveStepBefore = \"curveStepBefore\",\n    CurveStepAfter = \"curveStepAfter\",\n}\n\nexport const CurveValueName = {\n    [ECurveType.CurveBundle]: \"beta\",\n    [ECurveType.CurveCardinal]: \"tension\",\n    [ECurveType.CurveCatmullRom]: \"alpha\"\n};\n\nexport enum ESelectionMode {\n    Line = \"Line\",\n    Rect = \"Rect\",\n    SimplePoints = \"SimplePoints\",\n    Points = \"Points\"\n}\n\nexport interface SelectToolParams {\n    mode: ESelectionMode\n    curveType?: ECurveType\n    curveValue?: number\n}\n\nexport interface SetSelectToolParamsAction extends Action {\n    params: SelectToolParams\n}","import * as React from \"react\";\nimport {pointsDistance} from \"../../utils/geometry\";\nimport {SVG} from \"../_shared/SVG\";\nimport * as d3 from \"d3\";\nimport {\n    EPathModeType,\n    ESegType,\n    getLastSlice,\n    getNearestSegment,\n    NearestSegmentData,\n    Path,\n    Segment,\n    stringToPathData\n} from \"../../utils/path\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport classNames from \"classnames\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {ESelectionMode, ECurveType, CurveValueName, SelectToolParams} from \"../../store/selectTool/types\";\nimport \"../../styles/selection.scss\"\nimport {Segments, SelectionParams} from \"../../store/patterns/selection/types\";\n\n\nconst lineFunction = d3\n    .line<Segment>()\n    .x(({values}) => values ? values[0] : 0)\n    .y(({values}) => values ? values[1] : 0)\n    .defined(({values}) => !!values);\n\n\nconst HANDLER_SIZE = 5;\n\n\nexport const selectionModesSelectItems = arrayToSelectItems(\n    [ESelectionMode.Rect, ESelectionMode.Line, ESelectionMode.Points]);\n\nexport const curveTypesSelectItems = arrayToSelectItems(Object.values(ECurveType), undefined, (item: string) => item[5].toLowerCase() + item.slice(6));\n\nexport interface CanvasSelectionStateProps {\n    currentTool: EToolType\n    selectToolParams: SelectToolParams\n}\n\nexport interface CanvasSelectionActionProps {\n}\n\nexport interface CanvasSelectionOwnProps {\n    isActive: boolean\n    params: SelectionParams\n\n    name: any\n    width: number\n    height: number\n\n    value?: Segments\n    className?: string\n    style?:any\n\n    onChange?(value: any, bBox: SVGRect)\n}\n\nexport interface CanvasSelectionProps extends CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps {\n\n}\n\nexport interface CanvasSelectionState {\n\n    startX: number\n    startY: number\n    offsetX: number\n    offsetY: number\n    points: any[]\n    closed: boolean\n    path: any[]\n    prevPath: any[] // нужно чтобы знать когда обновлять стейт из пропсов\n    curvePath: any[]\n    currentSliceN: number\n}\n\nclass CanvasSelectionComponent extends React.PureComponent<CanvasSelectionProps, CanvasSelectionState> {\n\n    canvasRef;\n    pathRef;\n    pathPointsRef;\n    maskPathRef;\n    maskRef;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n        this.pathRef = React.createRef();\n        this.pathPointsRef = React.createRef();\n        this.maskPathRef = React.createRef();\n        this.maskRef = React.createRef();\n\n        this.state = {\n            startX: null,\n            startY: null,\n            offsetX: null,\n            offsetY: null,\n            points: [],\n            closed: true,\n            path: [],\n            prevPath: null,\n            curvePath: [],\n            currentSliceN: 0\n        };\n    }\n\n    componentDidMount() {\n        const {value} = this.props;\n        Array.isArray(value) && this.setState({\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length\n        })\n    }\n\n    componentDidUpdate(prevProps: CanvasSelectionProps) {\n        if (prevProps.selectToolParams.mode !== this.props.selectToolParams.mode) {\n            this.selectToolHandlers[prevProps.selectToolParams.mode].exit(this.props.selectToolParams.mode)\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps: CanvasSelectionProps, prevState) {\n        const {value} = nextProps;\n        return Array.isArray(value) && value !== prevState.prevPath ? {\n            prevPath: value,\n            path: value,\n            currentSliceN: value.filter(({type}) => type === ESegType.M).length,\n        } : {}\n    }\n\n    commitChanges = () => {\n        const {onChange} = this.props;\n\n        onChange && onChange(this.state.path, this.maskPathRef.current && this.maskPathRef.current.getBBox());\n    };\n\n    selectToolHandlers = {\n        [ESelectionMode.Rect]: ({\n            down: e => {\n                const {path} = this.state;\n\n                if (path.length) {\n\n                    const nearest: NearestSegmentData = getNearestSegment(path, e.offsetX, e.offsetY);\n\n                    if (nearest && nearest.distance < HANDLER_SIZE * 2) {\n\n                        if (nearest.slice.length !== 5) {\n                            return this.setState(state => ({\n                                startX: e.offsetX,\n                                startY: e.offsetY,\n                                offsetX: 0,\n                                offsetY: 0,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], nearest.sliceN)\n                            }));\n                        } else {\n\n                            const oppositeIndex = (nearest.startInSlice + 2) % 4;\n                            const oppositeSeg = nearest.slice[oppositeIndex];\n\n                            const offsetX = nearest.segment.values[0] - e.offsetX;\n                            const offsetY = nearest.segment.values[1] - e.offsetY;\n\n                            const startX = oppositeSeg.values[0];\n                            const startY = oppositeSeg.values[1];\n\n                            return this.setState(state => ({\n                                startX, startY,\n                                offsetX, offsetY,\n                                currentSliceN: nearest.sliceN,\n                                path: Path[EPathModeType.Rect](state.path, [startX, startY, e.offsetX + offsetX, e.offsetY + offsetY], nearest.sliceN)\n                            }));\n                        }\n                    }\n                }\n                this.setState(({currentSliceN, path}) => ({\n                    offsetX: 0,\n                    offsetY: 0,\n                    startX: e.offsetX,\n                    startY: e.offsetY,\n                    path: Path[EPathModeType.Rect](path, [e.offsetX, e.offsetY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n\n            },\n            drag: e => {\n                this.setState(({path, startX, startY, offsetX, offsetY, currentSliceN}) => ({\n                    path: Path[EPathModeType.Rect](path, [startX, startY, e.offsetX, e.offsetY], currentSliceN)\n                }));\n            },\n            up: () => {\n                this.setState(state => ({\n                    startX: 0, startY: 0, offsetX: 0, offsetY: 0,\n                    currentSliceN: state.path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }),\n        [ESelectionMode.SimplePoints]: {\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    this.setState(({path}) => ({\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n\n                    if (curvePath.length) {\n                        this.setState(({path, currentSliceN}) => ({\n                            curvePath: [],\n                            path: Path[EPathModeType.Slice](path, curvePath, currentSliceN)\n                        }))\n                    }\n\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.Z](path),\n                            currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                        }), this.commitChanges);\n                    } else {\n                        this.setState(({path}) => ({\n                            path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                        }));\n                    }\n                }\n            },\n            drag: () => undefined,\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        },\n        [ESelectionMode.Points]: ({\n            down: e => {\n                const {path, curvePath} = this.state;\n\n                if (!path.length || path[path.length - 1].type === ESegType.Z) {\n                    // если пустой путь или закрытый\n\n                    const curvePath = Path[EPathModeType.M](this.state.curvePath, [e.offsetX, e.offsetY]);\n\n                    this.setState(({path}) => ({\n                        curvePath,\n                        path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                    }));\n                } else {\n                    if (!curvePath.length) {\n                        this.setState(({path}) => ({curvePath: getLastSlice(path)}))\n                    }\n                    const subFirst = path.filter(({type}) => type === ESegType.M).reverse()[0];\n\n                    if (pointsDistance(e.offsetX, e.offsetY, subFirst.values[0], subFirst.values[1]) < HANDLER_SIZE * 2) {\n                        // если пришли к началу\n\n                        this.setState(({path, curvePath}) => {\n                            let newCurvePath = Path[EPathModeType.L](curvePath, [subFirst.values[0], subFirst.values[1]]);\n                            newCurvePath = Path[EPathModeType.Z](newCurvePath);\n\n                            return {\n                                curvePath: [],\n                                path: Path[EPathModeType.Z](this.line(path, newCurvePath)),\n                                currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                            }\n                        }, this.commitChanges);\n                    } else {\n                        // следующая точкка\n\n                        this.setState(({path, curvePath}) => {\n                            const newCurvePath = Path[EPathModeType.L](curvePath, [e.offsetX, e.offsetY]);\n\n                            return {\n                                curvePath: newCurvePath,\n                                path: this.line(path, newCurvePath)\n                            }\n                        });\n                    }\n                }\n            },\n            drag: () => undefined, // можно сделать чтобы последняя точка перетаскивалась пока держишь\n            up: () => undefined,\n            exit: (nextMode) => {\n                const {path} = this.state;\n                if (path && path.length && path[path.length - 1].type !== ESegType.Z && nextMode !== ESelectionMode.Points) {\n                    this.setState(({path}) => ({\n                        curvePath: [],\n                        path: Path[EPathModeType.Z](path),\n                        currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                    }), this.commitChanges);\n                }\n            }\n        }),\n        [ESelectionMode.Line]: {\n            down: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.M](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            drag: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.L](path, [e.offsetX, e.offsetY])\n                }));\n            },\n            up: e => {\n                this.setState(({path}) => ({\n                    path: Path[EPathModeType.Z](path),\n                    currentSliceN: path.filter(({type}) => type === ESegType.M).length\n                }), this.commitChanges);\n            },\n            exit: (nextMode) => {\n            }\n        }\n    };\n\n    line = (path, line) => {\n        const {selectToolParams} = this.props;\n        const {curveType} = selectToolParams;\n        const curveValue = selectToolParams[CurveValueName[curveType]];\n\n        let curve = d3[curveType || \"curveLinear\"];\n        if (Object.keys(CurveValueName).indexOf(curveType) !== -1)\n            curve = curve[CurveValueName[curveType]](curveValue);\n\n        return Path[EPathModeType.Slice](\n            path,\n            stringToPathData(\n                lineFunction.curve(curve)(getLastSlice(line))),\n            this.state.currentSliceN);\n    };\n\n    render() {\n        console.log(\"selector render\", this.state.path);\n        const {width, height, selectToolParams: {mode}, isActive, name, style} = this.props;\n\n        this.pathRef.current && this.pathRef.current.setPathData(this.state.path);\n        this.maskPathRef.current && this.maskPathRef.current.setPathData(this.state.path);\n\n        console.log(this.maskPathRef.current && this.maskPathRef.current.getBBox());\n\n        return (\n            <div\n                style={style}\n                className={classNames(\"selection\", {\n                    [\"selectionActive\"]: isActive\n                })}>\n                <SVG\n                    width={width}\n                    height={height}\n                    onDown={this.selectToolHandlers[mode].down}\n                    onDrag={this.selectToolHandlers[mode].drag}\n                    onUp={this.selectToolHandlers[mode].up}>\n                    {this.state.path && this.state.path.length && <>\n                        <mask\n                            id={`selectionMask${name}`}\n                            ref={this.maskRef}>\n                            <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\"/>\n                            <path\n                                ref={this.maskPathRef}\n                                fillOpacity={1}\n                                fill=\"black\"/>\n                        </mask>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" fillOpacity={0.3}\n                              mask={`url(#selectionMask${name})`}/>\n                        <path\n                            ref={this.pathRef}\n                            fillOpacity={0}\n                            fill=\"black\"\n                            stroke={isActive ? \"greenyellow\" : \"red\"}/>\n                    </>}\n                </SVG>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps: MapStateToProps<CanvasSelectionStateProps, CanvasSelectionOwnProps, AppState> = state => ({\n    selectToolParams: state.selectTool.params,\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasSelectionActionProps, CanvasSelectionOwnProps> = {};\n\nexport const Selection = connect<CanvasSelectionStateProps, CanvasSelectionActionProps, CanvasSelectionOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasSelectionComponent);","/**\n * очистить канвас\n */\n\nexport const clearCanvas = (canvas: HTMLCanvasElement): void =>\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n/**\n * создать вспомогательный канвас\n */\n\nexport const createCanvas = (width: number, height: number) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return {\n        canvas, context\n    }\n};","import {createCanvas} from \"./base\";\n\nexport const canvasToImageData = (canvas: HTMLCanvasElement): ImageData =>\n    canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n\nexport function imageDataToCanvas(imageData: ImageData): HTMLCanvasElement {\n\n    const {canvas, context} = createCanvas(imageData.width, imageData.height);\n\n    context.putImageData(imageData, 0, 0);\n\n    return canvas;\n}\n\nexport const imageToImageData = (image): ImageData => {\n\n    const {context} = createCanvas(image.width, image.height);\n\n    context.drawImage(image, 0, 0);\n\n    return context.getImageData(0, 0, image.width, image.height);\n};\n\n\nexport const resizeImageData = (imageData: ImageData, width: number, height: number, noStretch?: boolean): ImageData => {\n    const oldCanvas = imageDataToCanvas(imageData);\n    const newCanvas = document.createElement('canvas');\n    newCanvas.width = width;\n    newCanvas.height = height;\n\n\n    const context = newCanvas.getContext(\"2d\");\n\n    context.imageSmoothingEnabled = false;\n\n    !noStretch\n        ? context.drawImage(oldCanvas, 0, 0, width, height)\n        : context.drawImage(oldCanvas, 0, height - oldCanvas.height, oldCanvas.width, oldCanvas.height);\n\n    return canvasToImageData(newCanvas);\n};\n\nexport const imageDataToBase64 = (imageData: ImageData): string => {\n\n    const {canvas, context} = createCanvas(imageData.width, imageData.height);\n\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n};\n\nexport const base64ToImageData = (src: string): Promise<ImageData> => {\n    return new Promise(resolve => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => {\n\n            const {canvas, context} = createCanvas(image.width, image.height);\n\n            context.drawImage(image, 0, 0);\n\n            resolve(context.getImageData(0, 0, canvas.width, canvas.height))\n\n        }\n    });\n};\n\nexport const getMaskedImage = (imageData: ImageData, maskImageData?: ImageData): HTMLCanvasElement => {\n\n    const {canvas, context} = createCanvas(imageData.width, imageData.height);\n\n    if (maskImageData) {\n        context.putImageData(maskImageData, 0, 0);\n        context.globalCompositeOperation = \"source-in\";\n    }\n    context.drawImage(imageDataToCanvas(imageData), 0, 0, imageData.width, imageData.height);\n\n    return canvas;\n\n};\n\n\n","export function getOffset(elem) {\n    if (!elem) return;\n\n    if (elem.getBoundingClientRect) {\n        // \"правильный\" вариант\n        return getOffsetRect(elem)\n    } else {\n        // пусть работает хоть как-то\n        return getOffsetSum(elem)\n    }\n}\n\nexport function getOffsetSum(elem) {\n    var top=0, left=0\n    while(elem) {\n        top = top + parseInt(elem.offsetTop)\n        left = left + parseInt(elem.offsetLeft)\n        elem = elem.offsetParent\n    }\n\n    return {top: top, left: left, box: null}\n}\n\nexport function getOffsetRect(elem) {\n    // (1)\n    var box = elem.getBoundingClientRect()\n\n    // (2)\n    var body = document.body\n    var docElem = document.documentElement\n\n    // (3)\n    var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop\n    var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft\n\n    // (4)\n    var clientTop = docElem.clientTop || body.clientTop || 0\n    var clientLeft = docElem.clientLeft || body.clientLeft || 0\n\n    // (5)\n    var top  = box.top +  scrollTop - clientTop\n    var left = box.left + scrollLeft - clientLeft\n\n    return { top: Math.round(top), left: Math.round(left), box }\n}","// REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING REPEATING\n\nimport {BezierPoints} from \"../../../components/_shared/canvases/BezierCurveRepeating\";\nimport {FunctionState} from \"../../../utils/patterns/function\";\n\nexport enum ERepeatingType {\n    Grid = \"Grid\",\n    Center = \"Center\",\n    Dart = \"Dart\",\n}\n\nexport interface RepeatingGridParams {\n    x: number\n    y: number\n    xOut: number\n    yOut: number\n    integer: boolean\n    bezierPoints?: BezierPoints\n    // x = (1−t)2x1 + 2(1−t)tx2 + t2x3\n}\n\nexport interface RepeatingParams {\n    type: ERepeatingType\n    gridParams: RepeatingGridParams\n}\n\nexport interface RepeatingValue {\n}\n\nexport type RepeatingState = FunctionState<RepeatingValue, RepeatingParams>;","import {PatternState} from \"../store/patterns/pattern/types\";\nimport * as Bezier from \"bezier-js\";\nimport {ERepeatingType} from \"../store/patterns/repeating/types\";\n\nexport const getRepeatingCoords = (x, y, pattern: PatternState) => {\n    if (!pattern.repeating) {\n        return [{x, y}];\n    }\n\n    const {params} = pattern.repeating;\n\n    if (params.type === ERepeatingType.Grid) {\n        const {gridParams: {x: xn, y: yn, bezierPoints, xOut, yOut}} = params;\n        const {current: {width, height}, rotation} = pattern;\n\n        const xd = width / xn;\n        const yd = height / yn;\n\n        x = x % xd;\n        y = y % yd;\n\n        if (x < 0) {\n            x +=xd;\n        }\n\n        if (y < 0) {\n            y +=yd;\n        }\n\n        const array = [];\n\n        const curve = new Bezier(bezierPoints);\n\n        for (let i = -xOut; i < xn + xOut; i++) {\n            const tx = (x + xd * i) / width;\n            const ai = curve.get(tx);\n\n\n            for (let j = -yOut; j < yn + yOut; j++) {\n\n                const ty = (y + yd * j) / height;\n                const aj = curve.get(ty);\n\n                const xij = width * ai.x / 100;\n                const yij = height * aj.y / 100;\n\n\n                array.push({\n                    x: xij,\n                    y: yij,\n                    outer: i < 0 || i >= xn || j < 0 || j >= yn\n                });\n            }\n        }\n\n        return array;\n\n\n    }\n\n    return [{x, y}];\n};\n\nexport function rotate(cx, cy, x, y, angle) {\n    var radians = (Math.PI / 180) * angle,\n        cos = Math.cos(radians),\n        sin = Math.sin(radians),\n        nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,\n        ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;\n    return {x: nx, y: ny};\n}","import React from 'react';\nimport {canvasToImageData} from \"../../utils/canvas/helpers/imageData\";\nimport \"../../styles/canvas.scss\";\nimport * as classNames from \"classnames\";\nimport {getOffset} from \"../../utils/offset\";\nimport {rotate} from \"../../utils/draw\";\nimport {RotationValue} from \"../../store/patterns/rotating/types\";\n\nexport interface CanvasEvent {\n    e: MouseEvent\n    pre?: MouseEvent\n    ctx: CanvasRenderingContext2D\n    canvas: HTMLCanvasElement\n    drawing?: boolean\n    rotation?: RotationValue\n}\n\nexport interface CanvasProps {\n    value?: ImageData\n    width?: number\n    height?: number\n    className?: string\n    style?: any\n\n    children?: React.ReactNode\n\n    rotation?: RotationValue\n\n    pointerLock?: boolean\n\n    updateOnDrag?: boolean\n\n    onDown?(e: CanvasEvent)\n\n    onUp?(e: CanvasEvent)\n\n    onDraw?(e: CanvasEvent)\n\n    onClick?(e: CanvasEvent)\n\n    onMove?(e: CanvasEvent)\n\n    releaseProcess?(e: CanvasEvent)\n\n    onChange?(imageData?: ImageData)\n\n    onLeave?(e?)\n\n\n}\n\nexport interface CanvasState {\n    drawing: boolean\n    startEvent: any\n}\n\nexport class Canvas extends React.PureComponent<CanvasProps, CanvasState> {\n\n    canvasRef;\n    ctx;\n    e;\n    pre;\n    requestID;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            drawing: false,\n            startEvent: null\n        };\n\n        this.canvasRef = React.createRef();\n        this.ctx = null;\n        this.pre = null;\n    }\n\n    componentDidMount() {\n        this.ctx = this.canvasRef.current.getContext(\"2d\");\n\n\n        this.canvasRef.current.addEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.addEventListener(\"mousemove\", this.mouseMoveHandler);\n        this.canvasRef.current.addEventListener(\"mouseenter\", this.mouseEnterHandler);\n        this.canvasRef.current.addEventListener(\"mouseleave\", this.mouseLeaveHandler);\n\n        if (this.props.value instanceof ImageData) {\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        this.canvasRef.current.removeEventListener(\"mousedown\", this.mouseDownHandler);\n        this.canvasRef.current.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n        this.canvasRef.current.removeEventListener(\"mouseenter\", this.mouseEnterHandler);\n        this.canvasRef.current.removeEventListener(\"mouseleave\", this.mouseLeaveHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        // console.log(Object.keys(this.props).reduce((res, key) => ({\n        //     ...res,\n        //     [key]: prevProps[key] !== this.props[key]\n        // }), {}));\n        //\n        // console.log(prevProps.value !== this.props.value ||\n        //     prevProps.width !== this.props.width ||\n        //     prevProps.height !== this.props.height);\n        if ((\n            prevProps.value !== this.props.value ||\n            prevProps.width !== this.props.width ||\n            prevProps.height !== this.props.height\n        ) && this.props.value instanceof ImageData) {\n\n            this.ctx = this.canvasRef.current.getContext(\"2d\");\n\n            this.ctx.putImageData(this.props.value, 0, 0);\n        }\n    }\n\n    private mouseDownHandler = e => {\n        if (this.props.pointerLock) {\n            this.canvasRef.current.requestPointerLock();\n        }\n\n        document.addEventListener(\"mouseup\", this.mouseUpHandler);\n        document.addEventListener(\"mousemove\", this.mouseDragHandler);\n\n        this.e = e;\n        this.setState({\n            drawing: true,\n            startEvent: e\n        });\n\n        const event = {\n            e,\n            ctx: this.ctx,\n            canvas: this.canvasRef.current,\n            drawing: true,\n            rotation: this.props.rotation\n        };\n\n        const {onDown} = this.props;\n\n        onDown && onDown(event);\n\n        this.start();\n\n        setTimeout(()=> {\n\n            const {onClick} = this.props;\n\n            onClick && onClick(event);\n        }, 10)\n\n    };\n\n    start = () => {\n\n        const {onDraw, onMove} = this.props;\n\n\n        if (!this.requestID) {\n\n            const changing = (time) => {\n\n                const e = this.e;\n                const {top, left, box} = getOffset(this.canvasRef.current);\n\n                const canvasCenter = {\n                    x: left + box.width / 2,\n                    y: top + box.height / 2\n                };\n                const rotatedE = rotate(canvasCenter.x, canvasCenter.y, e.pageX, e.pageY, this.props.rotation ? this.props.rotation.angle : 0);\n\n\n                this.state.drawing && onMove && onMove({\n                    e: {\n                        ...e,\n                        offsetX: rotatedE.x - canvasCenter.x + this.props.width / 2,\n                        offsetY: rotatedE.y - canvasCenter.y + this.props.height / 2,\n                    },\n                    pre: this.pre,\n                    ctx: this.ctx,\n                    canvas: this.canvasRef.current,\n                    drawing: this.state.drawing,\n                });\n\n                // todo тут видимо можно передать тайм в онДрав и использовать это время для энвелопа ил  нет?\n                this.state.drawing && onDraw && onDraw({\n                    e: {\n                        ...e,\n                        offsetX: rotatedE.x - canvasCenter.x + this.props.width / 2,\n                        offsetY: rotatedE.y - canvasCenter.y + this.props.height / 2,\n                    },\n                    pre: this.pre,\n                    ctx: this.ctx,\n                    canvas: this.canvasRef.current,\n                    drawing: true,\n                    rotation: this.props.rotation\n                });\n\n\n\n\n                this.requestID = requestAnimationFrame(changing);\n            };\n            this.requestID = requestAnimationFrame(changing);\n        }\n    };\n\n    stop = () => {\n        this.requestID && cancelAnimationFrame(this.requestID);\n        this.requestID = null;\n    };\n\n    private mouseMoveHandler = e => {\n        const {onMove} = this.props;\n\n        if (!this.state.drawing) {\n\n            this.pre = this.e;\n            this.e = e;\n\n            // если просто водим мышкой\n\n            onMove && onMove({\n                e: this.e,\n                pre: this.pre,\n                ctx: this.ctx,\n                canvas: this.canvasRef.current,\n                drawing: this.state.drawing,\n            });\n        }\n    };\n\n    mouseDragHandler = (e) => {\n\n        if (this.state.drawing) {\n            this.pre = this.e;\n            this.e = this.props.pointerLock ? {\n                ...e,\n                pageX: this.pre.pageX + e.movementX,\n                pageY: this.pre.pageY + e.movementY,\n            } : e;\n\n            // если водим при нажатии\n            // в этом случае onMove срабатывает в анимации\n\n        }\n    };\n\n    private mouseUpHandler = e => {\n        console.log('canvas up');\n\n        document.removeEventListener(\"mouseup\", this.mouseUpHandler);\n        document.removeEventListener(\"mousemove\", this.mouseDragHandler);\n\n        if (this.props.pointerLock) {\n            document.exitPointerLock();\n        }\n\n        this.stop();\n        if (this.state.drawing) {\n            this.setState({drawing: false, startEvent: e});\n\n            this.pre = null;\n            const {onChange} = this.props;\n\n            onChange && onChange(canvasToImageData(this.canvasRef.current));\n\n            const event = {\n                e,\n                ctx: this.ctx,\n                canvas: this.canvasRef.current,\n                drawing: false\n            };\n\n            const {onUp} = this.props;\n\n            onUp && onUp(event);\n\n            const {releaseProcess} = this.props;\n\n            releaseProcess && releaseProcess(event);\n        }\n    };\n\n    mouseEnterHandler = (e) => {\n\n        // console.log(e);\n        if (!this.state.drawing) {\n            // console.log(e);\n            // this.setState({startEvent: e});\n        } else {\n\n\n        }\n    };\n\n    mouseLeaveHandler = (e) => {\n\n        if (!this.state.drawing) {\n            // this.setState({startEvent: null});\n\n        } else {\n\n\n        }\n\n        const {onLeave} = this.props;\n\n        onLeave && onLeave(e);\n    };\n\n    render() {\n        const {value, width, height, className, style, children} = this.props;\n        // console.log(\"canvas render\", this.state);\n        return (\n            <div style={style} className={classNames(className, \"canvas\")}>\n                <canvas\n                    ref={this.canvasRef}\n                    width={width || (value ? value.width : 300)}\n                    height={height || (value ? value.height : 300)}/>\n                {children}\n            </div>\n        )\n    }\n}","import {Action} from \"redux\";\n\nexport enum EBrushType {\n    Square = \"Square\",\n    Circle = \"Circle\",\n    Pattern = \"Pattern\",\n}\n\nexport interface BrushParams {\n    size: number\n    patternSize: number\n    opacity: number\n    type: EBrushType\n    pattern: number\n    compositeOperation: EBrushCompositeOperation\n}\n\nexport interface SetBrushParamsAction extends Action {\n    params: BrushParams\n}\n\n\nexport interface SetSizeAction extends Action {\n    size: number\n}\n\nexport interface SetOpacityAction extends Action {\n    opacity: number\n}\n\nexport interface SetTypeAction extends Action {\n    brushType: EBrushType\n}\n\nexport interface SetPatternSizeAction extends Action {\n    patternSize: number\n}\n\n\nexport enum EBrushCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n    multiply = \"multiply\",\n    screen = \"screen\",\n    overlay = \"overlay\",\n    darken = \"darken\",\n    lighten = \"lighten\",\n    colorDodge = \"color-dodge\",\n    colorBurn = \"color-burn\",\n    hardLight = \"hard-light\",\n    softLight = \"soft-light\",\n    difference = \"difference\",\n    exclusion = \"exclusion\",\n    hue = \"hue\",\n    saturation = \"saturation\",\n    color = \"color\",\n    luminosity = \"luminosity\",\n}","import {Action} from \"redux\";\nimport {EBrushType} from \"../brush/types\";\n\nexport enum ELineType {\n    Default = \"Default\",\n    Interrupted = \"Interrupted\",\n    InterruptedOneStroke = \"InterruptedOneStroke\",\n    Pattern = \"Pattern\",\n}\n\nexport enum ELineCompositeOperation {\n    SourceOver = \"source-over\",\n    SourceAtop = \"source-atop\",\n    // SourceIn = \"source-in\",\n    // SourceOut = \"source-out\",\n    DestinationOver = \"destination-over\",\n    // DestinationAtop = \"destination-atop\",\n    // DestinationIn = \"destination-in\",\n    DestinationOut = \"destination-out\",\n    Lighter = \"lighter\",\n    // Copy = \"copy\",\n    Xor = \"xor\",\n    multiply = \"multiply\",\n    screen = \"screen\",\n    overlay = \"overlay\",\n    darken = \"darken\",\n    lighten = \"lighten\",\n    colorDodge = \"color-dodge\",\n    colorBurn = \"color-burn\",\n    hardLight = \"hard-light\",\n    softLight = \"soft-light\",\n    difference = \"difference\",\n    exclusion = \"exclusion\",\n    hue = \"hue\",\n    saturation = \"saturation\",\n    color = \"color\",\n    luminosity = \"luminosity\",\n}\n\nexport interface LineParams {\n    size: number\n    opacity: number\n    type: ELineType\n    compositeOperation: ELineCompositeOperation\n    pattern: number\n}\n\nexport interface SetLineParamsAction extends Action {\n    params: LineParams\n}","import {Action} from \"redux\";\nimport {CanvasPosition} from \"../../components/Area/canvasPosition.servise\";\n\nexport enum EChangeAction {\n    CHANGE = \"change\",\n    TO_START_VALUE = \"change/to-start-value\",\n    ALL_TO_START_VALUE = \"change/all-to-start-value\"\n}\n\nexport interface ChangeAction extends Action {\n    time: number\n    position: CanvasPosition\n}\n\nexport interface ChangeToStartValueAction extends Action {\n    path: string\n}\n\nexport const change = (time: number, position: CanvasPosition): ChangeAction =>\n    ({type: EChangeAction.CHANGE, time, position});\n\nexport const toStartValue = (path: string): ChangeToStartValueAction =>\n    ({type: EChangeAction.TO_START_VALUE, path});\n\nexport const allToStartValue = (): Action =>\n    ({type: EChangeAction.ALL_TO_START_VALUE});","export enum ChangingMode {\n    OnDraw = \"onDraw\",\n    On = \"on\",\n    Off = \"off\"\n}","export interface CanvasPosition {\n    x: number\n    y: number\n    patternId: string\n}\n\nexport const position = {\n    x: 0,\n    y: 0,\n    patternId: null\n};\n\nexport const setPosition = (x: number, y: number, patternId: string) => {\n    position.x = x;\n    position.y = y;\n    position.patternId = patternId;\n};\n\nexport class CursorHelper {\n    setPos;\n    constructor(color, size) {\n        const elem = document.createElement('div');\n        document.body.appendChild(elem);\n\n        this.setPos = (x, y) => {\n            elem.style.cssText = `position:absolute;top:${y - size/2}px;left:${x - size/2}px;width:${size}px;height:${size}px;opacity:1;z-index:100;background: ${color}; pointer-events: none;}`;\n        };\n    }\n}\n\nexport class TextHelper {\n    setText;\n    constructor(x, y) {\n        const elem = document.createElement('div');\n        document.body.appendChild(elem);\n\n        elem.style.cssText = `position:absolute;bottom:${y}px;left:${x}px;opacity:1;z-index:100;font-family: monospace;}`;\n\n        this.setText = (string) => {\n            elem.innerText = string;\n        };\n    }\n}\n\nexport const redHelper = new CursorHelper('#f00', 10);\nexport const blueHelper = new CursorHelper('#00f', 10);\nexport const greenHelper = new CursorHelper('#0f0', 10);\n\nexport const coordHelper = new TextHelper(10, 30);\nexport const coordHelper2 = new TextHelper(10, 50);\nexport const coordHelper3 = new TextHelper(10, 70);\n\n\n// const elem = document.createElement('div');\n// document.body.appendChild(elem);\n//\n// elem.style.cssText = `position:absolute;top:${0}px;left:${0}px;opacity:1;z-index:100;width:${300}px; height:${300}px; border: 1px solid rgba(0,0,0,.3)`;\n","import {allToStartValue, change} from \"../change/actions\";\nimport {ChangingMode} from \"./types\";\nimport {AppState} from \"../index\";\nimport {position} from \"../../components/Area/canvasPosition.servise\";\n\n// todo прикрутить сюда тайпскрипт\n\nexport enum EChangingAction {\n    START = \"changing/start\",\n    STOP = \"changing/stop\",\n    SET_MODE = \"changing/set-mode\"\n}\n\nlet requestID = null;\n\nexport const startChanging = () => (dispatch, getState) => {\n\n    if (!requestID) {\n        requestID && cancelAnimationFrame(requestID);\n\n        const startTime = performance.now();\n\n        requestID = requestAnimationFrame(function changing(time) {\n\n            dispatch(change(time - startTime, position));\n\n            requestID = requestAnimationFrame(changing);\n        });\n\n        return dispatch({type: EChangingAction.START})\n    }\n};\n\nexport const stopChanging = () => (dispatch, getState) => {\n\n    requestID && cancelAnimationFrame(requestID);\n\n    requestID = null;\n\n    return dispatch({type: EChangingAction.STOP})\n};\n\nexport const startDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw)\n        return dispatch(startChanging())\n\n};\nexport const stopDrawChanging = () => (dispatch, getState) => {\n    const state: AppState = getState();\n    const mode = state.changing.mode;\n\n    if (mode === ChangingMode.OnDraw) {\n        dispatch(allToStartValue());\n        return dispatch(stopChanging())\n    }\n};\n\nexport const setChangingMode = (mode: ChangingMode) => (dispatch, getState) => {\n\n    const state: AppState = getState();\n    const prevMode = state.changing.mode;\n\n    if (prevMode === mode) return;\n\n    if (mode === ChangingMode.OnDraw) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    } else if (mode === ChangingMode.On) {\n        dispatch(startChanging());\n    } else if (mode === ChangingMode.Off) {\n        if (prevMode === ChangingMode.On) {\n            dispatch(allToStartValue());\n            dispatch(stopChanging());\n        }\n    }\n\n    return dispatch({type: EChangingAction.SET_MODE, mode})\n};\n","import {createCanvas} from \"./base\";\nimport {RotationValue} from \"../../../store/patterns/rotating/types\";\n\nexport interface DrawMaskedDrawFunctionParams {\n    context: CanvasRenderingContext2D,\n    canvas: HTMLCanvasElement\n}\n\nexport type DrawMaskedDrawFunction = ({context, canvas}: DrawMaskedDrawFunctionParams) => void;\nexport const drawMasked = (maskImageData: ImageData, draw: DrawMaskedDrawFunction) => {\n    const {canvas, context} = createCanvas(maskImageData.width, maskImageData.height);\n\n    if (maskImageData) {\n        context.putImageData(maskImageData, 0, 0);\n        context.globalCompositeOperation = \"source-in\";\n    }\n\n    draw({context, canvas});\n\n    return {canvas, context};\n};\nexport const drawWithPositionAndRotation = (\n    rotation: RotationValue,\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction,\n    rotationInverse?: boolean,\n) => ({context, canvas}) => {\n\n    if (rotation) {\n        context.translate(x + rotation.offset.x * (rotationInverse ? -1 : 1), y + rotation.offset.y * (rotationInverse ? -1 : 1));\n        context.rotate(Math.PI * rotation.angle / 180 * (rotationInverse ? -1 : 1));\n    } else {\n        context.translate(x, y);\n    }\n\n    draw({canvas, context});\n\n    if (rotation) {\n        context.rotate(-Math.PI * rotation.angle / 180 * (rotationInverse ? -1 : 1));\n        context.translate(-x - rotation.offset.x * (rotationInverse ? -1 : 1), -y - rotation.offset.y * (rotationInverse ? -1 : 1));\n    } else {\n        context.translate(-x, -y);\n    }\n\n    return {canvas, context};\n};\nexport const drawWithRotation = (\n    angle: number,\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction,\n) => ({context, canvas}) => {\n\n    context.translate(x, y);\n    context.rotate(Math.PI * angle / 180);\n\n    draw({canvas, context});\n\n\n    context.rotate(-Math.PI * angle / 180);\n    context.translate(-x, -y);\n\n    return {canvas, context};\n};\nexport const drawWithPosition = (\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction\n) => ({context, canvas}) => {\n\n    context.translate(x, y);\n\n    draw({canvas, context});\n\n    context.translate(-x, -y);\n\n    return {canvas, context};\n};\nexport const drawMaskedWithPositionAndRotation = (\n    maskImageData: ImageData,\n    rotation: RotationValue,\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction,\n    rotationInverse?: boolean\n) => {\n    const {canvas, context} = drawMasked(maskImageData, drawWithPositionAndRotation(rotation, x, y, draw, rotationInverse));\n\n    return {canvas, context};\n};\nexport const drawMaskedWithPosition = (\n    maskImageData: ImageData,\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction\n) => {\n    const {canvas, context} = drawMasked(maskImageData, drawWithPosition(x, y, draw));\n\n    return {canvas, context};\n};\nexport const drawMaskedWithRotation = (\n    maskImageData: ImageData,\n    angle: number,\n    x: number, y: number,\n    draw: DrawMaskedDrawFunction\n) => {\n    const {canvas, context} = drawMasked(maskImageData, drawWithRotation(angle, x, y, draw));\n\n    return {canvas, context};\n};\nexport const drawWithMask = (maskImageData, rotation) => (x, y, patternImage, dx, dy, w, h): HTMLCanvasElement => {\n\n    const {canvas} = drawMasked(maskImageData, ({context}) => {\n        if (rotation) {\n            context.translate(x + rotation.offset.x, y + rotation.offset.y);\n            context.rotate(Math.PI * rotation.angle / 180);\n        } else {\n            context.translate(x, y);\n        }\n\n        context.drawImage(patternImage, dx, dy, w, h);\n\n        if (rotation) {\n            context.rotate(-Math.PI * rotation.angle / 180);\n            context.translate(-x - rotation.offset.x, -y - rotation.offset.y);\n        } else {\n            context.translate(-x, -y);\n        }\n    });\n\n    return canvas;\n};","/**\n * круг\n */\n\nexport const circle = (ctx: CanvasRenderingContext2D, x: number, y: number, r: number): void => {\n\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\n    ctx.fill();\n};","import * as React from \"react\";\nimport {Canvas, CanvasEvent, CanvasProps} from \"../_shared/Canvas\";\nimport {AppState} from \"../../store\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {BrushState} from \"../../store/brush/reducer\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {EBrushCompositeOperation, EBrushType} from \"../../store/brush/types\";\nimport {LineState} from \"../../store/line/reducer\";\nimport get from \"lodash/get\";\nimport {ELineType} from \"../../store/line/types\";\nimport {ELineCompositeOperation} from \"../../store/line/types\";\nimport {startDrawChanging, stopDrawChanging} from \"../../store/changing/actions\";\nimport {getRepeatingCoords} from \"../../utils/draw\";\nimport {setPosition} from \"./canvasPosition.servise\";\nimport {SVG} from \"../_shared/SVG\";\nimport classNames from \"classnames\";\nimport '../../styles/draw.scss';\nimport {\n    drawMaskedWithRotation,\n    drawWithRotation\n} from \"../../utils/canvas/helpers/draw\";\nimport {PatternsState} from \"../../store/patterns/types\";\nimport {circle} from \"../../utils/canvas/helpers/geometry\";\n\nexport interface CanvasDrawStateProps {\n    brush: BrushState\n    line: LineState\n    tool: EToolType\n    patterns: PatternsState\n}\n\nexport interface CanvasDrawActionProps {\n    startChanging()\n\n    stopChanging()\n}\n\nexport interface CanvasDrawOwnProps extends CanvasProps {\n    patternId: string\n    mask?: boolean\n}\n\nexport interface CanvasDrawProps extends CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps {\n}\n\nexport interface CanvasDrawState {\n    coords\n}\n\nfunction getRandomColor() {\n    // return \"black\";\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nclass CanvasDrawComponent extends React.PureComponent<CanvasDrawProps, CanvasDrawState> {\n\n    state = {\n        coords: []\n    };\n    handlers = {\n        [EToolType.Brush]: {\n            [EBrushType.Square]: (() => {\n                const squareBrush = (ev) => {\n                    const {ctx, e, canvas, rotation} = ev;\n                    console.log(ev);\n                    const {patterns, patternId} = this.props;\n                    const pattern = patterns[patternId];\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n                    const angle = rotation ? rotation.angle : 0;\n\n                    const selectionMask = pattern.selection && pattern.selection.value.mask;\n                    if (selectionMask) {\n\n                        getRepeatingCoords(e.offsetX, e.offsetY, pattern).forEach(({x, y}) => {\n\n                            const {canvas: image} = drawMaskedWithRotation(\n                                selectionMask,\n                                -angle,\n                                x, y,\n                                ({context}) => {\n\n                                    context.fillStyle = ctx.fillStyle;\n                                    context.fillRect(-size / 2, -size / 2, size, size)\n                                }\n                            );\n\n                            ctx.globalCompositeOperation = compositeOperation;\n                            ctx.drawImage(image, 0, 0);\n                        });\n\n\n                    } else {\n                        getRepeatingCoords(e.offsetX, e.offsetY, pattern).forEach(({x, y}) => {\n                            drawWithRotation(\n                                -angle,\n                                x, y,\n                                ({context}) => {\n                                    context.fillRect(-size / 2, -size / 2, size, size)\n                                },\n                            )({context: ctx, canvas});\n                        });\n                    }\n\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: squareBrush,\n                    click: squareBrush,\n                    cursors: ({x, y, outer}) => {\n\n                        let width = this.props.brush.params.size;\n                        let height = this.props.brush.params.size;\n\n                        const {rotation} = this.props;\n                        return x - width / 2 ? (\n                            <rect\n                                transform={`rotate(${-(rotation ? rotation.angle : 0)} ${x} ${y})`}\n                                x={x - width / 2}\n                                y={y - height / 2}\n                                width={width}\n                                height={height}\n                                stroke={\"black\"} fill=\"purple\"\n                                fillOpacity=\"0\" strokeOpacity={outer ? \"0.3\" : \"0.7\"}/>\n                        ) : null;\n                    }\n                }\n            })(),\n            [EBrushType.Circle]: (() => {\n                const circleBrush = (ev) => {\n                    const {ctx, e, canvas, rotation} = ev;\n                    const {patterns, patternId} = this.props;\n                    const pattern = patterns[patternId];\n                    const {size, opacity, compositeOperation} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    const angle = rotation ? rotation.angle : 0;\n\n                    const selectionMask = pattern.selection && pattern.selection.value.mask;\n                    if (selectionMask) {\n\n                        getRepeatingCoords(e.offsetX, e.offsetY, pattern).forEach(({x, y}) => {\n\n                            const {canvas: image} = drawMaskedWithRotation(\n                                selectionMask,\n                                -angle,\n                                x, y,\n                                ({context}) => {\n                                    context.fillStyle = ctx.fillStyle;\n                                    circle(context, 0, 0, size / 2);\n                                },\n                            );\n\n                            ctx.globalCompositeOperation = compositeOperation;\n                            ctx.drawImage(image, 0, 0);\n                        });\n\n                    } else {\n\n                        getRepeatingCoords(e.offsetX, e.offsetY, pattern).forEach(({x, y}) => {\n                            drawWithRotation(\n                                -angle,\n                                x, y,\n                                ({context}) => {\n                                    circle(context, 0, 0, size / 2);\n                                }\n                            )({context: ctx, canvas});\n                        });\n                    }\n\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: circleBrush,\n                    click: circleBrush,\n                    cursors: ({x, y, outer}) => {\n\n                        return (\n                            <circle\n                                cx={x}\n                                cy={y}\n                                r={this.props.brush.params.size / 2}\n                                stroke={\"black\"} fill=\"purple\"\n                                fillOpacity=\"0\" strokeOpacity={outer ? \"0.3\" : \"0.7\"}/>\n                        )\n                    }\n                }\n            })(),\n            [EBrushType.Pattern]: (() => {\n                const patternBrush = (ev) => {\n                    const {ctx, e, canvas} = ev;\n                    const {patterns, patternId} = this.props;\n                    const {patternSize, opacity, compositeOperation, pattern} = this.props.brush.params;\n\n                    ctx.fillStyle = getRandomColor();\n                    ctx.globalAlpha = opacity;\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.imageSmoothingEnabled = true;\n\n                    const destinationPattern = patterns[patternId];\n                    const brushPattern = patterns[pattern];\n\n                    const brushRotation = brushPattern && brushPattern.rotation && brushPattern.rotation.value;\n                    const destinationRotation = destinationPattern && destinationPattern.rotation && destinationPattern.rotation.value;\n\n                    const brushPatternImage = brushPattern && brushPattern.resultImage;\n\n                    if (brushPatternImage) {\n\n\n                        const dr = ({x, y}) => {\n\n                            const width = patternSize * brushPatternImage.width;\n                            const height = patternSize * brushPatternImage.height;\n\n\n                            const selectionMask = destinationPattern.selection && destinationPattern.selection.value.mask;\n\n                            if (selectionMask) {\n                                const {canvas: image} = drawMaskedWithRotation(\n                                    selectionMask,\n                                    -destinationRotation.angle + brushRotation.angle,\n                                    x + brushRotation.offset.x, y + brushRotation.offset.y,\n                                    ({context}) => {\n                                        context.drawImage(brushPatternImage, -width / 2, -height / 2, width, height)\n                                    }\n                                );\n\n                                ctx.globalCompositeOperation = compositeOperation;\n                                ctx.drawImage(image, 0, 0);\n                            } else {\n                                const destAngle = destinationRotation? destinationRotation.angle : 0;\n                                const brushAngle = brushRotation ? brushRotation.angle : 0;\n                                const brushOffset = brushRotation ? {\n                                        x: brushRotation.offset.x, y: brushRotation.offset.y\n                                    } : {x: 0, y: 0};\n\n                                drawWithRotation(-destAngle + brushAngle,\n                                    x + brushOffset.x, y + brushOffset.y,\n                                    ({context}) => {\n                                        context.drawImage(brushPatternImage, -width / 2, -height / 2, width, height)\n                                    }\n                                )({context: ctx, canvas})\n                            }\n\n                        };\n\n                        getRepeatingCoords(e.offsetX, e.offsetY, destinationPattern).forEach(dr);\n                    }\n                    ctx.globalCompositeOperation = EBrushCompositeOperation.SourceOver;\n                    ctx.globalAlpha = 1;\n                };\n                return {\n                    draw: patternBrush,\n                    click: patternBrush,\n                    cursors: ({x, y, outer}) => {\n\n\n                        const {patterns} = this.props;\n                        const {pattern, patternSize} = this.props.brush.params;\n\n\n                        const brushPattern = patterns[pattern];\n\n                        const brushRotation = brushPattern && brushPattern.rotation && brushPattern.rotation.value;\n                        const brushPatternImage = brushPattern && brushPattern.resultImage;\n\n                        const width = patternSize * (brushPatternImage && brushPatternImage.width);\n                        const height = patternSize * (brushPatternImage && brushPatternImage.height);\n\n                        const {rotation} = this.props;\n                        return x - width / 2 ? (\n                            <rect\n                                transform={rotation && brushRotation ? `rotate(${-rotation.angle + brushRotation.angle} ${x} ${y})` : \"\"}\n                                x={x - width / 2}\n                                y={y - height / 2}\n                                width={width}\n                                height={height}\n                                stroke={\"black\"} fill=\"purple\"\n                                fillOpacity=\"0\" strokeOpacity={outer ? \"0.3\" : \"0.7\"}/>\n                        ) : null;\n                    }\n                }\n            })(),\n        },\n        [EToolType.Line]: {\n            [ELineType.Default]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.beginPath();\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();\n                    ctx.lineWidth = size;\n\n                    ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    ctx.lineTo(e.offsetX, e.offsetY);\n                    // ctx.strokeStyle = getRandomColor();\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.Interrupted]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n\n                    ctx.beginPath();\n                    ctx.globalCompositeOperation = compositeOperation;\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    if (!pre) return;\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n\n                    console.log(pre === e, ev);\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                    e.ctx.closePath();\n                }\n            },\n            [ELineType.InterruptedOneStroke]: {\n                click: (ev) => {\n                    const {ctx, e} = ev;\n                    const {size, opacity, compositeOperation} = this.props.line.params;\n\n                    ctx.globalCompositeOperation = compositeOperation;\n\n                    ctx.globalAlpha = opacity;\n                    ctx.strokeStyle = getRandomColor();//\"green\";\n                    ctx.lineWidth = size;\n\n                    // ctx.moveTo(e.offsetX, e.offsetY);\n\n                },\n                draw: (ev) => {\n                    const {ctx, e, pre} = ev;\n                    const {size, opacity} = this.props.line.params;\n\n                    ctx.lineWidth = size;\n                    ctx.globalAlpha = opacity;\n                    if (!pre) return;//\"green\";\n\n                    ctx.beginPath();\n                    ctx.moveTo(pre.offsetX, pre.offsetY);\n\n                    ctx.lineTo(e.offsetX, e.offsetY);\n\n                    ctx.stroke();\n                    ctx.closePath();\n                },\n                release: e => {\n\n                    e.ctx.globalCompositeOperation = ELineCompositeOperation.SourceOver;\n                    e.ctx.globalAlpha = 1;\n                }\n            }\n        },\n    };\n\n    componentDidUpdate(prevProps: CanvasDrawProps) {\n        const {patternId} = this.props;\n        if (prevProps.patterns[patternId].selection.params.mask) {\n            //todo чо я тут хотел\n        }\n\n    }\n\n    downHandler = (e: CanvasEvent) => {\n        const {startChanging} = this.props;\n\n        startChanging();\n\n        this.setState({\n            coords: []\n        });\n    };\n\n    clickHandler = () => {\n\n    };\n\n    moveHandler = ({e, drawing}: CanvasEvent) => {\n\n        if (!drawing) {\n            this.setState({\n                coords: getRepeatingCoords(e.offsetX, e.offsetY, this.props.patterns[this.props.patternId])\n            });\n        } else {\n\n        }\n\n        setPosition(e.offsetX, e.offsetY, this.props.patternId);\n    };\n\n    leaveHandler = () => {\n        this.props.onLeave && this.props.onLeave();\n\n        this.setState({coords: []})\n    };\n\n    upHandler = ({e}) => {\n        const {stopChanging} = this.props;\n\n        stopChanging();\n\n        this.setState({coords: getRepeatingCoords(e.offsetX, e.offsetY, this.props.patterns[this.props.patternId])})\n    };\n\n    getHandlers = () => {\n        const {tool} = this.props;\n\n        const getType = ToolTypeGetter[tool];\n        const type = getType && getType(this.props);\n        return this.handlers && this.handlers[tool] && this.handlers[tool][type];\n        //todo рефакторинг\n        // хендлеры событий вынести в методы класса\n        //\n    };\n\n    handleChange = (imageData: ImageData) => {\n        if (this.props.mask)\n            for (let i = 0; i < imageData.data.length; i += 4) {\n\n                imageData.data[i] = 0;\n                imageData.data[i + 1] = 0;\n                imageData.data[i + 2] = 0;\n            }\n\n        this.props.onChange(imageData);\n    };\n\n    render() {\n        const {children, width, height, className, mask} = this.props;\n\n        const handlers = this.getHandlers();\n\n        return (\n            <Canvas\n                className={classNames(\"draw\", {'mask' : mask}, className)}\n                onDown={this.downHandler}\n                onClick={handlers && handlers.click}\n                onMove={this.moveHandler}\n                onDraw={handlers && handlers.draw}\n                onLeave={this.leaveHandler}\n                onUp={this.upHandler}\n                releaseProcess={handlers && handlers.release}\n                width={width}\n                height={height}\n                {...this.props}\n                onChange={this.handleChange}>\n                {handlers && handlers.cursors &&\n                <SVG\n                    className={\"draw-cursors\"}\n                    width={width}\n                    height={height}>\n                    {this.state.coords.map(handlers.cursors)}\n                </SVG>}\n                {children}\n            </Canvas>\n        );\n    }\n}\n\nconst ToolTypeGetter = {\n    [EToolType.Line]: props => get(props, \"line.params.type\"),\n    [EToolType.Brush]: props => get(props, \"brush.params.type\"),\n};\n\nconst mapStateToProps: MapStateToProps<CanvasDrawStateProps, CanvasDrawOwnProps, AppState> = state => ({\n    brush: state.brush,\n    line: state.line,\n    tool: state.tool.current,\n    patterns: state.patterns //todo придуматть как оптимизировать тут\n});\n\nconst mapDispatchToProps: MapDispatchToProps<CanvasDrawActionProps, CanvasDrawOwnProps> = {\n    startChanging: startDrawChanging, stopChanging: stopDrawChanging\n};\n\nexport const Draw = connect<CanvasDrawStateProps, CanvasDrawActionProps, CanvasDrawOwnProps, AppState>(\n    mapStateToProps, mapDispatchToProps\n)(CanvasDrawComponent);","import * as React from \"react\";\nimport * as classnames from 'classnames'\n\nexport interface InputNumberProps {\n    onChange(value: number): void\n\n    min?: number\n    max?: number\n    step?: number\n    value?: number\n    delay?: number\n    notZero?: boolean\n\n    className?: string\n}\n\nlet timer;\n\nexport const InputNumber: React.FC<InputNumberProps> = ({className, value, onChange, min = 0, max = 1, step = 0.05, delay, notZero}) => {\n\n    const [_value, set_value] = React.useState(value);\n\n    React.useEffect(() => {\n        value !== _value && !timer && set_value(value)\n    });\n\n    const changeHandler = e => {\n        const n_value = +e.target.value;\n\n        if (!delay) {\n\n            if (notZero && !n_value) {\n                return;\n            }\n\n            set_value(n_value);\n            onChange(n_value)\n\n        } else {\n\n            set_value(n_value);\n\n            timer && clearTimeout(timer);\n            timer = setTimeout(() => {\n                if (notZero && !n_value) {\n                    set_value(value);\n                    return;\n                }\n\n                onChange(n_value);\n                clearTimeout(timer);\n                timer = null; // чистим таймер чтобы обновлять значение из пропсов только когда таймер не запущен\n\n            }, delay)\n        }\n    };\n\n    return (\n        <input\n            className={classnames(\"input-number\", className)}\n            type=\"number\"\n            step={step}\n            min={min}\n            max={max}\n            value={_value}\n            onChange={changeHandler}/>\n    );\n};","import {Action} from \"redux\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\n\n\nexport enum ECFType {\n    SIN = \"sin\",\n    LOOP = 'loop',\n    XY_PARABOLOID = 'parab',\n}\n\nexport interface ChangeFunction {\n    id: string\n    type: ECFType\n    params: any\n    // paramsConfig: any\n    paramsConfig: ParamConfig[]\n}\n\nexport interface AddCFAction extends Action {\n    cfType: ECFType\n}\n\nexport interface RemoveCFAction extends Action {\n    name: string\n}\n\nexport interface ChangeCFParamsAction extends Action {\n    id: string\n    params: any\n}\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {EToolType, selectionTools} from \"../../store/tool/types\";\nimport {Selection} from \"./Selection\";\nimport {Draw} from \"./Draw\";\nimport \"../../styles/area.scss\";\nimport {RotationValue} from \"../../store/patterns/rotating/types\";\nimport {Segments, SelectionParams, SelectionValue} from \"../../store/patterns/selection/types\";\n\nexport interface AreaStateProps {\n    currentTool: EToolType\n}\n\nexport interface AreaActionProps {\n}\n\nexport interface AreaOwnProps {\n    mask?: boolean\n    name: any // нужен для маски выделения\n    height: number\n    width: number\n    rotation?: RotationValue\n\n    imageValue: ImageData\n    selectionValue: Segments\n    selectionParams: SelectionParams\n\n    onImageChange(imageData: ImageData)\n\n    onSelectionChange(selectionValue: SelectionValue, bBox: SVGRect)\n}\n\nexport interface AreaProps extends AreaStateProps, AreaActionProps, AreaOwnProps {\n\n}\n\nexport interface AreaState {\n    rotation?: RotationValue\n    style?: any\n}\n\nconst getStyle = (rotation) => rotation ? {\n    transform: `rotate(${rotation.angle}deg) translateY(${-rotation.offset.y}px) translateX(${rotation.offset.x}px)`,\n} : null;\n\nclass AreaComponent extends React.PureComponent<AreaProps, AreaState> {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: getStyle(props.rotation),\n            rotation: props.rotation\n        };\n    }\n\n\n    static getDerivedStateFromProps(props, state) {\n        // if (state.rotation !== props.rotation) {\n            return {\n                rotation: props.rotation,\n                style: getStyle(props.rotation)\n            }\n        // }\n    }\n\n    render() {\n        const {mask, currentTool, name, height, width, imageValue, selectionValue, selectionParams, onImageChange, onSelectionChange, rotation} = this.props;\n\n        console.log(\"area\", this.state);\n        return (\n            <div className=\"area\">\n                <Draw\n                    mask={mask}\n                    patternId={name}\n                    style={this.state.style}\n                    rotation={rotation}\n                    value={imageValue}\n                    width={width}\n                    height={height}\n                    onChange={onImageChange}/>\n                <Selection\n                    style={this.state.style}\n                    isActive={selectionTools.indexOf(currentTool) !== -1}\n                    name={name}\n                    width={width}\n                    height={height}\n                    value={selectionValue}\n                    params={selectionParams}\n                    onChange={onSelectionChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<AreaStateProps, AreaOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<AreaActionProps, AreaOwnProps> = {};\n\nexport const Area = connect<AreaStateProps, AreaActionProps, AreaOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(AreaComponent);","import * as React from \"react\";\nimport {Button, ButtonEventData, ButtonProps} from \"./Button\";\nimport * as classNames from \"classnames\";\n\nexport interface ButtonSelectEventData extends ButtonEventData {\n    selected?: boolean\n}\n\nexport interface ButtonSelectProps extends ButtonProps {\n    selected?: boolean\n\n    onClick?(data?: ButtonSelectEventData)\n\n    onMouseDown?(data?: ButtonSelectEventData)\n\n    onMouseUp?(data?: ButtonSelectEventData)\n}\n\nexport class ButtonSelect extends React.PureComponent<ButtonSelectProps> {\n    render() {\n        const {className, selected, onClick, onMouseDown, onMouseUp, ...props} = this.props;\n\n        return (\n            <Button\n                {...props}\n                onClick={data => onClick && onClick({...data, selected})}\n                onMouseDown={data => onMouseDown && onMouseDown({...data, selected})}\n                onMouseUp={data => onMouseUp && onMouseUp({...data, selected})}\n                className={classNames(\"button-select\", className, {[\"button-select-selected\"]: selected})}/>\n        );\n    }\n}","import * as React from \"react\";\nimport * as keyboardjs from \"keyboardjs\";\n\nexport interface KeyProps {\n    keys: string | string[]\n\n    onPress?(e?: any, keys?: string | string[])\n\n    onRelease?(e?: any, keys?: string | string[])\n}\n\nexport interface KeyState {\n    keys: string\n}\n\nexport class Key extends React.PureComponent<KeyProps, KeyState> {\n\n    // state = {\n    //     keys: null\n    // };\n\n    handlePress = e => {\n        e.preventRepeat();\n        const {onPress, keys} = this.props;\n        onPress && onPress(e, keys)\n    };\n\n    handleRelease = e => {\n        const {onRelease, keys} = this.props;\n        onRelease && onRelease(e, keys)\n    };\n\n    // static getDerivedStateFromProps(props, state) {\n    //     if (props.keys !== state.keys) {\n    //         return {keys: props.keys};\n    //     }\n    //     return;\n    // }\n\n    componentDidMount() {\n        const {keys} = this.props;\n        console.log(this.props);\n        keyboardjs.bind(keys, this.handlePress, this.handleRelease)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.keys !== this.props.keys) {\n            keyboardjs.unbind(prevProps.keys, this.handlePress, this.handleRelease);\n            keyboardjs.bind(this.props.keys, this.handlePress, this.handleRelease);\n        }\n    }\n\n    componentWillUnmount() {\n        keyboardjs.unbind(this.props.keys, this.handlePress, this.handleRelease);\n    }\n\n    render() {\n        console.log(\"keys render\", this.props.keys);\n        return <></>;\n    }\n}","import * as React from \"react\";\nimport {AmplitudeComponentProps} from \"./types\";\n\nexport interface LoopAmplitudeProps extends AmplitudeComponentProps {\n\n}\n\nexport const LoopAmplitude: React.FC<LoopAmplitudeProps> = ({range, params, changingStartValue, changeFunctionId, changing, buttonWidth}) => {\n\n    return (\n        <div\n            className={\"button-number-amplitude\"}\n            style={{\n                width: (params.end - params.start) * 100 + \"%\",\n                left: `${params.start * 100}%`\n            }}>\n                    <span>\n                    {changeFunctionId}\n                    </span>\n        </div>\n    );\n};","import {ActivateValueChangingAction, DeactivateValueChangingAction, SetValueInChangingListAction} from \"./types\";\nimport {toStartValue} from \"../change/actions\";\nimport {AppState} from \"../index\";\n\n\n// todo typescript\nexport enum EChangingValuesAction {\n    SET_VALUE_IN_CHANGING_LIST = \"changing-values/set-value\",\n    SET_START_VALUE = \"changing-values/set-start-value\",\n\n    ACTIVATE_VALUE_CHANGING = \"changing-values/activate\",\n    DEACTIVATE_VALUE_CHANGING = \"changing-values/deactivate\",\n}\n\nexport const setValueInChangingList =\n    (path: string, changeFunctionId: string, range: [number, number], startValue: number) => (dispatch) => {\n        dispatch(toStartValue(path));\n        dispatch({\n            type: EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST,\n            path, changeFunctionId, range, startValue\n        })\n    };\n\nexport const setStartValue =\n    (path: string, startValue: number) => (dispatch) => {\n        dispatch({\n            type: EChangingValuesAction.SET_START_VALUE,\n            path, startValue\n        })\n    };\n\nexport const activateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch({type: EChangingValuesAction.ACTIVATE_VALUE_CHANGING, path});\n    }\n};\n\nexport const deactivateValueChanging = (path: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const {changingValues} = state;\n\n    if (changingValues[path]) {\n        dispatch(toStartValue(path));\n        dispatch({type: EChangingValuesAction.DEACTIVATE_VALUE_CHANGING, path});\n    }\n};","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect, ButtonSelectProps, ButtonSelectEventData} from \"../ButtonSelect\";\nimport {Key} from \"../../Key\";\nimport {ECFType} from \"../../../../store/changeFunctions/types\";\nimport {getOffset} from \"../../../../utils/offset\";\nimport {LoopAmplitude} from \"./LoopAmplitude\";\nimport {ParaboloidAmplitude} from \"./ParaboloidAmplitude\";\nimport {SinAmplitude} from \"./SinAmplitude\";\nimport '../../../../styles/buttonNumber.scss';\n\nconst DEFAULT_WIDTH = 70;\nconst defaultGetText = value => value.toFixed(1);\n\nexport const ValueD = {\n    VerticalLinear: (step: number) => (oldValue: any, dx: number, dy) => oldValue - dy / step,\n};\n\nconst amplitudeComponent = {\n    [ECFType.SIN]: SinAmplitude,\n    [ECFType.LOOP]: LoopAmplitude,\n    [ECFType.XY_PARABOLOID]: ParaboloidAmplitude,\n};\n\nexport interface ButtonNumberEventData extends ButtonSelectEventData {\n}\n\nexport interface ButtonNumberProps extends ButtonSelectProps {\n\n    integer?: boolean\n\n    width?: number\n    precision?: number | ((value?: any) => number)\n\n    text?: string\n\n    getText?(value?: any): string\n\n    range?: [number, number]\n\n    shortcut?: string | string[]\n\n\n    valueD?(oldValue: any, dx: number, dy: number): any\n\n    onChange?(data?: ButtonNumberEventData)\n\n    onMouseDown?(data?: ButtonNumberEventData)\n\n    onMouseUp?(data?: ButtonNumberEventData)\n\n    onClick?(data?: ButtonNumberEventData)\n\n    onPress?(data?: ButtonNumberEventData)\n\n    onRelease?(data?: ButtonNumberEventData)\n\n\n    changeFunctionId?: string\n    changeFunctionType?: ECFType\n    changingStartValue?: number\n    changeFunctionParams?: any\n\n}\n\nexport interface ButtonNumberState {\n    value?: any\n    startPoint: [number, number]\n    startValue?: any\n}\n\nexport class ButtonNumber extends React.Component<ButtonNumberProps, ButtonNumberState> {\n\n    buttonRef;\n\n    constructor(props) {\n        super(props);\n\n        const {range} = props;\n\n        this.state = {\n            value: props.value || range[0],\n            startPoint: null,\n            startValue: null,\n        };\n\n        this.buttonRef = React.createRef();\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.value !== this.state.value\n            || !!nextState.startPoint || !!this.state.startPoint\n            || nextProps.changingStartValue !== this.props.changingStartValue\n            || nextProps.changeFunctionParams !== this.props.changeFunctionParams\n            || nextProps.changeFunctionId !== this.props.changeFunctionId\n            || nextProps.shortcut !== this.props.shortcut\n            || nextProps.className !== this.props.className;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            ...(!prevState.startPoint && nextProps.value !== prevState.value ? {\n                value: nextProps.value\n            } : {}),\n        };\n    }\n\n    handleDown = data => {\n\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {e} = data;\n        e.persist();\n\n        const {onMouseDown, name, selected} = this.props;\n        const {value} = this.state;\n\n        onMouseDown && onMouseDown({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: [e.clientX, e.clientY]\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handleMove);\n            document.addEventListener(\"mouseup\", this.handleUp);\n        });\n    };\n\n    handleMove = e => {\n        const {onChange, name, selected} = this.props;\n        const value = this.calcValue(e);\n\n        onChange && onChange({e, value, name, selected});\n\n        this.setState({value});\n    };\n\n    calculateOneStep = (value) => {\n        const {precision = 100, range} = this.props;\n        if (typeof precision === \"function\") {\n            return (range[1] - range[0]) / precision(value)\n        } else {\n            return (range[1] - range[0]) / precision\n        }\n    };\n\n    handleUp = (e) => {\n        // //  modulation\n\n\n        const {changingStartValue, onClick, onMouseUp, onChange, name, selected, width = DEFAULT_WIDTH, precision = 100, range} = this.props;\n        let value = this.calcValue(e);\n\n\n\n        const one = this.calculateOneStep(value);\n        if (Math.abs(value - this.state.startValue) < one) {\n\n            const {left} = getOffset(e.target);\n\n            value = Math.min(Math.max(\n                this.state.startValue + (left + width / 2 < e.pageX ? one : -one)\n                , range[0]), range[1]);\n\n            onChange && onChange({e, value, name, selected});\n        } else {\n            onMouseUp && onMouseUp({e, value, name, selected});\n\n            onClick && onClick({value, name, e, selected});\n\n        }\n\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handleMove);\n            document.removeEventListener(\"mouseup\", this.handleUp);\n        });\n\n\n    };\n\n\n    handlePress = e => {\n        if (this.state.startValue) {\n            return;\n        }\n\n        const {onPress, name, selected} = this.props;\n        const {value} = this.state;\n\n        onPress && onPress({e, value, name, selected});\n\n        this.setState(({value}) => ({\n            startValue: value,\n            startPoint: null\n        }), () => {\n            document.addEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    handlePressed = e => {\n        if (!this.state.startPoint) {\n            this.setState({\n                startPoint: [e.clientX, e.clientY]\n            });\n        } else {\n            const {onChange, name, selected} = this.props;\n            const value = this.calcValue(e);\n\n            onChange && onChange({e, value, name, selected});\n\n            this.setState({value});\n        }\n    };\n\n    handleRelease = e => {\n        const {onRelease, name, selected} = this.props;\n        const {value} = this.state;\n\n        onRelease && onRelease({value, name, e, selected});\n\n        this.setState({\n            value,\n            startValue: null,\n            startPoint: null\n        }, () => {\n            document.removeEventListener(\"mousemove\", this.handlePressed);\n        });\n    };\n\n    calcValue = e => {\n        // console.log(this.state.startValue);\n        const {range, valueD = ValueD.VerticalLinear(5), integer} = this.props;\n\n        let nextValue = valueD(this.state.startValue, e.clientX - this.state.startPoint[0], e.clientY - this.state.startPoint[1]);\n        nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n\n        if (integer) {\n            nextValue = Math.round(nextValue);\n        }\n        return nextValue;\n    };\n\n    render() {\n        const {changingStartValue, changeFunctionId, changeFunctionType, changeFunctionParams, range, width = DEFAULT_WIDTH, className, getText = defaultGetText, text, shortcut, ...otherProps} = this.props;\n        const {value = 0, startValue, startPoint} = this.state;\n\n        console.log(\"number button \", getText(value));\n\n\n        const Amplitude = amplitudeComponent[changeFunctionType];\n\n\n        return (\n            <ButtonSelect\n                {...otherProps}\n                className={classNames(\"button-number\", className, {\n                    [\"button-number-active\"]: !!startValue,\n                })}\n                width={width}\n                ref={this.buttonRef}\n                onMouseDown={this.handleDown}>\n                <div\n                    className={\"button-number-value\"}\n                    style={{width: (value - range[0]) / (range[1] - range[0]) * 100 + \"%\"}}>\n                    {getText ? getText(value) : text}\n                </div>\n\n                {changeFunctionId &&\n                <Amplitude\n                    changing={!!startPoint}\n                    range={range}\n                    buttonWidth={width}\n                    params={changeFunctionParams}\n                    changingStartValue={changingStartValue}\n                    changeFunctionId={changeFunctionId}/>}\n\n                {shortcut &&\n                <Key\n                    keys={shortcut}\n                    onPress={this.handlePress}\n                    onRelease={this.handleRelease}/>}\n            </ButtonSelect>\n        );\n    }\n}\n\n","import * as React from \"react\";\nimport {AmplitudeComponentProps} from \"./types\";\n\nexport interface SinAmplitudeProps extends AmplitudeComponentProps {\n\n}\n\nexport const SinAmplitude: React.FC<SinAmplitudeProps> = ({range, params, changingStartValue, changeFunctionId, changing, buttonWidth}) => {\n    const startVPerc = ((changingStartValue - range[0]) / (range[1] - range[0]));\n\n    const ampWidth = (Math.min(startVPerc, params.a) + Math.min(1 - startVPerc, params.a));\n\n    return (\n        <div\n            className={\"button-number-amplitude\"}\n            style={{\n                width: ampWidth * 100 + \"%\",\n                left: `calc(${(Math.max(startVPerc - params.a, 0)) * 100}%)`\n            }}>\n                    <span>\n                    {changeFunctionId}\n                    </span>\n        </div>\n    );\n};","import * as React from \"react\";\nimport {createCanvas} from \"../../../../utils/canvas/helpers/base\";\nimport {Canvas} from \"../../Canvas\";\nimport {AmplitudeComponentProps} from \"./types\";\nimport * as classNames from \"classnames\";\nimport * as Color from \"color\";\n\nexport interface ParaboloidAmplitudeProps extends AmplitudeComponentProps {\n\n}\n\nexport const ParaboloidAmplitude: React.FC<ParaboloidAmplitudeProps> = (props) => {\n    const {range, params, changingStartValue, changeFunctionId, changing, buttonWidth} = props;\n\n\n    const ampWidth = params.end * (1 - (changingStartValue - range[0]) / (range[1] - range[0]));\n\n    const startVPerc = (changingStartValue  - range[0])/ (range[1] - range[0]);\n\n    // console.log(props);\n    const width = Math.round(buttonWidth * ampWidth);\n\n    if (width <= 1) {\n        return (\n            <div\n                style={{\n                    width: ampWidth * 100 + \"%\",\n                    left: `${startVPerc * 100}%`\n                }}\n                className={classNames(\"button-number-xy-amplitude\", {[\"button-number-xy-amplitude-changing\"]: changing})}>\n                <span>{changeFunctionId}</span>\n            </div>);\n    }\n\n    const height = 6;\n    const {canvas, context} = createCanvas(width, height);\n    const imageData = context.getImageData(0, 0, width, height);\n\n\n\n    for (let i = 0; i < imageData.data.length; i += 4) {\n\n        const x = (i / 4) % width;\n        const y = Math.floor((i / 4) / width);\n\n        const colorTo = 350;\n        const colorFrom = colorTo - 100;\n\n        const color = Color.hsl(Math.max(Math.min(colorTo - x/width * (colorTo - colorFrom), colorTo), colorFrom), 50, 50);\n\n// console.log(a);\n\n        const rgb = color.rgb().array();\n\n\n        imageData.data[i] = rgb[0];\n        imageData.data[i + 1] = rgb[1];\n        imageData.data[i + 2] = rgb[2];\n        imageData.data[i + 3] = 200;\n    }\n\n\n    return (\n        <Canvas\n            style={{\n                width: ampWidth * 100 + \"%\",\n                left: `${(startVPerc) * 100}%`\n            }}\n            className={classNames(\"button-number-xy-amplitude\", {[\"button-number-xy-amplitude-changing\"]: changing})}\n            width={width}\n            height={height}\n            value={imageData}>\n            <span>{changeFunctionId}</span>\n        </Canvas>\n    );\n};","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport {ButtonSelect} from \"./ButtonSelect\";\nimport {ButtonEventData} from \"./Button\";\nimport '../../../styles/selectButtonsStyles.scss';\n\nexport interface SelectButtonsEventData extends ButtonEventData {\n    item: any\n    items: any[]\n}\n\nexport interface SelectButtonsProps {\n    className?: string\n    name?: string\n    items: any[]\n    value?: any\n\n    nullAble?: boolean\n\n    br?: number\n    width?: number\n\n    onChange?(data?: SelectButtonsEventData)\n\n    getValue?(item?: any)\n\n    getText?(item?: any)\n}\n\nexport const defaultGetValue = ({value}) => value;\nexport const defaultGetText = ({text}) => text;\n\nexport class SelectButtons extends React.PureComponent<SelectButtonsProps> {\n\n\n    handleClick = ({value: item, selected, e}) => {\n        const {name, items, onChange, getValue = defaultGetValue, nullAble, value: oldValue} = this.props;\n        let value = getValue(item);\n\n        if (nullAble && oldValue === value) {\n            value = null\n        }\n\n        onChange && onChange({\n            value,\n            e, item, items, name\n        });\n    };\n\n    render() {\n        const {className, items, value, name, getValue = defaultGetValue, getText = defaultGetText, br, width} = this.props;\n\n        console.log(\"select buttons render\", items);\n\n        return (\n            <div className={classNames(className, \"select-buttons\")} style={{width: br ? br * (+width || 70) : 'auto'}}>\n                <div className={\"select-buttons-items\"}>\n                    {items.map((item, index) => (\n                        <ButtonSelect\n                            width={width}\n                            value={item}\n                            key={index}\n                            selected={getValue(item) === value}\n                            // onMouseUp={(e) => {\n                            //     console.log(e)\n                            // }}\n                            onClick={this.handleClick}>\n                            {getText(item)}\n                        </ButtonSelect>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {defaultGetText, defaultGetValue, SelectButtons, SelectButtonsProps} from \"./SelectButtons\";\nimport * as classNames from \"classnames\";\nimport \"../../../styles/selectDrop.scss\"\nimport {Button} from \"./Button\";\n\nexport interface SelectDropProps extends SelectButtonsProps {\n    nullText?: string;\n}\n\nexport interface SelectDropState {\n\n}\n\nexport class SelectDrop extends React.PureComponent<SelectDropProps, SelectDropState> {\n\n    render() {\n        const {className, nullText, ...props} = this.props;\n        const {value, getValue = defaultGetValue, getText = defaultGetText, items} = props;\n        console.log(\"select drop render\", props.name, value);\n\n        const valueItem = items.find(item => getValue(item) === value);\n        return (\n            <div className={classNames(className, \"select-drop\")}>\n                <Button className={\"select-drop-value\"}>\n                    {valueItem ? getText(valueItem) : (nullText || \"null\")}\n                </Button>\n                <SelectButtons {...props} className={\"select-drop-items\"}/>\n            </div>\n        );\n    }\n}","import {PatternAction} from \"../pattern/types\";\nimport {RotationValue} from \"./types\";\n\nexport enum ERotationAction {\n    SET_ROTATION = \"pattern/set-rotation\",\n}\n\nexport interface SetRotationAction extends PatternAction {\n    rotation: RotationValue\n}\n\nexport const setRotation = (id: string, rotation: RotationValue): SetRotationAction =>\n    ({type: ERotationAction.SET_ROTATION, id, rotation});","import * as React from \"react\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/hover-hideable.scss\";\n\nexport interface HoverHideableProps {\n    children?: React.ReactNode\n    button?: React.ReactNode\n    className?: string\n\n}\n\nexport interface HoverHideableState {\n\n}\n\nexport class HoverHideable extends React.PureComponent<HoverHideableProps, HoverHideableState> {\n\n    render() {\n        const {children, button, className} = this.props;\n        return (\n            <div className={classNames(\"hover-hideable\", className)}>\n                {button}\n                <div className={\"hover-hideable-hidden-part\"}>{children}</div>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport * as classNames from \"classnames\";\n\nexport interface InputTextProps {\n    onChange?(value: string): void\n\n    onFocus?()\n    onBlur?()\n\n    className?: string\n    placeholder?: string\n\n    value: string\n}\n\nexport const InputText: React.FC<InputTextProps> = ({onChange, onFocus, onBlur, value, placeholder, className}) => {\n\n    const changeHandler = e => {\n        onChange && onChange(e.target.value)\n    };\n\n    return (\n        <input\n            className={classNames(className, \"input-text\")}\n            type=\"text\"\n            value={value || ''}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            placeholder={placeholder}\n            onChange={changeHandler}/>\n    );\n};","import * as React from \"react\";\nimport {InputText} from \"./InputText\";\nimport * as keyboardjs from \"keyboardjs\";\nimport \"../../styles/inputShortcut.scss\";\n\nexport interface ShortcutInputProps {\n    onChange(value: string)\n\n    value: string\n    placeholder?: string\n\n\n}\n\nexport interface ShortcutInputState {\n\n}\n\nexport class ShortcutInput extends React.PureComponent<ShortcutInputProps, ShortcutInputState> {\n\n    handleChange = (e) => {\n        this.props.onChange(e.key === \"Backspace\" ? null : e.key);\n    };\n\n    handleFocus = () => {\n        keyboardjs.bind(\"\", this.handleChange)\n    };\n    handleBlur = () => {\n        keyboardjs.unbind(\"\", this.handleChange)\n    };\n\n\n    render() {\n        const {value, placeholder} = this.props;\n        return (\n            <InputText\n                className={\"shortcut-input\"}\n                value={value}\n                placeholder={placeholder}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n                onChange={() => {return;\n                }}/>\n        );\n    }\n}","import {createSelector} from \"reselect\";\nimport {arrayToSelectItems, SelectItem} from \"../../utils/utils\";\nimport {ChangeFunction} from \"./types\";\n\nexport const getCFs = state => state.changeFunctions.functions || {};\nexport const getCFList = state => state.changeFunctions.namesList || [];\n\n\nexport const getChangeFunctionsSelectItems = createSelector(\n    [getCFList],\n    (list: string[]): SelectItem[] => arrayToSelectItems(list)\n);","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../../store\";\nimport * as classNames from \"classnames\";\nimport {ButtonNumber, ButtonNumberProps} from \"./ButtonNumber\";\nimport {SelectItem} from \"../../../utils/utils\";\nimport {SelectDrop} from \"./SelectDrop\";\nimport {\n    activateValueChanging,\n    deactivateValueChanging,\n    setValueInChangingList,\n    setStartValue\n} from \"../../../store/changingValues/actions\";\nimport {ChangingValuesState} from \"../../../store/changingValues/reducer\";\nimport {toStartValue} from \"../../../store/change/actions\";\nimport \"../../../styles/buttonNumberCF.scss\";\nimport {HoverHideable} from \"../HoverHideable\";\nimport {ShortcutInput} from \"../ShortcutInput\";\nimport {getChangeFunctionsSelectItems} from \"../../../store/changeFunctions/selectors\";\nimport {ChangeFunction} from \"../../../store/changeFunctions/types\";\n\nexport interface ButtonNumberCFStateProps {\n    changeFunctionsSelectItems: SelectItem[]\n    changeFunction: ChangeFunction\n    changingValues: ChangingValuesState\n}\n\nexport interface ButtonNumberCFActionProps {\n    setValueInChangingList(\n        path: string,\n        changeFunctionId: string,\n        range: [number, number],\n        startValue: number)\n\n    deactivateValueChanging(path: string)\n\n    activateValueChanging(path: string)\n\n    toStartValue(path: string)\n\n    setStartValue(path: string, startValue: number)\n}\n\nexport interface ButtonNumberCFOwnProps extends ButtonNumberProps {\n    path: string\n}\n\nexport interface ButtonNumberCFProps extends ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps {\n\n}\n\nexport interface ButtonNumberCFState {\n    active: boolean\n    shortcut: string\n}\n\nclass ButtonNumberCFComponent extends React.PureComponent<ButtonNumberCFProps, ButtonNumberCFState> {\n\n    state = {\n        active: false,\n        shortcut: null\n    };\n\n    handleCFChange = ({value: changeFunctionId}) => {\n        const {setValueInChangingList, path, range, value} = this.props;\n        setValueInChangingList(path, changeFunctionId, range, value);\n    };\n\n    handleChange = (data) => {\n\n        this.props.onChange(data);\n\n        const {setStartValue, path, value} = this.props;\n        setStartValue(path, value);\n    };\n\n    handleStartManualChanging = () => {\n        const {deactivateValueChanging, path} = this.props;\n        deactivateValueChanging(path);\n        this.setState({active: true});\n    };\n\n    handleStopManualChanging = () => {\n        const {activateValueChanging, path} = this.props;\n        activateValueChanging(path);\n        this.setState({active: false});\n    };\n\n    handleShortcutChange = shortcut => this.setState({shortcut});\n\n    render() {\n        const {changeFunction, changeFunctionsSelectItems, changingValues, path, className, ...buttonNumberProps} = this.props;\n\n        const {onChange, onMouseDown, onMouseUp, onPress, onRelease, ...othersButtonNumberProps} = buttonNumberProps;\n\n        console.log(\"render b cf\", buttonNumberProps.name, changeFunctionsSelectItems);\n\n        const changingValueData = changingValues[path];\n        const changingStartValue = changingValueData && changingValueData.startValue;\n        const changeFunctionId = changingValueData && changingValues[path].changeFunctionId;\n        const changingParams = changingValueData && changeFunction.params;\n        const changingType = changingValueData && changeFunction.type;\n\n        return (\n            <HoverHideable\n                className={classNames(\"button-number-cf\", className)}\n                button={\n                    <ButtonNumber\n                        {...othersButtonNumberProps}\n\n                        shortcut={this.state.shortcut}\n\n                        className={classNames('button-number-cf-value', {\n                            [\"button-number-cf-value-active\"]: this.state.active\n                        })}\n\n                        changeFunctionId={changeFunctionId}\n                        changeFunctionType={changingType}\n                        changingStartValue={changingStartValue}\n                        changeFunctionParams={changingParams}\n\n                        onChange={this.handleChange}\n                        onMouseDown={this.handleStartManualChanging}\n                        onPress={this.handleStartManualChanging}\n                        onMouseUp={this.handleStopManualChanging}\n                        onRelease={this.handleStopManualChanging}/>\n                }>\n                {!this.state.active &&\n                <HoverHideable\n                    className={\"button-number-cf-settings\"}\n                    button={<div className=\"button-number-cf-settings-handler\"><div></div></div>}>\n\n                    <ShortcutInput\n                        placeholder={'hotkey'}\n                        value={this.state.shortcut}\n                        onChange={this.handleShortcutChange}/>\n                    <SelectDrop\n                        name={buttonNumberProps.name + '-select-cf'}\n                        nullAble\n                        className={\"button-number-cf-select\"}\n                        value={changingValues[this.props.path] && changingValues[this.props.path].changeFunctionId}\n                        onChange={this.handleCFChange}\n                        items={changeFunctionsSelectItems}/>\n                </HoverHideable>\n                }\n            </HoverHideable>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ButtonNumberCFStateProps, ButtonNumberCFOwnProps, AppState> = (state, {path}) => ({\n    changeFunctionsSelectItems: getChangeFunctionsSelectItems(state),\n    changeFunction: state.changeFunctions.functions[state.changingValues[path]?.changeFunctionId],\n    changingValues: state.changingValues\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ButtonNumberCFActionProps, ButtonNumberCFOwnProps> = {\n    setValueInChangingList, deactivateValueChanging, activateValueChanging, toStartValue, setStartValue\n};\n\nexport const ButtonNumberCF = connect<ButtonNumberCFStateProps, ButtonNumberCFActionProps, ButtonNumberCFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ButtonNumberCFComponent);","import * as React from \"react\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport {RotationValue} from \"../../store/patterns/rotating/types\";\nimport '../../styles/rotatingControls.scss';\nimport {VideoParams} from \"../../store/patterns/video/types\";\nimport {ChangeFunctions} from \"../../store/changeFunctions/reducer\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\nimport {setRotation} from \"../../store/patterns/rotating/actions\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\n\nexport interface RotationControlsStateProps {\n    rotation: RotationValue\n}\n\nexport interface RotationControlsActionProps {\n    setRotation(id: string, value: RotationValue)\n}\n\nexport interface RotationControlsOwnProps {\n    patternId: string\n}\n\nexport interface RotationControlsProps extends RotationControlsStateProps, RotationControlsActionProps, RotationControlsOwnProps, WithTranslation {\n}\n\nexport interface RotationControlsState {\n\n}\n\nconst angleRange = [0, 360] as [number, number];\nconst angleValueD = ValueD.VerticalLinear(0.4);\n\nconst offsetRange = [-800, 800] as [number, number];\nconst offsetValueD = ValueD.VerticalLinear(0.6);\n\nexport class RotationControlsComponent extends React.PureComponent<RotationControlsProps, RotationControlsState> {\n\n    handleAngleChange = ({value: angle}) => {\n        const {setRotation, rotation, patternId} = this.props;\n        setRotation(patternId, {...rotation, angle})\n    };\n\n    handleOffsetChange = ({value, name}) => {\n        const {setRotation, rotation, patternId} = this.props;\n        setRotation(patternId, {\n            ...rotation, offset: {\n                ...rotation.offset,\n                [name]: value\n            }\n        })\n    };\n\n    render() {\n        const {angle, offset} = this.props.rotation;\n        return (\n            <div className={'rotating-controls'}>\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.angle`}\n                    name={\"angle\"}\n                    value={angle}\n                    range={angleRange}\n                    valueD={angleValueD}\n                    onChange={this.handleAngleChange}/>\n\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.offset.x`}\n                    name={\"x\"}\n                    value={offset.x}\n                    range={offsetRange}\n                    valueD={offsetValueD}\n                    onChange={this.handleOffsetChange}/>\n                <ButtonNumberCF\n                    path={`patterns.${this.props.patternId}.rotation.value.offset.y`}\n                    name={\"y\"}\n                    value={offset.y}\n                    range={offsetRange}\n                    valueD={offsetValueD}\n                    onChange={this.handleOffsetChange}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<RotationControlsStateProps, RotationControlsOwnProps, AppState> = (state, {patternId}) => ({\n    rotation: state.patterns[patternId]?.rotation?.value\n});\n\nconst mapDispatchToProps: MapDispatchToProps<RotationControlsActionProps, RotationControlsOwnProps> = {\n    setRotation,\n};\n\nexport const RotationControls = connect<RotationControlsStateProps, RotationControlsActionProps, RotationControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation('common')(RotationControlsComponent));\n","export function bindDrawFunctions(cvs) {\n\n\n    var ctx = cvs.getContext(\"2d\");\n\n    var randomColors = [];\n    for (var i = 0, j; i < 360; i++) {\n        j = (i * 47) % 360;\n        randomColors.push(\"hsl(\" + j + \",50%,50%)\");\n    }\n    var randomIndex = 0;\n\n\n    const drawCircle = function (p, r, offset) {\n        offset = offset || {x: 0, y: 0};\n        var ox = offset.x;\n        var oy = offset.y;\n        ctx.beginPath();\n        ctx.arc(p.x + ox, p.y + oy, r, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n    };\n\n    return {\n        getCanvas: function () {\n            return cvs;\n        },\n\n        reset: function (curve?, evt?) {\n            cvs.width = cvs.width;\n            ctx.strokeStyle = \"black\";\n            ctx.fillStyle = \"none\";\n            if (evt && curve) {\n                curve.mouse = {x: evt.offsetX, y: evt.offsetY};\n            }\n            randomIndex = 0;\n        },\n\n        setColor: function (c) {\n            ctx.strokeStyle = c;\n        },\n\n        noColor: function (c) {\n            ctx.strokeStyle = \"transparent\";\n        },\n\n        setRandomColor: function () {\n            randomIndex = (randomIndex + 1) % randomColors.length;\n            var c = randomColors[randomIndex];\n            ctx.strokeStyle = c;\n        },\n\n        setRandomFill: function (a) {\n            randomIndex = (randomIndex + 1) % randomColors.length;\n            a = (typeof a === \"undefined\") ? 1 : a;\n            var c = randomColors[randomIndex];\n            c = c.replace('hsl(', 'hsla(').replace(')', ',' + a + ')');\n            ctx.fillStyle = c;\n        },\n\n        setFill: function (c) {\n            ctx.fillStyle = c;\n        },\n\n        noFill: function () {\n            ctx.fillStyle = \"transparent\";\n        },\n\n        drawSkeleton: function (curve, colors?, offset?, nocoords?) {\n            colors = colors || {line: \"rgba(255, 255, 255, .5)\", points: \"black\"};\n            offset = offset || {x: 0, y: 0};\n            var pts = curve.points;\n            ctx.strokeStyle = colors.line;\n            this.drawLine(pts[0], pts[1], offset);\n            if (pts.length === 3) {\n                ctx.strokeStyle = colors.line;\n                this.drawLine(pts[1], pts[2], offset);\n            } else {\n                ctx.strokeStyle = colors.line;\n                this.drawLine(pts[2], pts[3], offset);\n            }\n            ctx.strokeStyle = colors.points;\n            if (!nocoords) this.drawPoints(pts, offset);\n        },\n\n        drawCurve: function (curve, colors?, offset?) {\n            colors = colors || {line: \"lightgrey\"};\n            ctx.strokeStyle = colors.line;\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.beginPath();\n            var p = curve.points, i;\n            ctx.moveTo(p[0].x + ox, p[0].y + oy);\n            if (p.length === 3) {\n                ctx.quadraticCurveTo(\n                    p[1].x + ox, p[1].y + oy,\n                    p[2].x + ox, p[2].y + oy\n                );\n            }\n            if (p.length === 4) {\n                ctx.bezierCurveTo(\n                    p[1].x + ox, p[1].y + oy,\n                    p[2].x + ox, p[2].y + oy,\n                    p[3].x + ox, p[3].y + oy\n                );\n            }\n            ctx.lineWidth = 1.2;\n            ctx.stroke();\n            ctx.closePath();\n            ctx.lineWidth = 1;\n        },\n\n        drawLine: function (p1, p2, offset) {\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.closePath();\n            ctx.beginPath();\n            ctx.moveTo(p1.x + ox, p1.y + oy);\n            ctx.lineTo(p2.x + ox, p2.y + oy);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        drawPoint: function (p, offset) {\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.beginPath();\n            ctx.arc(p.x + ox, p.y + oy, 5, 0, 2 * Math.PI);\n            ctx.stroke();\n        },\n\n        drawPoints: function (points, offset) {\n            offset = offset || {x: 0, y: 0};\n            points.forEach(function (p, i) {\n                if (i === 2 || i === 1)\n                    drawCircle(p, 3, offset);\n                else {\n                    const r = 5;\n                    ctx.rect(offset.x + p.x - r / 2, offset.y + p.y - r / 2, r, r);\n                    ctx.stroke();\n                }\n            }.bind(this));\n        },\n\n        drawArc: function (p, offset) {\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.beginPath();\n            ctx.moveTo(p.x + ox, p.y + oy);\n            ctx.arc(p.x + ox, p.y + oy, p.r, p.s, p.e);\n            ctx.lineTo(p.x + ox, p.y + oy);\n            ctx.fill();\n            ctx.stroke();\n        },\n\n        drawCircle,\n\n        drawbbox: function (bbox, offset) {\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.beginPath();\n            ctx.moveTo(bbox.x.min + ox, bbox.y.min + oy);\n            ctx.lineTo(bbox.x.min + ox, bbox.y.max + oy);\n            ctx.lineTo(bbox.x.max + ox, bbox.y.max + oy);\n            ctx.lineTo(bbox.x.max + ox, bbox.y.min + oy);\n            ctx.closePath();\n            ctx.stroke();\n        },\n\n        drawRect: function (p, w, h, offset) {\n            offset = offset || {x: 0, y: 0};\n            var ox = offset.x;\n            var oy = offset.y;\n            ctx.beginPath();\n            ctx.moveTo(p.x - w/2 + ox, p.y - h/2 + oy);\n            ctx.lineTo(p.x - w/2 + w + ox, p.y - h/2 + oy);\n            ctx.lineTo(p.x - w/2 + w + ox, p.y - h/2 + h + oy);\n            ctx.lineTo(p.x - w/2 + ox, p.y - h/2 + h + oy);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n\n        },\n\n        drawHull: function (hull, offset) {\n            ctx.beginPath();\n            if (hull.length === 6) {\n                ctx.moveTo(hull[0].x, hull[0].y);\n                ctx.lineTo(hull[1].x, hull[1].y);\n                ctx.lineTo(hull[2].x, hull[2].y);\n                ctx.moveTo(hull[3].x, hull[3].y);\n                ctx.lineTo(hull[4].x, hull[4].y);\n            } else {\n                ctx.moveTo(hull[0].x, hull[0].y);\n                ctx.lineTo(hull[1].x, hull[1].y);\n                ctx.lineTo(hull[2].x, hull[2].y);\n                ctx.lineTo(hull[3].x, hull[3].y);\n                ctx.moveTo(hull[4].x, hull[4].y);\n                ctx.lineTo(hull[5].x, hull[5].y);\n                ctx.lineTo(hull[6].x, hull[6].y);\n                ctx.moveTo(hull[7].x, hull[7].y);\n                ctx.lineTo(hull[8].x, hull[8].y);\n            }\n            ctx.stroke();\n        },\n\n        drawShape: function (shape, offset) {\n            offset = offset || {x: 0, y: 0};\n            var order = shape.forward.points.length - 1;\n            ctx.beginPath();\n            ctx.moveTo(offset.x + shape.startcap.points[0].x, offset.y + shape.startcap.points[0].y);\n            ctx.lineTo(offset.x + shape.startcap.points[3].x, offset.y + shape.startcap.points[3].y);\n            if (order === 3) {\n                ctx.bezierCurveTo(\n                    offset.x + shape.forward.points[1].x, offset.y + shape.forward.points[1].y,\n                    offset.x + shape.forward.points[2].x, offset.y + shape.forward.points[2].y,\n                    offset.x + shape.forward.points[3].x, offset.y + shape.forward.points[3].y\n                );\n            } else {\n                ctx.quadraticCurveTo(\n                    offset.x + shape.forward.points[1].x, offset.y + shape.forward.points[1].y,\n                    offset.x + shape.forward.points[2].x, offset.y + shape.forward.points[2].y\n                );\n            }\n            ctx.lineTo(offset.x + shape.endcap.points[3].x, offset.y + shape.endcap.points[3].y);\n            if (order === 3) {\n                ctx.bezierCurveTo(\n                    offset.x + shape.back.points[1].x, offset.y + shape.back.points[1].y,\n                    offset.x + shape.back.points[2].x, offset.y + shape.back.points[2].y,\n                    offset.x + shape.back.points[3].x, offset.y + shape.back.points[3].y\n                );\n            } else {\n                ctx.quadraticCurveTo(\n                    offset.x + shape.back.points[1].x, offset.y + shape.back.points[1].y,\n                    offset.x + shape.back.points[2].x, offset.y + shape.back.points[2].y\n                );\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n        },\n\n        drawText: function (text, offset) {\n            offset = offset || {x: 0, y: 0};\n            ctx.fillText(text, offset.x, offset.y);\n        }\n    };\n}\n\n\nexport function handleInteraction(cvs, curve, offset?) {\n    offset = offset || {x: 0, y: 0};\n    var Ox = offset.x;\n    var Oy = offset.y;\n\n    curve.mouse = false;\n\n    var fix = function (e) {\n        // e = e || window.event;\n        // var target = e.target || e.srcElement,\n        //     rect = target.getBoundingClientRect();\n        // e.offsetX = e.clientX - rect.left;\n        // e.offsetY = e.clientY - rect.top;\n    };\n\n    var lpts = curve.points;\n    var moving = false, mx = 0, my = 0, ox = 0, oy = 0, cx, cy, mp = null;\n\n    var handler = {\n        onupdate: function (evt?) {\n        }\n    };\n\n    cvs.addEventListener(\"mousedown\", function (evt) {\n        document.addEventListener(\"mouseup\", upHandler);\n        fix(evt);\n        mx = evt.offsetX - Ox;\n        my = evt.offsetY - Oy;\n        lpts.forEach(function (p) {\n            if (Math.abs(mx - p.x) < 10 && Math.abs(my - p.y) < 10) {\n                moving = true;\n                mp = p;\n                cx = p.x;\n                cy = p.y;\n            }\n        });\n    });\n\n    cvs.addEventListener(\"mousemove\", function (evt) {\n\n        fix(evt);\n\n        var found = false;\n\n        if (!lpts) return;\n        lpts.forEach(function (p) {\n            var mx = evt.offsetX - Ox;\n            var my = evt.offsetY - Oy;\n            if (Math.abs(mx - p.x) < 10 && Math.abs(my - p.y) < 10) {\n                found = found || true;\n            }\n        });\n        cvs.style.cursor = found ? \"pointer\" : \"default\";\n\n        if (!moving) {\n            return //handler.onupdate(evt);\n        }\n\n        ox = evt.offsetX - mx - Ox;\n        oy = evt.offsetY - my - Oy;\n        mp.x = cx + ox;\n        mp.y = cy + oy;\n        curve.update();\n        handler.onupdate();\n    });\n\n    const upHandler = function (evt) {\n        document.removeEventListener(\"mouseup\", upHandler);\n        if (!moving) return;\n        // console.log(curve.points.map(function(p) { return p.x+\", \"+p.y; }).join(\", \"));\n        moving = false;\n        mp = false;\n    };\n\n    cvs.addEventListener(\"click\", function (evt) {\n        fix(evt);\n        var mx = evt.offsetX;\n        var my = evt.offsetY;\n    });\n\n    return handler;\n}","import {PatternAction} from \"../pattern/types\";\nimport {RepeatingParams} from \"./types\";\n\nexport enum ERepeatingAction {\n    SET_REPEATING = \"pattern/set-repeating\",\n}\n\nexport interface SetRepeatingAction extends PatternAction {\n    repeating: RepeatingParams\n}\n\nexport const setRepeating = (id: string, repeating: RepeatingParams): SetRepeatingAction =>\n    ({type: ERepeatingAction.SET_REPEATING, id, repeating});","import * as React from \"react\";\nimport * as Bezier from \"bezier-js\";\nimport {bindDrawFunctions, handleInteraction} from \"../../../utils/bezier\";\nimport \"../../../styles/bezierCurveRepeating.scss\";\nimport {SVG} from \"../SVG\";\n\nexport type BezierPoints = { x: number, y: number }[];\n\nexport interface BezierCurveRepeatingProps {\n    onChange(points: BezierPoints)\n\n    xn: number\n    yn: number\n    value: BezierPoints\n}\n\nexport interface BezierCurveRepeatingState {\n    points: BezierPoints\n}\n\nconst W = 210;\nconst H = 140;\nconst WW = 100;\nconst HH = 100;\nconst O = {x: 55, y: 17};\n\n\nexport class BezierCurveRepeating extends React.PureComponent<BezierCurveRepeatingProps, BezierCurveRepeatingState> {\n\n    canvasRef;\n    drawFunctions;\n    curve;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n\n        this.curve = new Bezier(props.value);\n    }\n\n    draw = () => {\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n\n        const N = this.props.xn, M = this.props.yn;\n\n        const r = 1;\n\n\n        // background\n        // ctx.fillStyle = \"black\";\n        // ctx.fillRect(0, 0, W, H);\n\n        // frame\n        // ctx.rect(O.x, O.y, WW, HH);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = \"#595959\";\n        ctx.stroke();\n\n\n        ctx.font = \"8px arial\";\n        ctx.textBaseline = \"hanging\";\n        ctx.textAlign = \"center\";\n        ctx.fillStyle = 'white';\n\n        const NN = 4, MM = 4;\n        // ctx.lineWidth = 1;\n        // for (let xi = 0; xi <= NN; xi++) {\n        //     this.drawFunctions.drawLine({x: xi / NN * WW, y: HH + 1}, {x: xi / NN * WW, y: HH + 5}, O);\n        //\n        //\n        //     // ctx.fillText(Math.round(xi / NN * 100), xi / NN * WW + O.x, HH + 7 + O.y);\n        //\n        // }\n        //\n        // ctx.textBaseline = \"middle\";\n        // ctx.textAlign = \"right\";\n        // for (let yi = 0; yi <= MM; yi++) {\n        //     this.drawFunctions.drawLine({y: yi / MM * HH, x: -1}, {y: yi / MM * HH, x: -5}, O);\n        //     // ctx.fillText(Math.round(100 - yi / MM * 100), -6 + O.x, yi / MM * HH + O.y);\n        // }\n\n\n        // grid points\n        // ctx.lineWidth = 1.2;\n        // ctx.fillStyle = \"white\";\n        // for (let i = 0; i <= N; i++) {\n        //     const ai = this.curve.get(i / N);\n        //     for (let j = 0; j <= M; j++) {\n        //\n        //         const aj = this.curve.get(j / M);\n        //\n        //         ctx.fillRect(O.x + ai.x - r / 2, O.y + aj.y - r / 2, r, r);\n        //     }\n        // }\n        //\n        // ctx.fillStyle = \"transparent\";\n        // ctx.closePath();\n\n        // skeleton\n\n        // ctx.globalAlpha = .5;\n        // const offset = O;\n        // var pts = this.curve.points;\n        // ctx.strokeStyle = 'white';\n        // this.drawFunctions.drawLine(pts[0], pts[1], offset);\n        // if (pts.length === 3) {\n        //     this.drawFunctions.drawLine(pts[1], pts[2], offset);\n        // } else {\n        //     this.drawFunctions.drawLine(pts[2], pts[3], offset);\n        // }\n        // ctx.globalAlpha = 1;\n\n        // curve\n        // this.drawFunctions.drawCurve(this.curve, {line: '#ffcd00'}, O);\n        // // points\n        // ctx.strokeStyle = \"white\";\n        // ctx.fillStyle = \"black\";\n        // this.curve.points.forEach((p, i) => {\n        //     if (i === 2 || i === 1) {\n        //         this.drawFunctions.drawRect(p, 5, 5, O);\n        //     } else {\n        //\n        //         this.drawFunctions.drawRect(p, 5, 5, O);\n        //     }\n        // });\n\n\n    };\n\n    handleUpdate = () => {\n        this.forceUpdate()\n        this.drawFunctions.reset();\n        this.draw();\n        this.props.onChange(this.curve.points);\n    };\n\n    componentDidMount(): void {\n        if (this.canvasRef.current) {\n\n            this.drawFunctions = bindDrawFunctions(this.canvasRef.current);\n\n            this.draw();\n            handleInteraction(this.canvasRef.current, this.curve, O).onupdate = this.handleUpdate\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<BezierCurveRepeatingProps>, prevState: Readonly<BezierCurveRepeatingState>, snapshot?: any): void {\n        if (prevProps.value !== this.props.value || prevProps.xn !== this.props.xn || prevProps.yn !== this.props.yn) {\n            this.curve.points[0] = this.props.value[0];\n            this.curve.points[1] = this.props.value[1];\n            this.curve.points[2] = this.props.value[2];\n            this.curve.points[3] = this.props.value[3];\n            this.curve.update();\n\n            this.drawFunctions.reset();\n            this.draw();\n            this.forceUpdate();\n        }\n    }\n\n    render() {\n\n        const points = this.curve.points;\n        const point_w = 5;\n        return (\n            <div className={\"grid-bezier-curve\"}>\n\n                <canvas\n                    className={\"grid-bezier-curve-canvas\"}\n                    width={W}\n                    height={H}\n                    ref={this.canvasRef}/>\n                <SVG\n                    className={\"grid-bezier-curve-markers\"}\n                    width={W}\n                    height={H}>\n                    <rect\n                        strokeWidth=\"0.3\"\n                        stroke=\"white\"\n                        fill=\"transparent\"\n                        x={O.x}\n                        y={O.y}\n                        width={WW}\n                        height={HH}/>\n                    {(() => {\n                        const arx = [];\n                        const ary = [];\n                        const NN = 4, MM = 4;\n                        for (let xi = 0; xi <= NN; xi++) {\n\n                            arx.push({\n                                y: HH + O.y,\n                                x: xi / NN * WW + O.x,\n                                text: Math.round(xi / NN * 100),\n                            });\n\n                        }\n\n                        for (let yi = 0; yi <= MM; yi++) {\n                            ary.push({\n                                y: yi / MM * HH + O.y,\n                                x: O.x,\n                                text: Math.round(100 - yi / MM * 100),\n                            });\n                        }\n                        return <>\n                            {arx.map(({text, x, y}) =>\n                                <text\n                                    textAnchor=\"middle\"\n                                    className={'grid-bezier-curve-canvas-numbers'}\n                                    x={x} y={y + 12}>{text}</text>)}\n                            {ary.map(({text, x, y}) =>\n                                <text\n                                    textAnchor=\"end\"\n                                    className={'grid-bezier-curve-canvas-numbers'}\n                                    x={x - 6} y={y + 2}>{text}</text>)}\n                            {arx.map(({x, y}) =>\n                                <path\n                                    d={`M${x} ${y} L${x} ${y + 3} `}\n                                    strokeWidth=\"0.3\"\n                                    stroke=\"white\"\n                                    fill=\"transparent\"/>\n                            )}\n                            {ary.map(({x, y}) =>\n                                <path\n                                    d={`M${x} ${y} L${x - 4} ${y} `}\n                                    strokeWidth=\"0.3\"\n                                    stroke=\"white\"\n                                    fill=\"transparent\"/>\n                            )}\n                        </>;\n                    })()}\n\n\n                    {(() => {\n\n                        const size = 1;\n                        const cords = [];\n                        for (let i = 0; i <= this.props.xn; i++) {\n                            const ai = this.curve.get(i / this.props.xn);\n                            for (let j = 0; j <= this.props.yn; j++) {\n\n                                const aj = this.curve.get(j / this.props.yn);\n\n                                cords.push({x: O.x + ai.x, y: O.y + aj.y});\n                            }\n                        }\n                        return (\n                            cords.map(({x, y}) =>\n                                <rect\n                                    fill='white'\n                                    x={x - size/2} y={y-size/2} width={size} height={size}/>)\n                        );\n                    })()}\n\n                    <path\n                        d={`M${points[0].x + O.x} ${points[0].y + O.y} L${points[1].x + O.x} ${points[1].y + O.y} `}\n\n                        stroke=\"white\"\n                        strokeWidth=\"0.3\"\n                        fill=\"transparent\"/>\n                    <path\n                        d={`M${points[2].x + O.x} ${points[2].y + O.y} L${points[3].x + O.x} ${points[3].y + O.y} `}\n\n                        stroke=\"white\"\n                        strokeWidth=\"0.4\"\n                        fill=\"transparent\"/>\n                    <path\n                        d={`M${points[0].x + O.x} ${points[0].y + O.y} C ${points[1].x + O.x} ${points[1].y + O.y}, ${points[2].x + O.x} ${points[2].y + O.y}, ${points[3].x + O.x} ${points[3].y + O.y}`}\n                        stroke=\"#ffcd00\"\n                        fill=\"transparent\"/>\n                    {points.map(({x, y}) =>\n                        <rect\n                            stroke=\"white\"\n                            fill=\"black\"\n                            x={x - point_w / 2 + O.x}\n                            y={y - point_w / 2 + O.y}\n                            width={point_w}\n                            height={point_w}/>)}\n                </SVG>\n\n            </div>\n        );\n    }\n}","import {\n    EditPatternConfigAction,\n    PatternConfig,\n    SetPatternHeightAction,\n    SetPatternWidthAction,\n    UpdatePatternImageAction\n} from \"./types\";\nimport {AppState} from \"../../index\";\nimport {ThunkResult} from \"../../../utils/actions/types\";\nimport {imageDataToBase64} from \"../../../utils/canvas/helpers/imageData\";\nimport {addPattern} from \"../actions\";\nimport {getPatternConfig, getPatternParams} from \"./helpers\";\n\nexport enum EPatternAction {\n    UPDATE_IMAGE = \"pattern/update-image\",\n\n    EDIT_CONFIG = \"pattern/edit-config\",\n\n    SET_WIDTH = \"pattern/set-width\",\n    SET_HEIGHT = \"pattern/set-height\",\n}\n\nexport const updateImage = (id: string, imageData: ImageData, emit: boolean = true): ThunkResult<UpdatePatternImageAction, AppState> =>\n    (dispatch, getState) => {\n\n        const socket = getState().patterns[id].room?.value.socket;\n\n        emit && socket && socket.emit(\"image\", imageDataToBase64(imageData));\n\n        return dispatch({type: EPatternAction.UPDATE_IMAGE, imageData, id});\n    };\nexport const editConfig = (id: string, config: PatternConfig): EditPatternConfigAction =>\n    ({type: EPatternAction.EDIT_CONFIG, id, config});\nexport const setWidth = (id: string, width: number): SetPatternWidthAction =>\n    ({type: EPatternAction.SET_WIDTH, id, width});\nexport const setHeight = (id: string, height: number): SetPatternHeightAction =>\n    ({type: EPatternAction.SET_HEIGHT, id, height});\nexport const doublePattern = (id: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const pattern = state.patterns[id];\n\n    const config = getPatternConfig(pattern);\n    const params = getPatternParams(pattern);\n\n    dispatch(addPattern(config, params));\n};","import * as React from \"react\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {ButtonSelect} from \"../_shared/buttons/ButtonSelect\";\nimport {BezierCurveRepeating} from \"../_shared/canvases/BezierCurveRepeating\";\nimport {ERepeatingType, RepeatingParams} from \"../../store/patterns/repeating/types\";\nimport '../../styles/repeatingControls.scss';\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {WithTranslation, withTranslation} from \"react-i18next\";\nimport {AppState} from \"../../store\";\nimport {setRepeating} from \"../../store/patterns/repeating/actions\";\n\nexport interface RepeatingControlsStateProps {\n\n    repeating: RepeatingParams\n}\n\nexport interface RepeatingControlsActionProps {\n    setRepeating(id: string, repeating: RepeatingParams)\n\n}\n\nexport interface RepeatingControlsOwnProps {\n    patternId: string\n}\n\nexport interface RepeatingControlsProps extends RepeatingControlsStateProps, RepeatingControlsActionProps, RepeatingControlsOwnProps, WithTranslation {\n\n}\n\nexport interface RepeatingControlsState {\n\n}\n\nconst repeatingRange = [1, 10] as [number, number];\nconst repeatingOutRange = [0, 3] as [number, number];\nconst repeatingValueD = ValueD.VerticalLinear(9);\n\nexport class RepeatingControlsComponent extends React.PureComponent<RepeatingControlsProps, RepeatingControlsState> {\n\n    handleGridParamsChange = ({value, name}) => {\n        const {setRepeating, repeating, patternId} = this.props;\n        setRepeating(patternId, {\n            ...repeating,\n            gridParams: {\n                ...repeating.gridParams,\n                [name]: value\n            }\n        })\n    };\n\n    handleIntegerChange = (data) => {\n        const {selected, name} = data;\n        const {setRepeating, repeating, patternId} = this.props;\n        setRepeating(patternId, {\n            ...repeating,\n            gridParams: {\n                ...repeating.gridParams,\n                [name]: selected\n            }\n        })\n    };\n\n    handleBezierChange = (points) => {\n        const {setRepeating, repeating, patternId} = this.props;\n        setRepeating(patternId, {\n            ...repeating,\n            gridParams: {\n                ...repeating.gridParams,\n                bezierPoints: points\n            }\n        })\n    };\n\n    render() {\n        const {type, gridParams} = this.props.repeating;\n        return (\n            <div className={'repeating-controls'}>\n                {type === ERepeatingType.Grid && (\n                    <div className={'repeating-controls-grid'}>\n                        <div className={'repeating-controls-grid-buttons'}>\n                            <div className={'repeating-controls-grid-buttons-row'}>\n                                <ButtonSelect\n                                    className={'repeating-button'}\n                                    name={\"integer\"}\n                                    onClick={this.handleIntegerChange}\n                                    selected={!gridParams.integer}>{gridParams.integer ? \"int\" : \"float\"}</ButtonSelect>\n                                <ButtonNumberCF\n                                    className={'repeating-button-number'}\n                                    integer={gridParams.integer}\n                                    path={`patterns.${this.props.patternId}.repeating.params.gridParams.x`}\n                                    name={\"x\"}\n                                    value={gridParams.x}\n                                    range={repeatingRange}\n                                    valueD={repeatingValueD}\n                                    onChange={this.handleGridParamsChange}/>\n                                <ButtonNumberCF\n                                    className={'repeating-button-number'}\n                                    integer={gridParams.integer}\n                                    path={`patterns.${this.props.patternId}.repeating.params.gridParams.y`}\n                                    name={\"y\"}\n                                    value={gridParams.y}\n                                    range={repeatingRange}\n                                    valueD={repeatingValueD}\n                                    onChange={this.handleGridParamsChange}/>\n\n                            </div>\n\n                            <div className={'repeating-controls-grid-buttons-row'}>\n                                <ButtonNumberCF\n                                    className={'repeating-button-number'}\n                                    integer={gridParams.integer}\n                                    path={`patterns.${this.props.patternId}.repeating.params.gridParams.xOut`}\n                                    name={\"xOut\"}\n                                    value={gridParams.xOut}\n                                    range={repeatingOutRange}\n                                    valueD={repeatingValueD}\n                                    onChange={this.handleGridParamsChange}/>\n                                <ButtonNumberCF\n                                    className={'repeating-button-number'}\n                                    integer={gridParams.integer}\n                                    path={`patterns.${this.props.patternId}.repeating.params.gridParams.yOut`}\n                                    name={\"yOut\"}\n                                    value={gridParams.yOut}\n                                    range={repeatingOutRange}\n                                    valueD={repeatingValueD}\n                                    onChange={this.handleGridParamsChange}/>\n                            </div>\n                        </div>\n                        <BezierCurveRepeating\n                            xn={gridParams.x}\n                            yn={gridParams.y}\n                            value={gridParams.bezierPoints}\n                            onChange={this.handleBezierChange}/>\n                    </div>)}\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps: MapStateToProps<RepeatingControlsStateProps, RepeatingControlsOwnProps, AppState> = (state, {patternId}) => ({\n    repeating: state.patterns[patternId]?.repeating?.params || null\n});\n\nconst mapDispatchToProps: MapDispatchToProps<RepeatingControlsActionProps, RepeatingControlsOwnProps> = {\n    setRepeating\n};\n\nexport const RepeatingControls = connect<RepeatingControlsStateProps, RepeatingControlsActionProps, RepeatingControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation('common')(RepeatingControlsComponent));","import * as React from \"react\";\nimport {Button} from \"../_shared/buttons/Button\";\nimport {SelectionValue} from \"../../store/patterns/selection/types\";\nimport '../../styles/selectionControls.scss';\n\nexport interface SelectionControlsProps {\n    selectionValue: SelectionValue\n\n    onClear()\n\n    onCreatePattern()\n\n    onCut()\n\n}\n\nexport interface SelectionControlsState {\n\n}\n\nexport class SelectionControls extends React.PureComponent<SelectionControlsProps, SelectionControlsState> {\n\n    render() {\n        const {onClear, onCreatePattern, onCut, selectionValue} = this.props;\n        return selectionValue.segments && selectionValue.segments.length ? (\n            <div className={'selection-controls'}>\n                <Button\n                    onClick={onClear}>clear</Button>\n\n                <Button\n                    onClick={onCreatePattern}>pattern</Button>\n                <Button\n                    onClick={onCut}>cut</Button>\n            </div>\n        ) : null;\n    }\n}","import {PatternsState} from \"../types\";\nimport {PatternAction, PatternConfig, PatternParams, PatternState} from \"./types\";\n\nexport type PatternReducer<T extends PatternAction> =\n    (pattern: PatternState, action: T, state: PatternsState) => PatternState\n\nexport const reducePattern = <T extends PatternAction>(reducer: PatternReducer<T>) =>\n    (state: PatternsState, action: T) => ({\n        ...state,\n        [action.id]: reducer(state[action.id], action, state)\n    });\n\nexport const getPatternConfig = (pattern: PatternState): PatternConfig => {\n    return {\n        startImage: pattern.current.imageData,\n        startMask: pattern.mask ? pattern.mask.value.imageData : null,\n\n        width: pattern.current.width,\n        height: pattern.current.height,\n\n        history: !!pattern.history,\n\n        store: !!pattern.store,\n\n        selection: !!pattern.selection,\n\n        mask: !!pattern.mask,\n\n        rotation: !!pattern.rotation,\n\n        repeating: !!pattern.repeating,\n\n        room: !!pattern.room\n    }\n};\nexport const getPatternParams = (pattern: PatternState): PatternParams => {\n    return {\n        history: pattern.history && pattern.history.params,\n\n        store: pattern.store && pattern.store.params,\n\n        rotation: pattern.rotation && pattern.rotation.params,\n\n        repeating: pattern.repeating && pattern.repeating.params,\n\n        selection: pattern.selection && pattern.selection.params,\n\n        mask: pattern.mask && pattern.mask.params,\n\n        import: pattern.import && pattern.import.params,\n\n        room: pattern.room && pattern.room.params\n    }\n};","import * as React from \"react\";\nimport {ButtonSelect} from \"./buttons/ButtonSelect\";\nimport {ButtonNumber} from \"./buttons/ButtonNumber\";\nimport {SelectButtons} from \"./buttons/SelectButtons\";\nimport {EventData} from \"../../utils/types\";\n\nexport interface ParamConfig {\n    type: EParamType\n    props?: any\n    name: string\n}\n\nexport enum EParamType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    Select = \"select\",\n}\n\nexport const ParamComponents = {\n    [EParamType.Boolean]: ButtonSelect,\n    [EParamType.Select]: SelectButtons,\n    [EParamType.Number]: ButtonNumber,\n};\n\nexport interface ParamsProps {\n    data: any\n    value?: any\n    name?: string\n\n    onChange?(value?: any, name?: string)\n}\n\nexport interface ParamsState {\n\n}\n\nexport class Params extends React.PureComponent<ParamsProps, ParamsState> {\n\n    handleChange = (data: EventData) => {\n        const {value, onChange, name} = this.props;\n\n        console.log(data);\n        onChange && onChange({...value, [data.name]: data.value}, name);\n    };\n\n    render() {\n        const {data, value} = this.props;\n        return (\n            <div className={\"params\"}>\n                {data.map(paramConfig => {\n                    const {type, name, props} = paramConfig;\n                    const Component = ParamComponents[type] || ButtonSelect;\n                    return (\n                        <Component\n                            {...props}\n                            value={value[name]}\n                            name={name}\n                            onChange={this.handleChange}\n                            key={name}/>\n                    );\n                })}\n            </div>\n        );\n    }\n}","export const StackType = {\n    Right: \"right\",\n    Left: \"left\",\n    FromCenter: \"fromcenter\",\n    ToCenter: \"tocenter\",\n};\n\nexport class PixelsStack {\n\n    array;\n    type;\n\n    constructor(size, type?) {\n        this.array = new Array(size);\n        this.type = type || StackType.Right;\n    }\n\n    setType = type => this.type = type;\n\n    push(newEl) {\n        switch (this.type) {\n            case StackType.Right:\n                this.array.shift();\n                this.array.push(newEl);\n                break;\n            case StackType.Left:\n                this.array.pop();\n                this.array.unshift(newEl);\n                break;\n            case StackType.FromCenter:\n                this.array.pop();\n                this.array.shift();\n                this.array = [...this.array.slice(0, this.array.length / 2), newEl, newEl, ...this.array.slice(this.array.length / 2, this.array.length)]\n                break;\n            case StackType.ToCenter:\n                this.array.push(newEl);\n                this.array.unshift(newEl);\n                this.array = [...this.array.slice(0, this.array.length / 2 - 1), ...this.array.slice(this.array.length / 2 + 1, this.array.length)]\n                break;\n            default:\n                this.array.shift();\n                this.array.push(newEl);\n                break;\n        }\n    }\n}\n\n\nexport const get = (pixels, width, d, x, y) => {\n    return pixels ? [\n        pixels[(x + y * width) * d],\n        pixels[(x + y * width) * d + 1],\n        pixels[(x + y * width) * d + 2],\n        pixels[(x + y * width) * d + 3]\n    ] : [0, 0, 0, 255];\n};\n\n\nexport const set = (pixels, width, d, x, y, value) => {\n    pixels[(x + y * width) * d] = value[0];\n    pixels[(x + y * width) * d + 1] = value[1];\n    pixels[(x + y * width) * d + 2] = value[2];\n    pixels[(x + y * width) * d + 3] = value[3];\n    return pixels;\n};\n","import {get, PixelsStack, set} from \"./capture/pixels\";\nimport * as P5 from 'p5';\n\nexport interface ICaptures {\n    [patternId: string]: any\n}\n\nexport class CaptureService {\n\n    captures: ICaptures = {};\n\n    createCapture(patternId, onNewFrame, changeFunction) {\n        const w = 320,\n            h = 240;\n\n        const stack = new PixelsStack(w);\n\n        const a = (Array.from(Array(w))).map((o, i) => i * h / w);\n\n        const f = (x, y?, length?) => x;\n\n        const getFrameN = (x, y, length) => {\n\n            // return getChangeFunction(x, y, length)\n\n\n            let frameN = Math.round(changeFunction(x, y, length));\n            if (frameN >= length) frameN = length - 1;\n            return frameN;\n        };\n\n\n        const getPixel = (pixelsStack, x, y, frameN) =>\n            get(pixelsStack[x], w, 4, frameN, y);\n\n        let canvas;\n        let capture;\n\n        const sketch = new P5(sketch => {\n\n            sketch.setup = () => {\n                sketch.pixelDensity(1);\n                canvas = sketch.createCanvas(w, h);\n                canvas.parent(\"v1\");\n\n                capture = sketch.createCapture({\n                    video: {\n                        mandatory: {\n                            minWidth: w,\n                            minHeight: h\n                        },\n                        optional: [{\n                            maxFrameRate: 30\n                        }]\n                    },\n                    audio: false\n                }, (s, b) => {\n                    // stream(s);\n                    this.captures[patternId].stream = s;\n                    console.log(s, b);\n                });\n                capture.parent(\"v2\");\n                capture.size(w, h);\n\n                sketch.frameRate(30);\n            };\n\n\n            sketch.draw = () => {\n\n                // let time = performance.now();\n\n                sketch.loadPixels();\n\n                capture.loadPixels();\n\n                stack.push(capture.pixels);\n\n\n                let pixelsStack = stack.array;\n\n                for (let x = 0; x < w; x++) {\n                    for (let y = 0; y < h; y++) {\n                        const frameN = getFrameN(x, y, pixelsStack.length);\n                        set(\n                            sketch.pixels,\n                            w,\n                            4, x, y,\n                            getPixel(pixelsStack, x, y, frameN)\n                        )\n                    }\n                }\n\n\n                // pixelsStack = null;\n\n                // console.log(performance.now() - time);\n\n                sketch.updatePixels();\n                onNewFrame(sketch.pixels);\n            }\n        });\n\n        this.captures[patternId] = {\n            sketch,\n            canvas,\n            capture\n        };\n\n        return this.captures[patternId];\n    }\n\n    pause = (patternId) => {\n        this.captures[patternId].sketch.noLoop();\n    };\n\n    play = (patternId) => {\n        this.captures[patternId].sketch.loop();\n    };\n\n    start = (patternId, onNewFrame, cf) => {\n\n        if (this.captures[patternId]) {\n            this.stop(patternId);\n        }\n\n        this.captures[patternId] = this.createCapture(patternId, onNewFrame, cf);\n\n        return this.captures[patternId];\n    };\n\n    stop = (patternId: string) => {\n\n        const {[patternId]: stopped, ...others} = this.captures;\n\n        if (stopped) {\n            stopped.sketch.noLoop();\n            stopped.sketch.remove();\n            stopped.stream.getTracks()[0].stop();\n\n            this.captures = others;\n        }\n    };\n\n}\n\nexport const Captures = new CaptureService();","import {PatternAction} from \"../pattern/types\";\nimport {VideoParams} from \"./types\";\nimport {AppState} from \"../../index\";\nimport {Capture} from \"./capture\";\nimport {Formulas} from \"./capture/formulas\";\nimport {get, PixelsStack, set} from \"./capture/pixels\";\nimport 'p5/lib/addons/p5.dom';\nimport {EdgeMode} from \"./capture/types\";\nimport {updateImage} from \"../pattern/actions\";\nimport {Captures} from \"./services\";\nimport {videoChangeFunctionByType} from \"../../changeFunctions/helpers\";\n\nexport enum EVideoAction {\n    SET_VIDEO_PARAMS = 'pattern/video/set-video-param'\n\n}\n\nexport interface SetVideoParamsAction extends PatternAction {\n    value: VideoParams\n}\n\nexport const start = (patternId: string) => (dispatch, getState: () => AppState) => {\n\n    Captures.start(patternId, (pixels) => dispatch(updateImage(patternId, new ImageData(pixels, 320), false)), (x, y, length) => {\n        const state = getState();\n\n\n        const cfId = state.patterns[patternId].video.params.changeFunctionId;\n\n        if (cfId) {\n\n            const width = state.patterns[patternId].current.width;\n            const height = state.patterns[patternId].current.height;\n            const cfParams = state.changeFunctions.functions[cfId].params;\n            const cfType = state.changeFunctions.functions[cfId].type;\n            return videoChangeFunctionByType[cfType](x, y, width, height, cfParams);\n        } else {\n            return x;\n        }\n    });\n};\nexport const stop = (patternId: string) => (dispatch, getState: () => AppState) => {\n    Captures.stop(patternId);\n};\nexport const pause = (patternId: string) => (dispatch, getState: () => AppState) => {\n    Captures.pause(patternId);\n\n};\nexport const play = (patternId: string) => (dispatch, getState: () => AppState) => {\n    Captures.play(patternId);\n\n};\n\nexport const onNewFrame = (id: string, imageData: ImageData) => (dispatch, getState: () => AppState) => {\n\n    dispatch(updateImage(id,imageData));\n\n};\n\nexport const setVideoParams = (id: string, value: VideoParams) => (dispatch, getState: () => AppState) => {\n    dispatch({\n        type: EVideoAction.SET_VIDEO_PARAMS,\n        id,\n        value\n    })\n};\n\n","import {EParamType} from \"../../../components/_shared/Params\";\nimport {ValueD} from \"../../../components/_shared/buttons/ButtonNumber\";\n\nexport const sinInitialParams = {\n    a: 0.3,\n    t: 3000,\n    o: 0,\n};\n\nexport const sinParamsConfig = [{\n    name: \"a\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(100),\n        range: [0, 1] as [number, number]\n    }\n}, {\n    name: \"t\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(0.1),\n        range: [1, 5000] as [number, number]\n    }\n}, {\n    name: \"o\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(4),\n        range: [0, 1] as [number, number]\n    }\n}];\n\nexport const sinChangeFunction =\n    ({params, range, pattern}) =>\n        ({startValue, time, position}) =>\n            startValue + params.a * (range[1] - range[0]) * Math.sin((time) / params.t * 2 * Math.PI + params.o * 2 * Math.PI);\n","import {EParamType} from \"../../../components/_shared/Params\";\nimport {ValueD} from \"../../../components/_shared/buttons/ButtonNumber\";\n\nexport const loopInitialParams = {\n    start: 0,\n    end: 1,\n    t: 3000,\n    p: 0,\n};\n\nexport interface LoopParamConfig {\n    name: string\n    type: EParamType\n    props: any\n}\n\nexport const loopParamsConfig: LoopParamConfig[] = [{\n    name: \"start\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(100),\n        range: [0, 1] as [number, number]\n    }\n}, {\n    name: \"end\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(100),\n        range: [0, 1] as [number, number]\n    }\n}, {\n    name: \"t\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(0.1),\n        range: [-3000, 3000] as [number, number]\n    }\n}];\n\nexport const loopChangeFunction =\n    ({params, range, pattern}) =>\n        ({startValue, time, position}) => {\n\n            const t = (time % params.t) / params.t;\n\n            const S = params.start * (range[1] - range[0]);\n            const E = params.end * (range[1] - range[0]);\n            const ES = E - S;\n\n            return (((startValue - S) + ES * t) % ES + S);\n        };","\nexport const xyParaboloid = (centerX, centerY, kx, ky) => (x, y) =>\n    Math.pow(x - centerX, 2) * kx\n    + Math.pow(y - centerY, 2) * ky;\n\nexport const paraboloidBySizes = (a, b, c, x, y) => {\n    const f = xyParaboloid(1/2, 1/2, x, y);\n}","import {EParamType} from \"../../../components/_shared/Params\";\nimport {ValueD} from \"../../../components/_shared/buttons/ButtonNumber\";\nimport {xyParaboloid} from \"./helpers\";\nimport {coordHelper, redHelper} from \"../../../components/Area/canvasPosition.servise\";\n\nexport const xyParaboloidInitialParams = {\n    zd: 0,\n    end: 1,\n    x: 1.5,\n    y: 1.5,\n};\n\nexport const xyParaboloidParamsConfig = [{\n    name: \"zd\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(100),\n        range: [0, 1] as [number, number]\n    }\n}, {\n    name: \"end\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(100),\n        range: [0, 1] as [number, number]\n    }\n}, {\n    name: \"x\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(0.1),\n        range: [-500, 500] as [number, number]\n    }\n}, {\n    name: \"y\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(0.1),\n        range: [-500, 500] as [number, number]\n    }\n}, {\n    name: \"xa\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(10),\n        range: [-10, 10] as [number, number]\n    }\n}, {\n    name: \"ya\",\n    type: EParamType.Number,\n    props: {\n        valueD: ValueD.VerticalLinear(10),\n        range: [-10, 10] as [number, number]\n    }\n}];\n\nexport const xyParaboloidNumberChangeFunction =\n    ({params, range, pattern}) =>\n        ({startValue, time, position}) => {\n\n            const {x, y, end, zd} = params;\n\n            const f = xyParaboloid(1/2, 1/2, x, y);\n\n            const width = pattern.current.width;\n            const height = pattern.current.height;\n\n            const xnorm = position.x / width;\n            const ynorm = position.y / height;\n            const znorm = f(xnorm, ynorm) + zd;\n\n            // (range[1] - startValue) * end;\n\n            return Math.max(\n                Math.min(\n                    (znorm * end ) * (range[1] - range[0]) + startValue,\n                    startValue + (range[1] - startValue) * end\n                ),\n                startValue\n            );\n        };\nexport const xyParaboloidVideoChangeFunction =\n        (x, y, width, height, params) => {\n\n            const {x: xk, y: yk, end, zd} = params;\n\n            const f = xyParaboloid(1/2, 1/2, xk, yk);\n\n\n            const xnorm = x / width;\n            const ynorm = y / height;\n            const znorm = f(xnorm, ynorm) * end + zd;\n\n            // (range[1] - startValue) * end;\n\n            return znorm * width;\n        };\n","import {ChangeFunctions} from \"./reducer\";\nimport {ECFType} from \"./types\";\nimport {sinChangeFunction, sinInitialParams, sinParamsConfig} from \"./functions/sin\";\nimport {loopChangeFunction, loopInitialParams, loopParamsConfig} from \"./functions/loop\";\nimport {\n    xyParaboloidNumberChangeFunction,\n    xyParaboloidInitialParams,\n    xyParaboloidParamsConfig,\n    xyParaboloidVideoChangeFunction\n} from \"./functions/xyParaboloid\";\n\nconst getId = (key: string, type: ECFType) => +key.slice(type.toString().length);\n\nexport const cfId = (type: ECFType, state: ChangeFunctions) => {\n    return type.toString() + (Object.keys(state).length\n        ? (Math.max(0,\n        ...Object\n            .keys(state)\n            .filter(key => state[key].type === type)\n            .map(key => getId(key, state[key].type)))) + 1\n        : 1);\n};\n\nconst chInitialParams = {\n    [ECFType.SIN]: sinInitialParams,\n    [ECFType.LOOP]: loopInitialParams,\n    [ECFType.XY_PARABOLOID]: xyParaboloidInitialParams\n};\n\nconst chParamsConfig = {\n    [ECFType.SIN]: sinParamsConfig,\n    [ECFType.LOOP]: loopParamsConfig,\n    [ECFType.XY_PARABOLOID]: xyParaboloidParamsConfig\n};\n\nexport const createCFInitialState = (id, type: ECFType) => {\n\n    return {\n        id,\n        type,\n        params: chInitialParams[type],\n        paramsConfig: chParamsConfig[type]\n    }\n};\n\nexport const changeFunctionByType = {\n    [ECFType.SIN]: sinChangeFunction,\n    [ECFType.LOOP]: loopChangeFunction,\n    [ECFType.XY_PARABOLOID]: xyParaboloidNumberChangeFunction,\n    // [ECFType.SQ]:\n    //     (params, range, pattern) =>\n    //         (startValue, time, position) => {\n    //             const {x: X, y: Y, c: C, xa, ya} = params;\n    //             // console.log(params, range);\n    //             const z = Math.pow(position.x - pattern.current.width / 2, 2) / xa / X + Math.pow(position.y - pattern.current.height / 2, 2) / ya / Y ;\n    //             return z / pattern.current.width * (range[1] - range[0]) + startValue;\n    //         },\n};\n\nexport const videoChangeFunctionByType = {\n    [ECFType.XY_PARABOLOID]: xyParaboloidVideoChangeFunction\n};\n//({a, b, c, h}) => (x, y) => (Math.sin(x / a) * Math.cos(y / b) * c + h),","import {ImageAction} from \"../../../utils/types\";\nimport {PatternAction} from \"../pattern/types\";\nimport {MaskParams} from \"./types\";\n\nexport enum EMaskAction {\n    UPDATE_MASK = \"pattern/update-mask\",\n    SET_MASK_PARAMS = \"pattern/set-mask-params\",\n}\n\nexport interface UpdatePatternMaskAction extends ImageAction, PatternAction {\n}\n\nexport interface SetMaskParamsAction extends PatternAction {\n    params: MaskParams\n}\n\nexport const updateMask = (id: string, imageData: ImageData): UpdatePatternMaskAction =>\n    ({type: EMaskAction.UPDATE_MASK, imageData, id});\nexport const setMaskParams = (id: string, params: MaskParams): SetMaskParamsAction =>\n    ({type: EMaskAction.SET_MASK_PARAMS, id, params});","import * as React from \"react\";\nimport {ButtonSelect} from \"../_shared/buttons/ButtonSelect\";\nimport {VideoParams} from \"../../store/patterns/video/types\";\nimport * as P5 from 'p5';\nimport {get, PixelsStack, set} from \"../../store/patterns/video/capture/pixels\";\nimport {SelectDrop} from \"../_shared/buttons/SelectDrop\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\nimport {ChangeFunctions} from \"../../store/changeFunctions/reducer\";\nimport {createCapture} from \"../../store/patterns/video/capture/createCapture\";\nimport {onNewFrame, pause, play, setVideoParams, start, stop} from \"../../store/patterns/video/actions\";\nimport {getCFs} from \"../../store/changeFunctions/selectors\";\n\nexport interface VideoControlsStateProps {\n\n    videoParams: VideoParams\n\n    changeFunctions: ChangeFunctions\n}\n\nexport interface VideoControlsActionProps {\n    start\n    stop\n\n    pause\n    play\n\n    setVideoParams(id: string, value: VideoParams)\n\n    onNewVideoFrame(id: string, imageData: ImageData)\n}\n\nexport interface VideoControlsOwnProps {\n    patternId: string\n}\n\nexport interface VideoControlsProps extends VideoControlsStateProps, VideoControlsActionProps, VideoControlsOwnProps {\n\n}\n\nexport interface VideoControlsState {\n    pause: boolean\n}\n\n// todo нужно нормально сделать состояния в редаксе и экшены-свитчи\nexport class VideoControlsComponent extends React.PureComponent<VideoControlsProps, VideoControlsState> {\n\n    capture;\n    sketch;\n    stream;\n\n    state = {\n        pause: false\n    };\n\n\n    componentDidUpdate(prevProps: Readonly<VideoControlsProps>, prevState: Readonly<VideoControlsState>, snapshot?: any): void {\n\n        if (!prevProps.videoParams.on && this.props.videoParams.on) {\n            this.props.start(this.props.patternId);\n        }\n\n        if (prevProps.videoParams.on && !this.props.videoParams.on) {\n            this.props.stop(this.props.patternId);\n        }\n    }\n\n    handleChangeOnParam = (data) => {\n        const {setVideoParams, videoParams, patternId} = this.props;\n        const {selected} = data;\n        setVideoParams(patternId, {\n            ...videoParams,\n            on: !selected\n        });\n        this.setState({pause: selected})\n    };\n\n    handleChangeParam = (data) => {\n        const {setVideoParams, videoParams, patternId} = this.props;\n        const {value, name} = data;\n        setVideoParams(patternId, {\n            ...videoParams,\n            [name]: value\n        });\n    };\n\n    handlePause = () => {\n        if (this.state.pause) {\n            this.props.play(this.props.patternId);\n            this.setState({pause: false})\n        } else {\n            this.props.pause(this.props.patternId);\n            this.setState({pause: true})\n        }\n    };\n\n    componentWillUnmount(): void {\n        this.props.stop(this.props.patternId);\n    }\n\n    availableChangeTypes = [ECFType.XY_PARABOLOID];\n\n    render() {\n        const {changeFunctions, videoParams: params} = this.props;\n        const {on} = params;\n\n        return (\n            <div className={\"video-controls\"}>\n                <ButtonSelect\n                    selected={on}\n                    name={'on'}\n                    onClick={this.handleChangeOnParam}\n                >{on ? \"off\" : \"on\"}</ButtonSelect>\n\n                <ButtonSelect\n                    disabled={!on}\n                    selected={this.state.pause && on}\n                    name={'pause'}\n                    onClick={this.handlePause}\n                >{this.state.pause ? \"play\" : \"pause\"}</ButtonSelect>\n\n                <SelectDrop\n                    nullAble\n                    getValue={({id}) => id}\n                    getText={({id}) => id}\n                    name={\"changeFunctionId\"}\n                    value={params.changeFunctionId}\n                    items={Object.values(changeFunctions)\n                        .filter((value) => this.availableChangeTypes.indexOf(value.type) !== -1)}\n                    onChange={this.handleChangeParam}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<VideoControlsStateProps, VideoControlsOwnProps, AppState> = (state, {patternId}) => ({\n    changeFunctions: getCFs(state),\n    videoParams: state.patterns[patternId]?.video?.params || null\n});\n\nconst mapDispatchToProps: MapDispatchToProps<VideoControlsActionProps, VideoControlsOwnProps> = {\n    start,\n    stop,\n    pause,\n    play,\n\n    setVideoParams,\n    onNewVideoFrame: onNewFrame\n};\n\nexport const VideoControls = connect<VideoControlsStateProps, VideoControlsActionProps, VideoControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(VideoControlsComponent);","import * as React from \"react\";\nimport '../../styles/inputFile.scss';\nimport {Button} from \"./buttons/Button\";\n\nexport interface FileProps {\n    onChange(image)\n    name: string\n    children: string\n}\n\nexport interface FileState {\n\n}\n\nexport class File extends React.PureComponent<FileProps, FileState> {\n\n    inputRef;\n\n    constructor(props) {\n        super(props);\n\n        this.inputRef = React.createRef();\n    }\n\n    handleFile = e => {\n        var reader = new FileReader();\n        reader.onload = (event) => {\n            var img = new Image();\n            img.onload = () => {\n                this.props.onChange(img);\n                // this.refs.canvas.ctx.drawImage(img, 0, 0, this.props.value.w, this.props.value.h);\n                // this.updateMaskedImage();\n            };\n            img.src = event.target.result as string;\n            this.inputRef.current.value = null;\n        };\n        if (e.target.files[0])\n            reader.readAsDataURL(e.target.files[0]);\n    };\n\n    render() {\n        const { name, children } = this.props;\n        return (\n            <div className={'input-file'}>\n                <input\n                    type=\"file\"\n                    name={name}\n                    id={name}\n                    ref={this.inputRef}\n                    onChange={this.handleFile}/>\n                <label htmlFor={name}>{children}</label>\n            </div>\n        );\n    }\n}","import {PatternAction} from \"../pattern/types\";\nimport {ImportParams} from \"./types\";\nimport {imageToImageData} from \"../../../utils/canvas/helpers/imageData\";\nimport {AppState} from \"../../index\";\nimport {dateZs} from \"../../../utils/utils\";\nimport {updateImage} from \"../pattern/actions\";\n\nexport enum EImportAction {\n    SET_IMPORT_PARAMS = \"pattern/set-import-params\",\n    LOAD = \"pattern/load\",\n    SAVE = \"pattern/save\",\n}\n\nexport interface SetImportParamsAction extends PatternAction {\n    value: ImportParams\n}\n\nexport interface ImportAction extends PatternAction {\n}\n\nexport interface SaveAction extends PatternAction {\n}\n\nexport const setImportParams = (id: string, value: ImportParams): SetImportParamsAction =>\n    ({type: EImportAction.SET_IMPORT_PARAMS, id, value});\nexport const load = (id: string, image) => (dispatch, getState) => {\n\n    const imageData = imageToImageData(image);\n\n    const state: AppState = getState();\n\n    const isFit = state.patterns[id].import.params.fit;\n\n    if (isFit) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n            return null;\n        }\n\n\n        const oldWidth = state.patterns[id].current.width;\n        const oldHeight = state.patterns[id].current.height;\n\n        canvas.width = oldWidth;\n        canvas.height = oldHeight;\n\n        ctx.drawImage(image, 0, 0, oldWidth, oldHeight);\n\n\n        const imageData2 = ctx.getImageData(0, 0, oldWidth, oldHeight);\n        dispatch(updateImage(id, imageData2));\n\n    } else {\n\n        dispatch(updateImage(id, imageData));\n    }\n\n\n    dispatch({type: EImportAction.LOAD, id, imageData});\n};\nexport const save = (id: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n        return null;\n    }\n\n\n    canvas.width = state.patterns[id].current.width;\n    canvas.height = state.patterns[id].current.height;\n\n    ctx.putImageData(state.patterns[id].current.imageData, 0, 0);\n\n\n    var dataURL = canvas.toDataURL(\"image/png\");\n    var link = document.createElement(\"a\");\n    document.body.appendChild(link); // Firefox requires the link to be in the body :(\n    link.href = dataURL;\n    link.download = `${dateZs()}.png`;\n    link.click();\n    document.body.removeChild(link);\n\n\n    dispatch({type: EImportAction.SAVE, id});\n};","import {PatternAction} from \"../pattern/types\";\nimport {createRoom_s} from \"./service\";\nimport {base64ToImageData} from \"../../../utils/canvas/helpers/imageData\";\nimport {ThunkResult} from \"../../../utils/actions/types\";\nimport {AppState} from \"../../index\";\nimport {updateImage} from \"../pattern/actions\";\n\nexport enum ERoomAction {\n    CREATE_ROOM = \"pattern/create-room\",\n}\n\nexport interface CreateRoomAction extends PatternAction {\n    roomName: string\n    socket: any\n}\n\nexport const createRoom = (id: string, roomName: string): ThunkResult<CreateRoomAction, AppState> =>\n    dispatch => {\n        const socket = createRoom_s(roomName);\n\n        socket.on(\"image\", base64 => {\n            base64ToImageData(base64).then(imageData => {\n                dispatch(updateImage(id, imageData, false));\n            });\n        });\n\n        return dispatch({type: ERoomAction.CREATE_ROOM, id, roomName, socket})\n    };","import {PatternAction} from \"../pattern/types\";\nimport {Segments} from \"./types\";\nimport {AppState} from \"../../index\";\nimport {addPattern} from \"../actions\";\nimport {updateImage} from \"../pattern/actions\";\nimport {getPatternConfig, getPatternParams} from \"../pattern/helpers\";\nimport {getSelectedImageData, getSelectedMask} from \"./helpers\";\n\nexport enum ESelectionAction {\n    UPDATE_SELECTION = \"pattern/update-selection\",\n}\n\nexport interface UpdatePatternSelectionAction extends PatternAction {\n    value: Segments\n    bBox: SVGRect\n}\n\nexport interface CreatePatternFromSelection extends PatternAction {\n}\n\nexport const updateSelection = (id: string, value: Segments, bBox: SVGRect): UpdatePatternSelectionAction =>\n    ({type: ESelectionAction.UPDATE_SELECTION, value, bBox, id});\n\nexport const createPatternFromSelection = (id: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const pattern = state.patterns[id];\n\n    const config = {...getPatternConfig(pattern), mask: true};\n    const params = getPatternParams(pattern);\n\n    config.startImage = getSelectedImageData(pattern);\n    config.startMask = getSelectedMask(pattern);\n\n    dispatch(addPattern(config, params));\n};\nexport const cutPatternBySelection = (id: string) => (dispatch, getState) => {\n    const state: AppState = getState();\n\n    const pattern = state.patterns[id];\n\n    dispatch(updateImage(id, getSelectedImageData(pattern)));\n    dispatch(updateSelection(id, [], null));\n};","import * as io from \"socket.io-client\";\n\n\nexport const createRoom_s = (name) => {\n    const socket = io(\"http://64.227.78.194:3000\", {\n    // const socket = io(\"http://localhost:3002\", {\n        path: '/room',\n        query: {name}\n    });\n    return socket;\n};","import * as React from \"react\";\nimport {InputText} from \"../_shared/InputText\";\nimport {Button} from \"../_shared/buttons/Button\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {createRoom} from \"../../store/patterns/room/actions\";\n\nexport interface RoomControlsStateProps {\n    connected: string\n}\n\nexport interface RoomControlsActionProps {\n    createRoom(patternId: string, roomName: string)\n}\n\nexport interface RoomControlsOwnProps {\n    patternId: string\n}\n\nexport interface RoomControlsProps extends RoomControlsStateProps, RoomControlsActionProps, RoomControlsOwnProps {\n\n}\n\nexport interface RoomControlsState {\n\n}\n\nexport interface RoomControlsProps {\n\n}\n\nexport interface RoomControlsState {\n    roomName?: string\n}\n\nexport class RoomControlsComponent extends React.PureComponent<RoomControlsProps, RoomControlsState> {\n    state = {\n        roomName: \"\"\n    };\n\n    handleCreateRoom = () => {\n        const {createRoom, patternId}  = this.props;\n        createRoom(patternId, this.state.roomName);\n    };\n    render() {\n        const {connected} = this.props;\n        return (\n            <>\n\n                {connected}\n                <InputText\n                    value={this.state.roomName}\n                    onChange={roomName => this.setState({roomName})}/>\n                <Button\n                    onClick={this.handleCreateRoom}/>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<RoomControlsStateProps, RoomControlsOwnProps, AppState> = (state, {patternId}) => ({\n    connected: state.patterns[patternId].room?.value?.connected\n});\n\nconst mapDispatchToProps: MapDispatchToProps<RoomControlsActionProps, RoomControlsOwnProps> = {\n    createRoom\n};\n\nexport const RoomControls = connect<RoomControlsStateProps, RoomControlsActionProps, RoomControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(RoomControlsComponent);\n","import * as React from \"react\";\nimport {Button} from \"../_shared/buttons/Button\";\nimport \"../../styles/pattern.scss\";\nimport {HistoryControls} from \"./HistoryControls\";\nimport {Area} from \"../Area\";\nimport {InputNumber} from \"../_shared/InputNumber\";\nimport {ButtonSelect} from \"../_shared/buttons/ButtonSelect\";\nimport {RotationControls} from \"./RotatingControls\";\nimport {RepeatingControls} from \"./RepeatingControls\";\nimport {SelectionControls} from \"./SelectionControls\";\nimport {MaskParams} from \"../../store/patterns/mask/types\";\nimport {RotationValue} from \"../../store/patterns/rotating/types\";\nimport {RepeatingParams} from \"../../store/patterns/repeating/types\";\nimport {ImportParams} from \"../../store/patterns/import/types\";\nimport {PatternConfig} from \"../../store/patterns/pattern/types\";\nimport {HistoryState} from \"../../store/patterns/history/types\";\nimport {StoreState} from \"../../store/patterns/store/types\";\nimport {Segments, SelectionState} from \"../../store/patterns/selection/types\";\nimport {VideoControls} from \"./VideoControls\";\nimport {VideoParams} from \"../../store/patterns/video/types\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\nimport {File} from \"../_shared/File\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {setMaskParams, updateMask} from \"../../store/patterns/mask/actions\";\nimport {createRoom} from \"../../store/patterns/room/actions\";\nimport {addPattern, removePattern} from \"../../store/patterns/actions\";\nimport {doublePattern, editConfig, setHeight, setWidth, updateImage} from \"../../store/patterns/pattern/actions\";\nimport {\n    createPatternFromSelection,\n    cutPatternBySelection,\n    updateSelection\n} from \"../../store/patterns/selection/actions\";\nimport {redo, undo} from \"../../store/patterns/history/actions\";\nimport {setRotation} from \"../../store/patterns/rotating/actions\";\nimport {setRepeating} from \"../../store/patterns/repeating/actions\";\nimport {load, save, setImportParams} from \"../../store/patterns/import/actions\";\nimport {onNewFrame, setVideoParams} from \"../../store/patterns/video/actions\";\nimport {PatternsActionProps, PatternsOwnProps, PatternsStateProps} from \"../Patterns\";\nimport ts from \"typescript/lib/tsserverlibrary\";\nimport {RoomControls} from \"./RoomControls\";\n\nexport interface PatternComponentStateProps {\n\n\n    config: PatternConfig\n    selection: SelectionState\n\n    imageValue: ImageData\n    maskValue?: ImageData\n    maskParams?: MaskParams\n    rotation?: RotationValue\n    importParams: ImportParams\n\n    height: number\n    width: number\n}\n\nexport interface PatternComponentActionProps {\n\n    updateImage(id: string, imageData: ImageData)\n\n    updateMask(id: string, imageData: ImageData)\n\n    editConfig(id: string, config: PatternConfig)\n    setImportParams(id: string, value: ImportParams)\n\n}\n\nexport interface PatternComponentOwnProps {\n    id: string\n}\n\nexport interface PatternComponentProps extends PatternComponentStateProps, PatternComponentActionProps, PatternComponentOwnProps, WithTranslation {\n\n\n\n    connected?: string\n\n    store: StoreState\n\n    resultImage: HTMLCanvasElement\n\n    onImageChange(id: string, imageData: ImageData)\n\n    onMaskChange(id: string, imageData: ImageData)\n\n    onMaskParamsChange(id: string, params: MaskParams)\n\n    onSelectionChange(id: string, selectionValue: Segments, bBox: SVGRect)\n\n    onRemove(id: string)\n\n    onDouble(id: string)\n\n    onSetWidth(id: string, width: number)\n\n    onSetHeight(id: string, height: number)\n\n    onCreateRoom(id: string, name: string)\n\n\n    onLoad(id: string, image)\n\n    onSave(id: string)\n\n    onCreatePatternFromSelection(id: string)\n\n    onCutBySelection(id: string)\n}\n\nexport interface PatternComponentState {\n}\n\nconst inputNumberProps = {min: 0, max: 500, step: 1, delay: 1000, notZero: true};\n\nexport class PatternComponent extends React.PureComponent<PatternComponentProps, PatternComponentState> {\n\n\n    handleImageChange = imageData => this.props.onImageChange(this.props.id, imageData);\n\n    handleMaskChange = imageData => this.props.onMaskChange(this.props.id, imageData);\n\n    handleSelectionChange = (value, bBox: SVGRect) =>\n        this.props.onSelectionChange(this.props.id, value, bBox);\n\n    handleClearSelection = () =>\n        this.props.onSelectionChange(this.props.id, [], null);\n\n    handleRemove = () => this.props.onRemove(this.props.id);\n\n    handleDouble = () => this.props.onDouble(this.props.id);\n\n    handleSetWidth = width => this.props.onSetWidth(this.props.id, width);\n\n    handleSetHeight = height => this.props.onSetHeight(this.props.id, height);\n\n\n    handleMaskParamsChange = (params: MaskParams) =>\n        this.props.onMaskParamsChange(this.props.id, params);\n\n    handleCreateRoom = (roomName) => {\n        this.props.onCreateRoom(this.props.id, roomName);\n    };\n\n    handleConfigToggle = (data) => {\n        this.props.editConfig(this.props.id, {\n            ...this.props.config,\n            [data.name]: !data.selected\n        })\n    };\n\n    handleLoad = (image) => {\n        this.props.onLoad(this.props.id, image)\n    };\n    handleSave = () => {\n        this.props.onSave(this.props.id)\n    };\n    handleFitChange = (data) => {\n        const {importParams, id} = this.props;\n        const {selected} = data;\n        this.props.setImportParams(id, {\n            ...importParams,\n            fit: !selected\n        });\n    };\n\n    handleCreatePatternFromSelection = () => {\n        this.props.onCreatePatternFromSelection(this.props.id)\n    };\n    handleCutBySelection = () => {\n        this.props.onCutBySelection(this.props.id)\n    };\n\n    render() {\n        const {\n            imageValue, maskValue,\n            height, width, id, config, selection, rotation, importParams,\n            t\n        } = this.props;\n\n        console.log(\"pattern render \", id, rotation);\n        return (\n            <div className=\"pattern\">\n                <div className=\"left\">\n                    <div className=\"plugins\">\n\n                        {config.repeating &&\n                        <RepeatingControls patternId={id}/>}\n\n                        {config.video &&\n                        <VideoControls patternId={id}/>}\n\n                        {config.rotation &&\n                        <RotationControls patternId={id}/>}\n\n                        {config.room &&\n                        <RoomControls patternId={id}/>}\n\n                        <div className={'plugins-toggles'}>\n                            {/*<ButtonSelect*/}\n                            {/*    name={\"mask\"}*/}\n                            {/*    selected={config.mask}*/}\n                            {/*    onClick={this.handleConfigToggle}>mask</ButtonSelect>*/}\n                            <ButtonSelect\n                                name={\"repeating\"}\n                                selected={config.repeating}\n                                onClick={this.handleConfigToggle}>{t('plugins.repeating')}</ButtonSelect>\n                            <ButtonSelect\n                                name={\"rotation\"}\n                                selected={config.rotation}\n                                onClick={this.handleConfigToggle}>{t('plugins.rotating')}</ButtonSelect>\n                            <ButtonSelect\n                                name={\"room\"}\n                                selected={config.room}\n                                onClick={this.handleConfigToggle}>{t('plugins.room')}</ButtonSelect>\n                            <ButtonSelect\n                                name={\"video\"}\n                                selected={config.video}\n                                onClick={this.handleConfigToggle}>{t('plugins.video')}</ButtonSelect>\n                        </div>\n                    </div>\n                    <div className=\"pattern-controls\">\n\n                        <Button onClick={this.handleRemove}>{t('patternControls.delete')}</Button>\n                        <Button onClick={this.handleDouble}>{t('patternControls.double')}</Button>\n                        <div className={'save-load-sizes'}>\n                            <div>\n                                <Button onClick={this.handleSave}>{t('patternControls.save')}</Button>\n                                <File\n                                    name={id + '-fileInput'}\n                                    onChange={this.handleLoad}>{t('patternControls.load')}</File>\n                                <ButtonSelect\n                                    selected={this.props.importParams.fit}\n                                    onClick={this.handleFitChange}>{t('patternControls.stretch')}</ButtonSelect>\n                            </div>\n                            <div className={'pattern-sizes'}>\n                                <InputNumber\n                                    className={\"size-input-number\"}\n                                    onChange={this.handleSetWidth}\n                                    value={width}\n                                    {...inputNumberProps}/>\n                                <InputNumber\n                                    className={\"size-input-number\"}\n                                    onChange={this.handleSetHeight}\n                                    value={height}\n                                    {...inputNumberProps}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"right\">\n\n                    <SelectionControls\n                        selectionValue={selection.value}\n                        onCreatePattern={this.handleCreatePatternFromSelection}\n                        onClear={this.handleClearSelection}\n                        onCut={this.handleCutBySelection}/>\n\n                    <div className={\"areas\"}>\n                        <Area\n                            name={id}\n                            width={width}\n                            height={height}\n\n                            rotation={rotation}\n\n                            imageValue={imageValue}\n\n                            selectionValue={selection.value.segments}\n                            selectionParams={selection.params}\n\n                            onImageChange={this.handleImageChange}\n                            onSelectionChange={this.handleSelectionChange}/>\n                        {config.mask &&\n                        <Area\n                            mask\n                            name={id}\n                            rotation={rotation}\n                            imageValue={maskValue}\n\n                            selectionValue={selection.value.segments}\n                            selectionParams={selection.params}\n\n                            width={width}\n                            height={height}\n                            onSelectionChange={this.handleSelectionChange}\n                            onImageChange={this.handleMaskChange}/>}\n                    </div>\n\n                    {config.history &&\n                    <HistoryControls patternId={id}/>}\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps: MapStateToProps<PatternComponentStateProps, PatternComponentOwnProps, AppState> = (state, {id}) => {\n    const pattern = state.patterns[id];\n    return {\n        importParams: pattern.import.params,\n        config: pattern.config,\n        width: pattern.current.width,\n        height: pattern.current.height,\n        selection: pattern?.selection,\n        rotation: pattern?.rotation?.value,\n        imageValue: pattern?.current?.imageData || null,\n        maskValue: pattern?.mask?.value?.imageData || null,\n    }\n};\n\nconst mapDispatchToProps: MapDispatchToProps<PatternComponentActionProps, PatternComponentOwnProps> = {\n    updateImage,\n    updateMask,\n    editConfig,\n    setImportParams\n};\n\nexport const Pattern = connect<PatternComponentStateProps, PatternComponentActionProps, PatternComponentOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation(\"common\")(PatternComponent));\n\n","export interface FunctionState<V, P> {\n    value: V\n    params: P\n}\n\nexport const getFunctionState = <V, P>(initialValue: V, initialParams: P) =>\n    (enabled?: boolean, state?: FunctionState<V, P>, params?: P): FunctionState<V, P> => {\n        if (!enabled)\n            return;\n\n        return {\n            value: state ? state.value : initialValue,\n            params: params\n                ? (state ? {\n                    ...state.params,\n                    ...params\n                } : {\n                    ...initialParams,\n                    ...params\n                })\n                : (state ? state.params : initialParams)\n        };\n    };","import {Segments, SelectionParams, SelectionValue} from \"./types\";\nimport {PatternState} from \"../pattern/types\";\nimport {imageDataToCanvas} from \"../../../utils/canvas/helpers/imageData\";\nimport {createCanvas} from \"../../../utils/canvas/helpers/base\";\nimport {pathDataToString} from \"../../../utils/path\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getSelectionState = getFunctionState<SelectionValue, SelectionParams>({\n    segments: [],\n    bBox: null,\n    mask: null\n}, {});\n\nexport const getMaskFromSegments = (width, height, selectionValue: Segments) => {\n\n    const {context} = createCanvas(width, height);\n\n    const path = new Path2D(pathDataToString(selectionValue));\n\n    context.fillStyle = \"black\";\n    context.fill(path);\n\n    return context.getImageData(0, 0, width, height);\n\n};\n\nexport const getSelectedImageData = (pattern: PatternState): ImageData => {\n    const bbox = pattern.selection.value.bBox;\n    const maskImageData = getMaskFromSegments(pattern.current.width, pattern.current.height, pattern.selection.value.segments);\n\n    const {context} = createCanvas(pattern.current.width, pattern.current.height);\n\n    if (maskImageData) {\n        context.putImageData(maskImageData, 0, 0);\n        context.globalCompositeOperation = \"source-in\";\n    }\n    context.drawImage(imageDataToCanvas(pattern.current.imageData), 0, 0, pattern.current.width, pattern.current.height);\n\n    context.getImageData(bbox.x, bbox.y, bbox.width, bbox.height);\n\n\n    return context.getImageData(bbox.x, bbox.y, bbox.width, bbox.height);\n\n};\nexport const getSelectedMask = (pattern: PatternState): ImageData => {\n    const bbox = pattern.selection.value.bBox;\n    const maskImageData = getMaskFromSegments(pattern.current.width, pattern.current.height, pattern.selection.value.segments);\n\n    const {context} = createCanvas(pattern.current.width, pattern.current.height);\n\n    if (maskImageData) {\n        context.putImageData(maskImageData, 0, 0);\n        context.globalCompositeOperation = \"source-in\";\n    }\n\n    if ( pattern.mask ) {\n        context.drawImage(imageDataToCanvas(pattern.mask.value.imageData), 0, 0, pattern.current.width, pattern.current.height)\n    } else {\n        context.fillStyle = 'black';\n        context.fillRect(0,0, pattern.current.width, pattern.current.height);\n    }\n\n    context.getImageData(bbox.x, bbox.y, bbox.width, bbox.height);\n\n\n    return context.getImageData(bbox.x, bbox.y, bbox.width, bbox.height);\n\n};\n\n","import {EToolType, SetCurrentToolAction} from \"./types\";\n\nexport enum EToolAction {\n    SET_CURRENT = \"tools/set-current\"\n}\n\nexport const setCurrentTool = (tool: EToolType): SetCurrentToolAction =>\n    ({type: EToolAction.SET_CURRENT, tool});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../store\";\nimport {Button} from \"./_shared/buttons/Button\";\nimport {\n    addPattern,\n    removePattern\n} from \"../store/patterns/actions\";\nimport {Pattern} from \"./Pattern/\";\nimport {PatternConfig} from \"../store/patterns/pattern/types\";\nimport {setMaskParams, updateMask} from \"../store/patterns/mask/actions\";\nimport {createPatternFromSelection, cutPatternBySelection, updateSelection} from \"../store/patterns/selection/actions\";\nimport {redo, undo} from \"../store/patterns/history/actions\";\nimport {setRotation} from \"../store/patterns/rotating/actions\";\nimport {setRepeating} from \"../store/patterns/repeating/actions\";\nimport {load, save, setImportParams} from \"../store/patterns/import/actions\";\nimport {createRoom} from \"../store/patterns/room/actions\";\nimport {doublePattern, editConfig, setHeight, setWidth, updateImage} from \"../store/patterns/pattern/actions\";\nimport {EPatternType} from \"../store/patterns/types\";\nimport {MaskParams} from \"../store/patterns/mask/types\";\nimport {Segments} from \"../store/patterns/selection/types\";\nimport {RotationValue} from \"../store/patterns/rotating/types\";\nimport {RepeatingParams} from \"../store/patterns/repeating/types\";\nimport {ImportParams} from \"../store/patterns/import/types\";\nimport {onNewFrame, setVideoParams} from \"../store/patterns/video/actions\";\nimport {VideoParams} from \"../store/patterns/video/types\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\n\nexport interface PatternsStateProps {\n    patterns: any\n}\n\nexport interface PatternsActionProps {\n    addPattern(config?: PatternConfig)\n\n    removePattern(id: string)\n\n    doublePattern(id: string)\n\n    updateImage(id: string, imageData: ImageData)\n\n    updateMask(id: string, imageData: ImageData)\n\n    setMaskParams(id: string, params: MaskParams)\n\n    updateSelection(id: string, value: Segments, bBox: SVGRect)\n\n    setWidth(id: string, value: number)\n\n    setHeight(id: string, value: number)\n\n\n    createRoom(id: string, name: string)\n\n\n    save(id: string)\n\n    load(id: string, image)\n\n    createPatternFromSelection(id: string)\n\n    cutPatternBySelection(id: string)\n\n}\n\nexport interface PatternsOwnProps {\n\n}\n\nexport interface PatternsProps extends PatternsStateProps, PatternsActionProps, PatternsOwnProps, WithTranslation {\n\n}\n\nexport interface PatternsState {\n\n}\n\nclass PatternsComponent extends React.PureComponent<PatternsProps, PatternsState> {\n\n    handleAddClick = () => this.props.addPattern({history: true, selection: true, rotation: true, repeating: false});\n\n    render() {\n        const {\n            patterns,\n            createRoom, removePattern, updateImage, updateMask,\n            setMaskParams, updateSelection, setWidth,\n            setHeight,\n            save, load,\n            createPatternFromSelection, doublePattern, cutPatternBySelection,\n            t,\n        } = this.props;\n        return (\n            <>\n                {patterns.map(({id, current, mask, config, store, selection, connected, resultImage, rotation, import: loading}) => {\n                    return (\n                        <Pattern\n                            key={id}\n                            id={id}\n\n                            connected={connected}\n\n                            store={store}\n                            resultImage={resultImage}\n\n\n\n\n                            onImageChange={updateImage}\n                            onMaskChange={updateMask}\n                            onMaskParamsChange={setMaskParams}\n                            onSelectionChange={updateSelection}\n                            onRemove={removePattern}\n                            onSetWidth={setWidth}\n                            onSetHeight={setHeight}\n                            onCreateRoom={createRoom}\n\n                            onSave={save}\n                            onLoad={load}\n                            onCreatePatternFromSelection={createPatternFromSelection}\n                            onDouble={doublePattern}\n                            onCutBySelection={cutPatternBySelection}\n                        />\n                    );\n                })}\n                <div className={'zero-pattern'}>\n                    <Button onClick={this.handleAddClick}>{t(\"add\")}</Button>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<PatternsStateProps, {}, AppState> = state => ({\n    patterns: Object.values(state.patterns)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<PatternsActionProps, PatternsOwnProps> = {\n    setMaskParams,\n    createRoom,\n    addPattern,\n    removePattern,\n    updateImage,\n    updateSelection,\n    setWidth,\n    setHeight,\n    updateMask,\n    save,\n    load,\n    createPatternFromSelection,\n    doublePattern,\n    cutPatternBySelection,\n};\n\nexport const Patterns = connect<PatternsStateProps, PatternsActionProps, PatternsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation(\"common\")(PatternsComponent));","import {BrushParams, SetBrushParamsAction} from \"./types\";\n\nexport enum EBrushAction {\n    SET_PARAMS = \"brush/set-params\",\n}\n\nexport const setBrushParams = (params: BrushParams): SetBrushParamsAction =>\n    ({type: EBrushAction.SET_PARAMS, params});","import {ChangeColorAction} from \"./types\";\n\n\nexport enum EColorAction {\n    CHANGE = \"color/change\",\n}\n\nexport const changeColor = (color: string): ChangeColorAction =>\n    ({type: EColorAction.CHANGE, color});","import {createSelector} from \"reselect\";\nimport {objectToSelectItems} from \"../../utils/utils\";\nimport {PatternState} from \"./pattern/types\";\n\nconst getPatternsState = state => state.patterns;\n\n\nexport const getPatternsSelectItems = createSelector(\n    [getPatternsState],\n    patterns => {\n        return Object.values(patterns).map((pattern) => {\n            const {current, id, resultImage} = pattern as PatternState;\n            return {\n                imageData: current.imageData,\n                image: resultImage,\n                id\n            }\n        })\n    });","import * as React from \"react\";\nimport {bindDrawFunctions} from \"../../../utils/bezier\";\nimport {imageDataToCanvas} from \"../../../utils/canvas/helpers/imageData\";\n\nexport interface ImageDataProps {\n    width: number\n    height: number\n    imageData: ImageData\n}\n\nexport interface ImageDataState {\n\n}\n\nexport class ImageDataCanvas extends React.PureComponent<ImageDataProps, ImageDataState> {\n    canvasRef;\n    drawFunctions;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n    }\n\n    draw = () => {\n        const {width, height, imageData} = this.props;\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(imageDataToCanvas(imageData), 0, 0, width, height);\n    };\n\n    componentDidMount(): void {\n        if (this.canvasRef.current) {\n\n            this.drawFunctions = bindDrawFunctions(this.canvasRef.current);\n\n            this.draw();\n            // handleInteraction(this.canvasRef.current, this.curve).onupdate = this.handleUpdate\n        }\n    }\n\n    componentDidUpdate(): void {\n\n        this.drawFunctions.reset();\n        this.draw();\n        // this.canvasRef.current.canvasRef.setImageData(crea)\n    }\n\n    render() {\n        const {width, height} = this.props;\n        return (\n            <canvas\n                className={\"canvas-by-draw-function\"}\n                width={width}\n                height={height}\n                ref={this.canvasRef}/>\n        );\n    }\n}","import * as React from \"react\";\n\nexport interface ColorValueProps {\n    color: string\n}\n\nexport interface ColorValueState {\n\n}\n\nexport class ColorValue extends React.PureComponent<ColorValueProps, ColorValueState> {\n\n    render() {\n        return (\n            <div className={'color-value'} style={{backgroundColor: this.props.color}}></div>\n        );\n    }\n}","import * as React from \"react\";\nimport '../../../styles/color.scss';\nimport {ColorValue} from \"./ColorValue\";\n\nexport interface ColorProps {\n    color: string\n    onChange(color: string)\n}\n\nexport interface ColorState {\n\n}\n\nexport class Color extends React.PureComponent<ColorProps, ColorState> {\n\n    render() {\n        const {color} = this.props;\n        return (\n            <div className={'color'}>\n                <ColorValue color={color}/>\n            </div>\n        );\n    }\n}","import {LineParams, SetLineParamsAction} from \"./types\";\n\nexport enum ELineAction {\n    SET_PARAMS = \"line/set-params\",\n}\n\nexport const setLineParams = (params: LineParams): SetLineParamsAction =>\n    ({type: ELineAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store/index\";\nimport {Color} from \"../_shared/Color\";\nimport {changeColor} from \"../../store/color/actions\";\n\nexport interface ColorStateProps {\n    color: string\n}\n\nexport interface ColorActionProps {\n    changeColor\n}\n\nexport interface ColorOwnProps {\n\n}\n\nexport interface ColorProps extends ColorStateProps, ColorActionProps, ColorOwnProps {\n\n}\n\nexport interface ColorState {\n\n}\n\nclass ColorComponent extends React.PureComponent<ColorProps, ColorState> {\n    render() {\n        const {color, changeColor} = this.props;\n        return (\n            <Color color={color} onChange={changeColor} />\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ColorStateProps, ColorOwnProps, AppState> = state => ({\n    color: state.color.value\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ColorActionProps, ColorOwnProps> = {\n    changeColor\n};\n\nexport const ColorPalette = connect<ColorStateProps, ColorActionProps, ColorOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ColorComponent);","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {setBrushParams} from \"../../store/brush/actions\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {SelectButtons} from \"../_shared/buttons/SelectButtons\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\nimport {SelectDrop} from \"../_shared/buttons/SelectDrop\";\nimport {createSelector} from \"reselect\";\nimport {ImageDataCanvas} from \"../_shared/canvases/ImageData\";\nimport {ButtonSelect} from \"../_shared/buttons/ButtonSelect\";\nimport \"../../styles/patternSelectButton.scss\"\nimport '../../styles/brush.scss'\nimport {ColorPalette} from \"../ColorPalette\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\n\nexport interface BrushStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: BrushParams\n    patternsSelectItems: any[]\n}\n\nexport interface BrushActionProps {\n    setBrushParams(params: BrushParams)\n}\n\nexport interface BrushOwnProps {\n\n}\n\nexport interface BrushProps extends BrushStateProps, BrushActionProps, BrushOwnProps, WithTranslation {\n\n}\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst patternSizeRange = [0, 5] as [number, number];\nconst patternSizeValueD = ValueD.VerticalLinear(200);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass BrushComponent extends React.PureComponent<BrushProps> {\n\n    handleSizeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            size: value\n        })\n    };\n\n    handlePatternChange = (id) => () => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            pattern: +id\n        })\n    };\n\n    handleCompositeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            compositeOperation: value\n        })\n    };\n\n    handleOpacityChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            opacity: value\n        })\n    };\n\n    handleTypeChange = ({value}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            type: value\n        })\n    };\n\n    handleParamChange = ({value, name}) => {\n        this.props.setBrushParams({\n            ...this.props.paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsConfigMap, paramsValue, patternsSelectItems, t} = this.props;\n\n        console.log(paramsConfigMap[\"type\"].props.items);\n        return (\n            <div className='brush-tool'>\n                <SelectButtons\n                    value={paramsValue.type}\n                    getText={item => t(`brushTypes.${item.text.toLowerCase()}`)}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleTypeChange}/>\n\n                <div className='brush-params'>\n\n                    {paramsValue.type === EBrushType.Pattern ?\n                        <ButtonNumberCF\n                            path={\"brush.params.patternSize\"}\n                            value={paramsValue.patternSize}\n                            name={\"patternSize\"}\n                            onChange={this.handleParamChange}\n                            range={patternSizeRange}\n                            valueD={patternSizeValueD}/> :\n                        <ButtonNumberCF\n                            path={\"brush.params.size\"}\n                            value={paramsValue.size}\n                            name={\"size\"}\n                            onChange={this.handleSizeChange}\n                            range={sizeRange}\n                            valueD={sizeValueD}/>}\n\n                    <ButtonNumberCF\n                        path={\"brush.params.opacity\"}\n                        value={paramsValue.opacity}\n                        name={\"opacity\"}\n                        onChange={this.handleOpacityChange}\n                        range={opacityRange}\n                        valueD={opacityValueD}/>\n                    <SelectDrop\n                        value={paramsValue.compositeOperation}\n                        items={paramsConfigMap[\"compositeOperation\"].props.items}\n                        onChange={this.handleCompositeChange}/>\n\n                </div>\n                <div className={'pattern-list'}>\n                    {paramsValue.type === EBrushType.Pattern && (<>\n                        {patternsSelectItems.map(({imageData, id}, i) => {\n                            const w = imageData.width;\n                            const h = imageData.height;\n                            // const coef  = w/h > 1 ?\n                            return (\n                                <>\n                                    <ButtonSelect\n                                        className={'pattern-select-button'}\n                                        width={42} height={42}\n                                        onClick={this.handlePatternChange(id)}\n                                        selected={+id === paramsValue.pattern}>\n                                        <ImageDataCanvas\n                                            width={40 * (w / h <= 1 ? w / h : 1)}\n                                            height={40 * (w / h > 1 ? h / w : 1)}\n                                            imageData={imageData}/>\n                                    </ButtonSelect>\n                                    {!((i + 1) % 5) ? <br/> : null}\n                                </>\n                            )\n                        })}\n                    </>)}\n                </div>\n\n                {paramsValue.type !== EBrushType.Pattern && (\n                    <ColorPalette/>\n                )}\n            </div>\n        );\n    }\n}\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.brush.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<BrushStateProps, BrushOwnProps, AppState> = state => ({\n    paramsConfig: state.brush.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.brush.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<BrushActionProps, BrushOwnProps> = {\n    setBrushParams\n};\n\nexport const Brush = connect<BrushStateProps, BrushActionProps, BrushOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation('common')(BrushComponent));","import {SelectToolParams, SetSelectToolParamsAction} from \"./types\";\n\nexport enum ESelectToolAction {\n    SET_PARAMS = \"select/set-params\",\n}\n\nexport const setSelectToolParams = (params: SelectToolParams): SetSelectToolParamsAction =>\n    ({type: ESelectToolAction.SET_PARAMS, params});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ELineType, LineParams} from \"../../store/line/types\";\nimport {setLineParams} from \"../../store/line/actions\";\nimport {createSelector} from \"reselect\";\nimport {SelectButtons} from \"../_shared/buttons/SelectButtons\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport {SelectDrop} from \"../_shared/buttons/SelectDrop\";\nimport {BrushParams, EBrushType} from \"../../store/brush/types\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {getPatternsSelectItems} from \"../../store/patterns/selectors\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\nimport '../../styles/lineTool.scss';\n\nexport interface LineStateProps {\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: ParamConfig[]\n    paramsValue: LineParams\n    patternsSelectItems: any[]\n}\n\nexport interface LineActionProps {\n    setLineParams(params: LineParams)\n}\n\nexport interface LineOwnProps {\n\n}\n\nexport interface LineProps extends LineStateProps, LineActionProps, LineOwnProps, WithTranslation {\n\n}\n\n\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.2);\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass LineComponent extends React.PureComponent<LineProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setLineParams, paramsValue} = this.props;\n        setLineParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsConfigMap, paramsConfig, paramsValue, patternsSelectItems, t} = this.props;\n        return (\n            <div className='line-tool'>\n                <SelectButtons\n                    br={3}\n                    value={paramsValue.type}\n                    name={\"type\"}\n                    getText={item => t(`lineTypes.${item.text.toLowerCase()}`)}\n                    items={paramsConfigMap[\"type\"].props.items}\n                    onChange={this.handleParamChange}/>\n\n                <div className='line-params'>\n                    <ButtonNumberCF\n                        path={\"line.params.size\"}\n                        value={paramsValue.size}\n                        name={\"size\"}\n                        onChange={this.handleParamChange}\n                        range={sizeRange}\n                        valueD={sizeValueD}/>\n\n                    <ButtonNumberCF\n                        path={\"line.params.opacity\"}\n                        value={paramsValue.opacity}\n                        name={\"opacity\"}\n                        onChange={this.handleParamChange}\n                        range={opacityRange}\n                        valueD={opacityValueD}/>\n                    <SelectDrop\n                        name={\"compositeOperation\"}\n                        value={paramsValue.compositeOperation}\n                        items={paramsConfigMap[\"compositeOperation\"].props.items}\n                        onChange={this.handleParamChange}/>\n                </div>\n\n                {paramsValue.type === ELineType.Pattern &&\n                <SelectButtons\n                    name={\"pattern\"}\n                    value={paramsValue.pattern}\n                    onChange={this.handleParamChange}\n                    items={patternsSelectItems}/>}\n            </div>\n        );\n    }\n};\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.line.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<LineStateProps, LineOwnProps, AppState> = state => ({\n    paramsConfig: state.line.paramsConfig,\n    paramsConfigMap: paramsConfigMapSelector(state),\n    paramsValue: state.line.params,\n    patternsSelectItems: getPatternsSelectItems(state)\n});\n\nconst mapDispatchToProps: MapDispatchToProps<LineActionProps, LineOwnProps> = {\n    setLineParams\n};\n\nexport const Line = connect<LineStateProps, LineActionProps, LineOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation(\"common\")(LineComponent));","import {handleActions} from \"redux-actions\";\n\nexport enum EFullScreenAction {\n    ON = \"fullscreen/on\",\n    OFF = \"fullscreen/off\",\n    SET = \"fullscreen/set\",\n    REVERSE = \"fullscreen/reverse\",\n}\n\nexport type FullScreenState = boolean;\n\nexport const fullscreenReducer = handleActions<FullScreenState>({\n    [EFullScreenAction.ON]: () => true,\n    [EFullScreenAction.OFF]: () => false,\n    [EFullScreenAction.SET]: (s, a) => a.value,\n    [EFullScreenAction.REVERSE]: (s) => !s,\n}, false);\n\nexport const goFullScreen = () => ({\n    type: EFullScreenAction.ON\n});\nexport const setFullScreen = (value: boolean) => ({\n    type: EFullScreenAction.SET, value\n});\nexport const reverseFullScreen = () => ({\n    type: EFullScreenAction.REVERSE\n});","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {setSelectToolParams} from \"../../store/selectTool/actions\";\nimport {ESelectionMode, SelectToolParams} from \"../../store/selectTool/types\";\nimport {SelectDrop} from \"../_shared/buttons/SelectDrop\";\nimport {createSelector} from \"reselect\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport {SelectButtons} from \"../_shared/buttons/SelectButtons\";\nimport {withTranslation, WithTranslation} from \"react-i18next\";\nimport '../../styles/selectTool.scss';\n\nexport interface SelectToolStateProps {\n\n    paramsConfigMap: {\n        [key: string]: ParamConfig\n    }\n    paramsConfig: object\n    paramsValue: SelectToolParams\n}\n\nexport interface SelectToolActionProps {\n    setSelectToolParams(params: SelectToolParams)\n}\n\nexport interface SelectToolOwnProps {\n\n}\n\nexport interface SelectToolProps extends SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps, WithTranslation {\n\n}\n\nconst opacityRange = [0, 1] as [number, number];\nconst opacityValueD = ValueD.VerticalLinear(100);\n\nclass SelectToolComponent extends React.PureComponent<SelectToolProps> {\n\n    handleParamChange = (data) => {\n        const {value, name} = data;\n        const {setSelectToolParams, paramsValue} = this.props;\n        setSelectToolParams({\n            ...paramsValue,\n            [name]: value\n        })\n    };\n\n    render() {\n        const {paramsValue, paramsConfigMap, t} = this.props;\n        const {mode, curveType, ...otherParams} = paramsConfigMap;\n        return (\n            <div className='select-tool'>\n\n                <SelectButtons\n                    name=\"mode\"\n                    value={paramsValue.mode}\n                    getText={item => t(`selectTypes.${item.text.toLowerCase()}`)}\n                    items={mode.props.items}\n                    onChange={this.handleParamChange}/>\n\n                <div className={'select-tool-params'}>\n                    {paramsValue.mode === ESelectionMode.Points &&\n                    <SelectDrop\n                        name=\"curveType\"\n                        value={paramsValue.curveType}\n                        items={curveType.props.items}\n                        onChange={this.handleParamChange}/>}\n\n                    {Object.values(otherParams).map(({name, props}) => (\n                        <ButtonNumberCF\n                            value={paramsValue[name]}\n                            name={name}\n                            path={`selectTool.params.${name}`}\n                            range={props.range}\n                            onChange={this.handleParamChange}\n                            valueD={opacityValueD}/>\n                    ))}\n\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst paramsConfigMapSelector = createSelector(\n    [(state: AppState) => state.selectTool.paramsConfig],\n    (paramsConfig) => paramsConfig.reduce((res, paramConfig) => {\n        res[paramConfig.name] = paramConfig;\n        return res;\n    }, {}));\n\nconst mapStateToProps: MapStateToProps<SelectToolStateProps, SelectToolOwnProps, AppState> = state => ({\n    paramsConfig: state.selectTool.paramsConfig,\n    paramsValue: state.selectTool.params,\n    paramsConfigMap: paramsConfigMapSelector(state),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<SelectToolActionProps, SelectToolOwnProps> = {\n    setSelectToolParams\n};\n\nexport const SelectTool = connect<SelectToolStateProps, SelectToolActionProps, SelectToolOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation(\"common\")(SelectToolComponent));","import {AddCFAction, ChangeCFParamsAction, ECFType, RemoveCFAction} from \"./types\";\n\nexport enum EChangeFunctionsAction {\n    ADD_CF = \"change-functions/add\",\n   REMOVE_CF = \"change-functions/remove\",\n    CHANGE_PARAMS = \"change-functions/change-params\",\n}\n\nexport const addCF = (cfType: ECFType): AddCFAction =>\n    ({type: EChangeFunctionsAction.ADD_CF, cfType});\n\nexport const removeCF = (name: string): RemoveCFAction =>\n    ({type: EChangeFunctionsAction.REMOVE_CF, name});\n\nexport const changeCFParams = (id: string, params: any): ChangeCFParamsAction =>\n    ({type: EChangeFunctionsAction.CHANGE_PARAMS, params, id});\n","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {withTranslation, WithTranslation} from 'react-i18next';\nimport {AppState} from \"../../store\";\nimport {EToolType} from \"../../store/tool/types\";\nimport {setCurrentTool} from \"../../store/tool/actions\";\nimport {Brush} from \"./Brush\";\nimport {Line} from \"./Line\";\nimport {ButtonSelect} from \"../_shared/buttons/ButtonSelect\";\nimport {SelectTool} from \"./SelectTool\";\nimport {reverseFullScreen} from \"../../store/fullscreen\";\nimport * as classNames from \"classnames\";\nimport \"../../styles/tools.scss\";\n\nexport const ToolsParams = {\n    [EToolType.Brush]: {component: Brush, type: EToolType.Brush},\n    [EToolType.Line]: {component: Line, type: EToolType.Line},\n    [EToolType.Select]: {component: SelectTool, type: EToolType.Select},\n};\n\nexport interface ToolsStateProps {\n    currentTool: EToolType\n}\n\nexport interface ToolsActionProps {\n    setCurrentTool(tool: EToolType)\n\n    reverseFullScreen()\n}\n\nexport interface ToolsOwnProps {\n    className?: string\n}\n\nexport interface ToolsProps extends ToolsStateProps, ToolsActionProps, ToolsOwnProps, WithTranslation {\n\n}\n\nconst ToolsComponent: React.FC<ToolsProps> = ({t, i18n, currentTool, setCurrentTool, reverseFullScreen, className}) => {\n\n    const ToolControls = ToolsParams[currentTool].component;\n    return (\n        <div className={classNames(\"tools\", className)}>\n            <div>\n                {Object.keys(ToolsParams).map(toolType => (\n                    <ButtonSelect\n                        key={toolType}\n                        selected={toolType === currentTool}\n                        onClick={() => setCurrentTool(ToolsParams[toolType].type)}>\n                        {t(`tools.${toolType.toLowerCase()}`)}\n                    </ButtonSelect>\n                ))}\n            </div>\n            <ToolControls/>\n        </div>\n    );\n};\n\nconst mapStateToProps: MapStateToProps<ToolsStateProps, ToolsOwnProps, AppState> = state => ({\n    currentTool: state.tool.current\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ToolsActionProps, ToolsOwnProps> = {\n    setCurrentTool, reverseFullScreen\n};\n\nexport const Tools = connect<ToolsStateProps, ToolsActionProps, ToolsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation('common')(ToolsComponent));","import * as React from \"react\";\nimport {Canvas} from \"../Canvas\";\nimport * as Bezier from \"bezier-js\";\nimport {bindDrawFunctions, handleInteraction} from \"../../../utils/bezier\";\n\nexport interface WaveProps {\n    A: number\n    T: number\n    Tmax: number\n    Amax: number\n    W: number\n    H: number\n    O: number\n}\n\nexport interface WaveState {\n\n}\n\nexport class Wave extends React.PureComponent<WaveProps, WaveState> {\n\n    canvasRef;\n    drawFunctions;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n    }\n\n    draw = () => {\n        const {A, T, W, H, Tmax, Amax, O} = this.props;\n        const ctx = this.canvasRef.current.getContext(\"2d\");\n\n\n        const N = 150;\n\n        ctx.strokeStyle = \"black\";\n\n        ctx.font = \"28px\";\n        ctx.textBaseline = \"hanging\";\n        ctx.fillStyle = 'black';\n        ctx.fillText(Math.sqrt(Tmax / T) * 2, 120, Math.sqrt(Amax / A)*A / Amax * H / 2);\n        ctx.fillText(A, 20, -(Math.sqrt(Amax / A)*A / Amax * H / 2)+ H / 2);\n\n        for (let p = 0; p <= N; p++) {\n\n            const pn = p / N;\n            const deg = (pn) * (2 * Math.PI) * Tmax / T;\n            const x = (pn) * W;\n            const y = Math.sin(deg + O *2* Math.PI) *A / Amax * H / 2 * (-1) + H / 2;\n\n            ctx.lineTo(x, y)\n\n        }\n        ctx.stroke();\n\n\n    };\n\n    componentDidMount(): void {\n        if (this.canvasRef.current) {\n\n            //todo вынести это в hoc\n            this.drawFunctions = bindDrawFunctions(this.canvasRef.current);\n\n            this.draw();\n            // handleInteraction(this.canvasRef.current, this.curve).onupdate = this.handleUpdate\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<WaveProps>, prevState: Readonly<WaveState>, snapshot?: any): void {\n\n        this.drawFunctions.reset();\n        this.draw();\n        // this.canvasRef.current.canvasRef.setImageData(crea)\n    }\n\n    render() {\n        const {W = 120, H = 100} = this.props;\n        return (\n            <canvas\n                className={\"grid-bezier-curve-canvas\"}\n                width={W}\n                height={H}\n                ref={this.canvasRef}/>\n        );\n    }\n}","import * as React from \"react\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport \"../../styles/sinChangeFunction.scss\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {Wave} from \"../_shared/canvases/Wave\";\n\nexport interface SinCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface SinCFState {\n\n}\n\nexport class SinCF extends React.PureComponent<SinCFProps, SinCFState> {\n\n    handleParamChange = ({value, name}) => {\n        this.props.onChange({...this.props.params, [name]: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"sin-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.a`}\n                    value={params.a}\n                    name={\"a\"}\n                    range={[0.0001, 1]}\n                    valueD={ValueD.VerticalLinear(100)}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.t`}\n                    value={params.t}\n                    name={\"t\"}\n                    range={[1, 5000]}\n                    valueD={ValueD.VerticalLinear(0.05)}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.o`}\n                    value={params.o}\n                    name={\"o\"}\n                    range={[0, 1]}\n                    valueD={ValueD.VerticalLinear(100)}\n                    onChange={this.handleParamChange}\n                />\n                <Wave\n                    W={68}\n                    H={50}\n                    O={params.o}\n                    Tmax={5000}\n                    Amax={1}\n                    A={params.a}\n                    T={params.t}/>\n                {/*<ButtonNumberCF*/}\n                {/*path={`changeFunctions.functions.${name}.params.p`}*/}\n                {/*value={params.p}*/}\n                {/*name={\"p\"}*/}\n                {/*range={[0, 1]}*/}\n                {/*onChange={this.handleParamChange}*/}\n                {/*/>*/}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {ParamConfig, Params} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport \"../../styles/sinChangeFunction.scss\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\n\nexport interface LoopCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface LoopCFState {\n\n}\n\n\nconst tRange = [-3000, 3000] as [number, number];\nconst tValueD = ValueD.VerticalLinear(.05);\nconst seRange = [0, 1] as [number, number];\nconst seValueD = ValueD.VerticalLinear(100);\n\nexport class LoopCF extends React.PureComponent<LoopCFProps, LoopCFState> {\n\n    shouldComponentUpdate(nextProps: Readonly<LoopCFProps>, nextState: Readonly<LoopCFState>, nextContext: any): boolean {\n        return nextProps.params !== this.props.params\n    }\n\n    handleParamChange = ({value, name}) => {\n        this.props.onChange({...this.props.params, [name]: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"sin-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.start`}\n                    value={params.start}\n                    name={\"start\"}\n                    valueD={seValueD}\n                    range={seRange}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.end`}\n                    value={params.end}\n                    name={\"end\"}\n                    valueD={seValueD}\n                    range={seRange}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.t`}\n                    value={params.t}\n                    name={\"t\"}\n                    valueD={tValueD}\n                    range={tRange}\n                    onChange={this.handleParamChange}\n                />\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {bindDrawFunctions} from \"../../../utils/bezier\";\n\nexport interface CanvasByDrawFunctionProps {\n    width: number\n    height: number\n    children({canvas, context, drawFunctions})\n\n}\n\nexport interface CanvasByDrawFunctionState {\n\n}\n\nexport class CanvasByDrawFunction extends React.Component<CanvasByDrawFunctionProps, CanvasByDrawFunctionState> {\n\n    canvasRef;\n    drawFunctions;\n\n    constructor(props) {\n        super(props);\n\n        this.canvasRef = React.createRef();\n    }\n\n    draw = () => {\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n        this.props.children({canvas, context, drawFunctions: this.drawFunctions});\n    };\n\n    componentDidMount(): void {\n        if (this.canvasRef.current) {\n\n            this.drawFunctions = bindDrawFunctions(this.canvasRef.current);\n\n            this.draw();\n            // handleInteraction(this.canvasRef.current, this.curve).onupdate = this.handleUpdate\n        }\n    }\n\n    componentDidUpdate(): void {\n\n        this.drawFunctions.reset();\n        this.draw();\n        // this.canvasRef.current.canvasRef.setImageData(crea)\n    }\n\n    render() {\n        const {width = 120, height = 100} = this.props;\n        return (\n            <canvas\n                className={\"canvas-by-draw-function\"}\n                width={width}\n                height={height}\n                ref={this.canvasRef}/>\n        );\n    }\n}","import * as React from \"react\";\nimport {ECFType} from \"../../../store/changeFunctions/types\";\nimport {xyParaboloid} from \"../../../store/changeFunctions/functions/helpers\";\nimport {CanvasByDrawFunction} from \"./CanvasByDrawFunction\";\nimport * as Color from \"color\";\n\nexport interface Surface2dProps {\n    type: ECFType\n    params: any\n    width: number\n    height: number\n}\n\nexport interface Surface2dState {\n\n}\n\nexport class Surface2d extends React.PureComponent<Surface2dProps, Surface2dState> {\n\n    draw = ({context}) => {\n        const {width, height} = this.props;\n        const {zd, end, x, y, xa, ya} = this.props.params;\n\n        const WW = 1;\n        const HH = 1;\n\n\n        const imageData = context.getImageData(0, 0, width, height);\n\n        const f = xyParaboloid(WW/2, HH/2, x, y);\n\n        for (let i = 0; i < imageData.data.length; i += 4) {\n\n            const x = (i / 4) % width;\n            const y = Math.floor((i / 4) / width);\n\n            const xnorm = x / width * WW;\n            const ynorm = y / height * HH;\n            const znorm = f(xnorm, ynorm) + zd;\n\n            const colorTo = 350;\n            const colorFrom = colorTo - 100;\n\n\n            const color = Color.hsl(Math.max(Math.min(colorTo- znorm * (colorTo - colorFrom), colorTo), colorFrom), 50, 50);\n\n// console.log(a);\n\n            const rgb = color.rgb().array();\n\n\n            imageData.data[i] = rgb[0];\n            imageData.data[i + 1] = rgb[1];\n            imageData.data[i + 2] = rgb[2];\n            imageData.data[i + 3] = 255;\n        }\n\n        context.putImageData(imageData, 0, 0);\n    };\n\n\n    render() {\n        const {width, height} = this.props;\n        return (\n            <CanvasByDrawFunction\n                width={width}\n                height={height}>\n                {this.draw}\n            </CanvasByDrawFunction>\n        );\n    }\n}","import * as React from \"react\";\nimport {ParamConfig} from \"../_shared/Params\";\nimport {ButtonNumberCF} from \"../_shared/buttons/ButtonNumberCF\";\nimport \"../../styles/XYParaboloidChangeFunction.scss\";\nimport {ValueD} from \"../_shared/buttons/ButtonNumber\";\nimport {Surface2d} from \"../_shared/canvases/Surface2d\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\n\nexport interface XYCFProps {\n    params: any\n    paramsConfig: ParamConfig[]\n\n    name: string\n\n    onChange(value?: any, name?: string)\n\n}\n\nexport interface XYCFState {\n\n}\n\nconst seRange = [0, 1] as [number, number];\nconst seValueD = ValueD.VerticalLinear(100);\n\nexport class XYCF extends React.PureComponent<XYCFProps, XYCFState> {\n\n    handleParamChange = ({value, name}) => {\n        this.props.onChange({...this.props.params, [name]: value}, this.props.name)\n    };\n\n    render() {\n        const {params, paramsConfig, onChange, name} = this.props;\n        return (\n            <div className={\"XY_PARABOLOID-change-function\"}>\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.zd`}\n                    value={params.zd}\n                    name={\"zd\"}\n                    range={[-2, 2]}\n                    valueD={ValueD.VerticalLinear(20)}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.x`}\n                    value={params.x}\n                    name={\"x\"}\n                    range={[-20, 20]}\n                    precision={200}\n                    valueD={ValueD.VerticalLinear(2)}\n                    onChange={this.handleParamChange}\n                />\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.y`}\n                    value={params.y}\n                    name={\"y\"}\n                    range={[-20, 20]}\n                    precision={200}\n                    valueD={ValueD.VerticalLinear(2)}\n                    onChange={this.handleParamChange}\n                />\n                <Surface2d\n                    type={ECFType.XY_PARABOLOID}\n                    params={params}\n                    width={68} height={68}/>\n                <ButtonNumberCF\n                    path={`changeFunctions.functions.${name}.params.end`}\n                    value={params.end}\n                    name={\"end\"}\n                    valueD={seValueD}\n                    range={seRange}\n                    onChange={this.handleParamChange}\n                />\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {AppState} from \"../../store\";\nimport {ChangeFunctions} from \"../../store/changeFunctions/reducer\";\nimport {addCF, changeCFParams, removeCF} from \"../../store/changeFunctions/actions\";\nimport {SinCF} from \"./SinCF\";\nimport {ECFType} from \"../../store/changeFunctions/types\";\nimport {Button} from \"../_shared/buttons/Button\";\nimport {setChangingMode, startChanging, stopChanging} from \"../../store/changing/actions\";\nimport {SelectDrop} from \"../_shared/buttons/SelectDrop\";\nimport {enumToSelectItems, objectToSelectItems} from \"../../utils/utils\";\nimport {ChangingMode} from \"../../store/changing/types\";\nimport {SelectButtons} from \"../_shared/buttons/SelectButtons\";\nimport {LoopCF} from \"./LoopCF\";\nimport {XYCF} from \"./XYCF\";\nimport {getCFs} from \"../../store/changeFunctions/selectors\";\n\nexport interface ChangeFStateProps {\n    cfs: ChangeFunctions\n    changingMode: ChangingMode\n}\n\nexport interface ChangeFActionProps {\n    changeCFParams(id: string, params: any)\n\n    addCF(cfType: ECFType)\n    removeCF(id: string)\n\n    startChanging()\n\n    stopChanging()\n\n    setChangingMode(mode: ChangingMode)\n}\n\nexport interface ChangeFOwnProps {\n\n}\n\nexport interface ChangeFProps extends ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps {\n\n}\n\nexport interface ChangeFState {\n\n}\n\nconst CFComponentByType = {\n    [ECFType.SIN]: SinCF,\n    [ECFType.LOOP]: LoopCF,\n    [ECFType.XY_PARABOLOID]: XYCF,\n};\n\n// const modesItems = enumToSelectItems(ChangingMode);\n\nclass ChangeFComponent extends React.PureComponent<ChangeFProps, ChangeFState> {\n\n    handleChange = (value, name) => {\n        this.props.changeCFParams(name, value);\n    };\n\n    handleDelete = ({value}) => {\n        this.props.removeCF(value);\n    };\n\n    handleAddSin = () => {\n        this.props.addCF(ECFType.SIN);\n    };\n\n    handleAddLoop = () => {\n        this.props.addCF(ECFType.LOOP);\n    };\n\n    handleAddXY = () => {\n        this.props.addCF(ECFType.XY_PARABOLOID);\n    };\n\n    handleModeChange = ({value}) => {\n        this.props.setChangingMode(value);\n    };\n\n    render() {\n        const {cfs, changingMode} = this.props;\n        return (\n            <div className=\"change-functions\">\n                <div className=\"control-buttons\">\n                    <Button onClick={this.handleAddSin}>sin</Button>\n                    <Button onClick={this.handleAddLoop}>loop</Button>\n                    <Button onClick={this.handleAddXY}>parab</Button>\n                    {/*<br/>*/}\n                    {/*<SelectButtons*/}\n                    {/*    items={modesItems}*/}\n                    {/*    value={changingMode}*/}\n                    {/*    onChange={this.handleModeChange}/>*/}\n                </div>\n                <div className=\"functions-list\">\n                    {Object.values(cfs).reverse().map(cf => {\n                        const {type, id, params, paramsConfig} = cf;\n                        const Component = CFComponentByType[type];\n                        return Component ? (\n                            <div className={'function-container'} key={id}>\n                                <Component\n                                    key={id}\n                                    name={id}\n                                    params={params}\n                                    paramsConfig={paramsConfig}\n                                    onChange={this.handleChange}/>\n                                <div className={'function-controls'}>\n                                    <Button\n                                        value={id}\n                                        onClick={this.handleDelete}\n                                        className={'function-delete'}>del</Button>\n                                </div>\n                            </div>\n                        ) : null;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\n// const cfsSelector\n\nconst mapStateToProps: MapStateToProps<ChangeFStateProps, {}, AppState> = (state) => ({\n    cfs: getCFs(state),\n    changingMode: state.changing.mode\n});\n\nconst mapDispatchToProps: MapDispatchToProps<ChangeFActionProps, ChangeFOwnProps> = {\n    changeCFParams, addCF, startChanging, stopChanging, setChangingMode, removeCF\n};\n\nexport const ChangeF = connect<ChangeFStateProps, ChangeFActionProps, ChangeFOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(ChangeFComponent);","import i18n from \"i18next\";\nimport { initReactI18next } from 'react-i18next';\nimport common_en from \"./en/common.json\";\nimport common_ru from \"./ru/common.json\";\n\nconst languageFromLocalStorage = localStorage.getItem(\"lang\");\n\ni18n\n    .use(initReactI18next)\n    .init({\n    interpolation: {escapeValue: false},\n    lng: languageFromLocalStorage || 'en',\n    // language to use\n    resources: {\n        en: {\n            common: common_en               // 'common' is our custom namespace\n        },\n        ru: {\n            common: common_ru\n        },\n    },\n});\n\nexport default i18n;\n","import {handleActions} from \"redux-actions\";\nimport i18n from \"./translations\";\n\nexport enum ELanguageAction {\n    SET = \"language/set\",\n}\n\nexport type LanguageState = string;\n\nexport const languageReducer = handleActions<LanguageState>({\n    [ELanguageAction.SET]: (s, a) => a.value,\n}, i18n.language);\n\nexport const setLanguage = (value: string) => dispatch => {\n    localStorage.setItem('lang', value);\n    dispatch({type: ELanguageAction.SET, value})\n};","import * as React from \"react\";\nimport {connect, MapDispatchToProps, MapStateToProps} from \"react-redux\";\nimport {withTranslation, WithTranslation} from 'react-i18next';\nimport {AppState} from \"../store\";\nimport {Button} from \"./_shared/buttons/Button\";\nimport {reverseFullScreen} from \"../store/fullscreen\";\nimport * as classNames from \"classnames\";\nimport {setLanguage} from \"../store/language\";\n\nexport interface AppControlsStateProps {\n    isFull: boolean\n    language: string\n}\n\nexport interface AppControlsActionProps {\n    reverseFullScreen()\n\n    setLanguage(language: string)\n}\n\nexport interface AppControlsOwnProps {\n\n}\n\nexport interface AppControlsProps extends AppControlsStateProps, AppControlsActionProps, AppControlsOwnProps, WithTranslation {\n\n}\n\nexport interface AppControlsState {\n\n}\n\nconst languages = ['en', 'ru'];\n\nclass AppControlsComponent extends React.PureComponent<AppControlsProps, AppControlsState> {\n    handleLanguage = () => {\n        const {setLanguage, language, i18n} = this.props;\n\n        const newLang = languages[(languages.indexOf(language) + 1) % languages.length];\n        setLanguage(newLang);\n        i18n.changeLanguage(newLang);\n    };\n\n    render() {\n        const {reverseFullScreen, isFull, setLanguage, language} = this.props;\n        return (\n            <div className='app-controls'>\n                <Button\n                    className=\"app-control-button\"\n                    onClick={this.handleLanguage}>{language}</Button>\n                <Button\n                    className=\"app-control-button\"\n                    onClick={reverseFullScreen}>?</Button>\n                <Button\n                    className={classNames(\"app-control-button\", \"full-button\", {\n                        [\"full-button-off\"]: isFull\n                    })}\n                    onClick={reverseFullScreen}>\n                    <div className=\"tl\"></div>\n                    <div className=\"br\"></div>\n                </Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<AppControlsStateProps, AppControlsOwnProps, AppState> = state => ({\n    isFull: state.fullScreen,\n    language: state.language\n});\n\nconst mapDispatchToProps: MapDispatchToProps<AppControlsActionProps, AppControlsOwnProps> = {\n    reverseFullScreen,\n    setLanguage\n};\n\nexport const AppControls = connect<AppControlsStateProps, AppControlsActionProps, AppControlsOwnProps, AppState>(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AppControlsComponent));","import * as React from \"react\";\nimport \"../styles/layout.scss\";\nimport {Patterns} from \"./Patterns\";\nimport {Tools} from \"./Tools\";\nimport {ChangeF} from \"./ChangeF\";\nimport {connect} from \"react-redux\";\nimport {setFullScreen} from \"../store/fullscreen\";\nimport {AppState} from \"../store\";\nimport FullScreen from \"react-full-screen\";\nimport {AppControls} from \"./AppControls\";\n\nexport interface LayoutStateProps {\n    full: boolean\n}\n\nexport interface LayoutActionProps {\n    setFullScreen(value: boolean)\n}\n\nexport interface LayoutProps extends LayoutStateProps, LayoutActionProps {\n}\n\nexport const LayoutComponent: React.FC<LayoutProps> = ({full, setFullScreen}) => {\n\n    return (\n        <FullScreen enabled={full} onChange={setFullScreen}>\n            <div className={\"layout-container\"}>\n                <div className=\"layout\">\n                    <div className=\"tools-panel\">\n                        <Tools/>\n                        <ChangeF/>\n                    </div>\n                    <div className=\"windows\">\n                        <Patterns/>\n                    </div>\n                    <AppControls/>\n                </div>\n            </div>\n        </FullScreen>\n    );\n};\n\nexport const Layout = connect<LayoutStateProps, LayoutActionProps, {}, AppState>(state => ({\n    full: state.fullScreen\n}), {\n    setFullScreen\n})(LayoutComponent);","import * as React from \"react\";\nimport {Layout} from \"./Layout\";\n\n\n// window.onbeforeunload = function(){\n//     return 'Are you sure you want to leave?';\n// };\n\nexport const Main: React.FC<{}> = ({}) => {\n    return (\n        <Layout/>\n    );\n};","import {CanvasState} from \"./canvas/types\";\n\nexport function createCleanCanvasState(width: number, height: number): CanvasState {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n\n    const imageData = ctx.createImageData(width, height);\n\n    // noise\n    // for (let i = 0; i < imageData.data.length; i++) {\n    //     imageData.data[i] = Math.random() * 100;\n    // }\n\n    return {\n        imageData,\n        width,\n        height\n    };\n}\n\nexport function createCanvasStateFromImageData(imageData: ImageData, width?: number, height?: number): CanvasState {\n    return {\n        imageData,\n        width: width || imageData.width,\n        height: height || imageData.height\n    };\n}","import {Room} from \"./reducer\";\nimport {ConnectRoomsAction, UpdateRoomsAction} from \"./types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppState} from \"../index\";\nimport {Action} from \"redux\";\nimport {connectRooms} from \"./service\";\n\ntype ThunkResult<R> = ThunkAction<R, AppState, undefined, Action>;\nexport enum ERoomsAction {\n    UPDATE_ROOMS = \"rooms/update\",\n    CONNECT_ROOMS = \"rooms/connect\",\n}\n\nexport const updateRooms = (rooms: Room[]): UpdateRoomsAction => ({\n    type: ERoomsAction.UPDATE_ROOMS,\n    rooms\n});\n\nexport const roomsConnect = (): ThunkResult<ConnectRoomsAction> =>\n    dispatch => {\n\n        const socket = connectRooms();\n\n        socket.on(\"updateRooms\", (rooms) => {\n            dispatch(updateRooms(Object.values(rooms)))\n        });\n        return dispatch({type: ERoomsAction.CONNECT_ROOMS});\n    };","import {HistoryParams, HistoryState, HistoryValue, PatternHistoryItem} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getHistoryState = getFunctionState<HistoryValue, HistoryParams>({\n    before: [],\n    after: [],\n}, {\n    length: 23\n});\nexport const historyPush = (history: HistoryState, current: PatternHistoryItem): HistoryState => {\n    const {value: {before}, params: {length: historyLength}} = history;\n\n    const beforeNext: PatternHistoryItem[] = [...before, current];\n    const afterNext: PatternHistoryItem[] = [];\n\n    if (beforeNext.length > historyLength)\n        beforeNext.shift();\n\n    return {\n        ...history,\n        value: {\n            before: beforeNext,\n            after: afterNext\n        }\n    }\n};\n\nexport interface PatternUndoResult {\n    history: HistoryState\n    prev: PatternHistoryItem\n}\n\nexport const historyUndo = (history: HistoryState, current: PatternHistoryItem): PatternUndoResult => {\n    const {value: {before, after}} = history;\n\n    if (before.length === 0) return null;\n\n    const prev = before[before.length - 1];\n\n    const beforeNext = before.slice(0, before.length - 1); // pop\n    const afterNext = [current, ...after]; // unshift current\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        prev\n    }\n};\n\nexport interface PatternRedoResult {\n    history: HistoryState\n    next: PatternHistoryItem\n}\n\nexport const historyRedo = (history: HistoryState, current: PatternHistoryItem): PatternRedoResult => {\n    const {value: {before, after}} = history;\n\n    if (after.length === 0) return null;\n\n    const next = after[0];\n\n    const beforeNext = [...before, current]; // push current\n    const afterNext = after.slice(1, after.length); // shift\n\n    return {\n        history: {\n            ...history,\n            value: {\n                before: beforeNext,\n                after: afterNext\n            }\n        },\n        next\n    }\n};","import {CanvasState} from \"../../../utils/canvas/types\";\nimport {StoreParams} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getStoreState = getFunctionState<CanvasState, StoreParams>(null, {});","import {createCanvasStateFromImageData, createCleanCanvasState} from \"../../../utils/state\";\nimport {MaskParams, MaskValue} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getMaskState = (width, height, mask?) => getFunctionState<MaskValue, MaskParams>(\n    mask ? createCanvasStateFromImageData(mask) : createCleanCanvasState(width, height), {\n        opacity: 1,\n        black: true\n    });","import {RotationParams, RotationValue} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getRotationState = getFunctionState<RotationValue, RotationParams>(\n    {\n        angle: 0,\n        offset: {\n            x: 0,\n            y: 0\n        }\n    }, {});","import {ERepeatingType, RepeatingParams, RepeatingValue} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getRepeatingState = getFunctionState<RepeatingValue, RepeatingParams>(\n    {}, {\n        type: ERepeatingType.Grid,\n        gridParams: {\n            x: 2,\n            y: 2,\n            xOut: 1,\n            yOut: 1,\n            bezierPoints: [{x: 0, y: 0}, {x: 50, y: 50}, {x: 50, y: 50}, {x: 100, y: 100}],\n            integer: true\n        }\n    });","import {ImportParams, ImportValue} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getImportState = getFunctionState<ImportValue, ImportParams>(\n    {}, {\n        fit: false\n    });","import {VideoParams, VideoValue} from \"./types\";\nimport {getFunctionState} from \"../../../utils/patterns/function\";\n\nexport const getVideoState = getFunctionState<VideoValue, VideoParams>(\n    {}, {\n        on: false,\n        changeFunctionId: null\n    });","import {EPatternAction} from \"./actions\";\nimport {updatePatternState} from \"../helpers\";\nimport {\n    EditPatternConfigAction,\n    PatternState,\n    SetPatternHeightAction,\n    SetPatternWidthAction,\n    UpdatePatternImageAction\n} from \"./types\";\nimport {getMaskedImage, resizeImageData} from \"../../../utils/canvas/helpers/imageData\";\nimport {reducePattern} from \"./helpers\";\nimport {historyPush} from \"../history/helpers\";\n\nexport const patternReducers = {\n    [EPatternAction.EDIT_CONFIG]: reducePattern<EditPatternConfigAction>(\n        (pattern: PatternState, action) =>\n            updatePatternState(pattern, action.config)),\n\n    [EPatternAction.UPDATE_IMAGE]: reducePattern<UpdatePatternImageAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            current: {\n                ...pattern.current,\n                imageData: action.imageData,\n                width: action.imageData.width,\n                height: action.imageData.height,\n            },\n            resultImage: getMaskedImage(action.imageData, pattern.mask && pattern.mask.value.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                current: pattern.current\n            })\n        })),\n\n    [EPatternAction.SET_WIDTH]: reducePattern<SetPatternWidthAction>(\n        (pattern: PatternState, action) => {\n            const newCurrentImageData = resizeImageData(pattern.current.imageData, action.width, pattern.current.height, !pattern.import.params.fit);\n            const newMaskImageData = pattern.mask && resizeImageData(pattern.mask.value.imageData, action.width, pattern.mask.value.height, !pattern.import.params.fit);\n            return {\n                ...pattern,\n                current: {\n                    ...pattern.current,\n                    width: action.width,\n                    imageData: newCurrentImageData\n                },\n                mask: pattern.mask && {\n                    ...pattern.mask,\n                    value: {\n                        ...pattern.mask.value,\n                        width: action.width,\n                        imageData: newMaskImageData\n                    }\n                },\n                history: pattern.history && historyPush(pattern.history, {\n                    current: pattern.current,\n                    maskValue: pattern.mask && pattern.mask.value\n                }),\n                resultImage: getMaskedImage(newCurrentImageData, newMaskImageData),\n            }\n        }),\n\n    [EPatternAction.SET_HEIGHT]: reducePattern<SetPatternHeightAction>(\n        (pattern: PatternState, action) => {\n            const newCurrentImageData = resizeImageData(pattern.current.imageData, pattern.current.width, action.height, !pattern.import.params.fit);\n            const newMaskImageData = pattern.mask && resizeImageData(pattern.mask.value.imageData, pattern.mask.value.width, action.height, !pattern.import.params.fit);\n            return {\n                ...pattern,\n                current: {\n                    ...pattern.current,\n                    height: action.height,\n                    imageData: newCurrentImageData\n                },\n                mask: pattern.mask && {\n                    ...pattern.mask,\n                    value: {\n                        ...pattern.mask.value,\n                        height: action.height,\n                        imageData: newMaskImageData\n                    }\n                },\n                history: pattern.history && historyPush(pattern.history, {\n                    current: pattern.current,\n                    maskValue: pattern.mask && pattern.mask.value\n                }),\n                resultImage: getMaskedImage(newCurrentImageData, newMaskImageData),\n            }\n        }),\n\n};","import {createCanvasStateFromImageData, createCleanCanvasState} from \"../../utils/state\";\nimport {omit} from \"lodash\";\nimport {PatternsState} from \"./types\";\nimport {PatternConfig, PatternParams, PatternState} from \"./pattern/types\";\nimport {getHistoryState} from \"./history/helpers\";\nimport {getStoreState} from \"./store/helpers\";\nimport {getSelectionState} from \"./selection/helpers\";\nimport {getMaskState} from \"./mask/helpers\";\nimport {getRotationState} from \"./rotating/helpers\";\nimport {getRepeatingState} from \"./repeating/helpers\";\nimport {getImportState} from \"./import/helpers\";\nimport {getVideoState} from \"./video/helpers\";\nimport {getMaskedImage, imageDataToCanvas} from \"../../utils/canvas/helpers/imageData\";\n\nexport const patternId = (state: PatternsState) =>\n    (Object.keys(state).length\n        ? (Math.max(...Object.keys(state).map(key => +key))) + 1\n        : 1).toString();\n\n\nexport const createPatternInitialState = (id: string, config?: PatternConfig, params?: PatternParams): PatternState => {\n    const {history, store, selection, mask, rotation, repeating, startImage, startMask} = config || {};\n\n    const width = startImage ? startImage.width : (config.width || 300);\n    const height = startImage ? startImage.height : (config.height || 300);\n\n    const current = startImage ? createCanvasStateFromImageData(startImage) : createCleanCanvasState(width, height);\n    return {\n        id,\n        config,\n        resultImage: startMask ? getMaskedImage(current.imageData, startMask) : imageDataToCanvas(current.imageData),\n        current,\n        history: getHistoryState(history, undefined, (params || {}).history),\n        store: getStoreState(store, undefined, (params || {}).store),\n        selection: getSelectionState(selection, undefined, (params || {}).selection),\n        mask: getMaskState(width, height, startMask)(mask, undefined, (params || {}).mask),\n        rotation: getRotationState(rotation, undefined, (params || {}).rotation),\n        repeating: getRepeatingState(repeating, undefined, (params || {}).repeating),\n        import: getImportState(true, undefined, (params || {}).import),\n        video: getVideoState(true, undefined, (params || {}).video),\n    }\n};\n\nexport const updatePatternState = (state: PatternState, config: PatternConfig, params?: PatternParams): PatternState => {\n    const {history, store, selection, mask, rotation, repeating} = config || {};\n    params = params || {};\n    const maskState = getMaskState(state.current.width, state.current.height)(mask, state.mask, params.mask);\n    return {\n        config,\n        id: state.id,\n        current: state.current,\n        resultImage: maskState ? getMaskedImage(state.current.imageData, maskState.value.imageData) : getMaskedImage(state.current.imageData),\n        // resultImage: state.resultImage,\n        history: getHistoryState(history, state.history, params.history),\n        store: getStoreState(store, state.store, params.store),\n        selection: getSelectionState(selection, state.selection, params.selection),\n        mask: maskState,\n        rotation: getRotationState(rotation, state.rotation, params.rotation),\n        repeating: getRepeatingState(repeating, state.repeating, params.repeating),\n        import: getImportState(true, state.import, params.import),\n        video: getVideoState(true, state.video, params.video),\n    }\n};\n\n\n\nexport const removePattern = (state: PatternsState, id: string) => omit(state, id);\n\n\n","import {EHistoryAction, PatternUndoAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\nimport {historyRedo, historyUndo} from \"./helpers\";\nimport {getMaskedImage} from \"../../../utils/canvas/helpers/imageData\";\n\nexport const historyReducers = {\n    [EHistoryAction.UNDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const undoResult = historyUndo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!undoResult) return pattern;\n\n        const current = undoResult.prev.current || pattern.current;\n        const mask = pattern.mask && {\n            ...pattern.mask,\n            value: undoResult.prev.maskValue || pattern.mask.value\n        };\n        return {\n            ...pattern,\n            history: undoResult.history,\n            current,\n            resultImage: getMaskedImage(current.imageData, mask && mask.value.imageData),\n            mask\n        }\n\n    }),\n    [EHistoryAction.REDO]: reducePattern<PatternUndoAction>((pattern: PatternState) => {\n        const redoResult = historyRedo(pattern.history, {\n            current: pattern.current,\n            maskValue: pattern.mask && pattern.mask.value\n        });\n        if (!redoResult) return pattern;\n        const current = redoResult.next.current || pattern.current;\n        const mask = pattern.mask && {\n            ...pattern.mask,\n            value: redoResult.next.maskValue || pattern.mask.value\n        };\n        return {\n            ...pattern,\n            history: redoResult.history,\n            current,\n            resultImage: getMaskedImage(current.imageData, mask && mask.value.imageData),\n            mask: mask\n        }\n    }),\n};","import {EMaskAction, SetMaskParamsAction, UpdatePatternMaskAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {getMaskedImage} from \"../../../utils/canvas/helpers/imageData\";\nimport {reducePattern} from \"../pattern/helpers\";\nimport {historyPush} from \"../history/helpers\";\n\nexport const maskReducers = {\n    [EMaskAction.SET_MASK_PARAMS]: reducePattern<SetMaskParamsAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: pattern.mask && {\n                ...pattern.mask,\n                params: {\n                    ...pattern.mask.params,\n                    ...action.params\n                }\n            }\n        })),\n\n\n\n\n\n    [EMaskAction.UPDATE_MASK]: reducePattern<UpdatePatternMaskAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            mask: {\n                ...pattern.mask,\n                value: {\n                    ...pattern.mask.value,\n                    imageData: action.imageData\n                }\n            },\n            resultImage: getMaskedImage(pattern.current.imageData, action.imageData),\n            history: pattern.history && historyPush(pattern.history, {\n                maskValue: pattern.mask.value\n            })\n        })),\n};","import {EImportAction, SetImportParamsAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\n\nexport const importReducers = {\n    [EImportAction.SET_IMPORT_PARAMS]: reducePattern<SetImportParamsAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            import: {\n                ...pattern.import,\n                params: {\n                    ...pattern.import.params,\n                    ...action.value\n                }\n            }\n        })),\n\n};","import {ERepeatingAction, SetRepeatingAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\n\nexport const repeatingReducers = {\n    [ERepeatingAction.SET_REPEATING]: reducePattern<SetRepeatingAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            repeating: pattern.repeating && {\n                ...pattern.repeating,\n                params: action.repeating\n            }\n        })),\n};","import {ERotationAction, SetRotationAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\n\nexport const rotatingReducers = {\n    [ERotationAction.SET_ROTATION]: reducePattern<SetRotationAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            rotation: pattern.rotation && {\n                ...pattern.rotation,\n                value: action.rotation\n            }\n        })),\n};","import {ESelectionAction, UpdatePatternSelectionAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\nimport {getMaskFromSegments} from \"./helpers\";\n\nexport const selectionReducers = {\n    [ESelectionAction.UPDATE_SELECTION]: reducePattern<UpdatePatternSelectionAction>(\n        (pattern: PatternState, action) => {\n            return ({\n                ...pattern,\n                selection: {\n                    ...pattern.selection,\n                    value: {\n                        segments: action.value,\n                        mask: action.value.length\n                            ? getMaskFromSegments(pattern.current.width, pattern.current.height, action.value)\n                            : null,\n                        bBox: action.bBox\n                    }\n                }\n            })\n        }),\n};","import {reducePattern} from \"../pattern/helpers\";\nimport {PatternState} from \"../pattern/types\";\nimport {EVideoAction, SetVideoParamsAction} from \"./actions\";\n\nexport const videoReducers = {\n    [EVideoAction.SET_VIDEO_PARAMS]: reducePattern<SetVideoParamsAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            video: {\n                ...pattern.video,\n                params: {\n                    ...pattern.video.params,\n                    ...action.value\n                }\n            }\n        })),\n};","import {CreateRoomAction, ERoomAction} from \"./actions\";\nimport {PatternState} from \"../pattern/types\";\nimport {reducePattern} from \"../pattern/helpers\";\n\nexport const roomReducers = {\n    [ERoomAction.CREATE_ROOM]: reducePattern<CreateRoomAction>(\n        (pattern: PatternState, action) => ({\n            ...pattern,\n            room: {\n                ...pattern.room,\n                value: {\n                    connected: action.roomName,\n                    socket: action.socket,\n                }\n            }\n        }))\n};","import {handleActions} from \"redux-actions\";\nimport {EPatternsAction} from \"./actions\";\nimport {createPatternInitialState, patternId, removePattern} from \"./helpers\";\nimport {AddPatternAction, RemovePatternAction,} from \"./pattern/types\";\nimport {PatternsState} from \"./types\";\nimport {patternReducers} from \"./pattern/reducers\";\nimport {historyReducers} from \"./history/reducers\";\nimport {maskReducers} from \"./mask/reducers\";\nimport {importReducers} from \"./import/reducers\";\nimport {repeatingReducers} from \"./repeating/reducers\";\nimport {rotatingReducers} from \"./rotating/reducers\";\nimport {selectionReducers} from \"./selection/reducers\";\nimport {storeReducers} from \"./store/reducers\";\nimport {videoReducers} from \"./video/reducers\";\nimport {roomReducers} from \"./room/reducers\";\n\nexport const patternsReducer = handleActions<PatternsState>({\n    [EPatternsAction.ADD_PATTERN]: (state: PatternsState, action: AddPatternAction) => {\n        const id = patternId(state);\n        return {\n            ...state,\n            [id]: createPatternInitialState(id, action.config, action.params)\n        }\n    },\n    [EPatternsAction.REMOVE_PATTERN]: (state: PatternsState, action: RemovePatternAction) =>\n        removePattern(state, action.id),\n\n    ...patternReducers,\n    ...historyReducers,\n    ...maskReducers,\n    ...selectionReducers,\n    ...importReducers,\n    ...repeatingReducers,\n    ...rotatingReducers,\n    ...videoReducers,\n    ...storeReducers,\n    ...roomReducers,\n}, {});\n\n\n","export const storeReducers = {};","import {handleActions} from \"redux-actions\";\nimport {EToolType, SetCurrentToolAction} from \"./types\";\nimport {EToolAction} from \"./actions\";\n\nexport interface ToolState {\n    current: EToolType\n}\n\nexport const toolReducer = handleActions<ToolState>({\n    [EToolAction.SET_CURRENT]: (state: ToolState, action: SetCurrentToolAction) => ({\n        ...state,\n        current: action.tool\n    })\n}, {\n    current: EToolType.Brush\n});\n\n\n","import {BrushParams,EBrushCompositeOperation, EBrushType} from \"./types\";\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/buttons/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(EBrushType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(EBrushCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\nconst patternSizeRange = [0, 5] as [number, number];\nconst patternSizeValueD = ValueD.VerticalLinear(200);\n\nexport const getBrushParamsConfig = (params?: BrushParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }, {\n        name: \"patternSize\",\n        type: EParamType.Number,\n        props: {\n            range: patternSizeRange,\n            valueD: patternSizeValueD\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {BrushParams, EBrushType, SetBrushParamsAction} from \"./types\";\nimport {EBrushAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getBrushParamsConfig} from \"./helpers\";\n\nexport interface BrushState {\n    params: BrushParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const brushReducer = handleActions<BrushState>({\n    [EBrushAction.SET_PARAMS]: (state: BrushState, action: SetBrushParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getBrushParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        patternSize: 1,\n        size: 43,\n        opacity: 1,\n        type: EBrushType.Circle\n    },\n    paramsConfig: getBrushParamsConfig()\n});\n\n\n","\nimport {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {ValueD} from \"../../components/_shared/buttons/ButtonNumber\";\nimport {arrayToSelectItems} from \"../../utils/utils\";\nimport {ELineType, LineParams} from \"./types\";\nimport {ELineCompositeOperation} from \"./types\";\n\nconst typeSelectItems = arrayToSelectItems(Object.values(ELineType));\nconst compositeOperationSelectItems = arrayToSelectItems(Object.values(ELineCompositeOperation));\nconst sizeRange = [1, 200] as [number, number];\nconst sizeValueD = ValueD.VerticalLinear(.5);\nconst opacityRange = [0, 1] as [number, number];\n\nexport const getLineParamsConfig = (params?: LineParams) => {\n    const config: ParamConfig[] = [{\n        name: \"size\",\n        type: EParamType.Number,\n        props: {\n            range: sizeRange,\n            valueD: sizeValueD\n        }\n    }, {\n        name: \"opacity\",\n        type: EParamType.Number,\n        props: {\n            range: opacityRange,\n        }\n    }, {\n        name: \"type\",\n        type: EParamType.Select,\n        props: {\n            items: typeSelectItems,\n        }\n    }, {\n        name: \"compositeOperation\",\n        type: EParamType.Select,\n        props: {\n            items: compositeOperationSelectItems,\n        }\n    }];\n\n    return config\n};","import {handleActions} from \"redux-actions\";\nimport {ELineType, LineParams, SetLineParamsAction} from \"./types\";\nimport {ELineAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {getLineParamsConfig} from \"./helpers\";\n\nexport interface LineState {\n    params: LineParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const lineReducer = handleActions<LineState>({\n    [ELineAction.SET_PARAMS]: (state: LineState, action: SetLineParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getLineParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    }\n}, {\n    params: {\n        size: 5,\n        opacity: 1,\n        type: ELineType.Default\n    },\n    paramsConfig: getLineParamsConfig()\n});\n\n\n","import {EParamType, ParamConfig} from \"../../components/_shared/Params\";\nimport {\n    curveTypesSelectItems,\n    selectionModesSelectItems\n} from \"../../components/Area/Selection\";\nimport {\n    CurveValueName,\n    ESelectionMode, SelectToolParams\n} from \"./types\";\n\nexport const getSelectToolParamsConfig = (params?: SelectToolParams) => {\n    let config: ParamConfig[] = [{\n        name: \"mode\",\n        type: EParamType.Select,\n        props: {\n            items: selectionModesSelectItems,\n        }\n    }];\n\n    if (params && params.mode === ESelectionMode.Points) {\n        config.push({\n            name: \"curveType\",\n            type: EParamType.Select,\n            props: {\n                items: curveTypesSelectItems\n            }\n        });\n\n        if (Object.keys(CurveValueName).indexOf(params.curveType) !== -1) {\n            config = [...config, {\n                name: CurveValueName[params.curveType],\n                type: EParamType.Number,\n                props: {\n                    range: [0, 1],\n                    text: 1\n                }\n            }]\n        }\n    }\n\n    return config;\n};","import {handleActions} from \"redux-actions\";\nimport {SetSelectToolParamsAction, SelectToolParams, CurveValueName} from \"./types\";\nimport {ESelectToolAction} from \"./actions\";\nimport {ParamConfig} from \"../../components/_shared/Params\";\nimport {ECurveType, ESelectionMode} from \"./types\";\nimport {getSelectToolParamsConfig} from \"./helpers\";\n\nexport interface SelectToolState {\n    params: SelectToolParams\n    paramsConfig: ParamConfig[]\n}\n\nexport const selectToolReducer = handleActions<SelectToolState>({\n    [ESelectToolAction.SET_PARAMS]: (state: SelectToolState, action: SetSelectToolParamsAction) => {\n        const params = {\n            ...state.params,\n            ...action.params\n        };\n        const paramsConfig = getSelectToolParamsConfig(params);\n        return {\n            paramsConfig,\n            params\n        }\n    },\n}, {\n    params: {\n        mode: ESelectionMode.Rect,\n        curveType: ECurveType.CurveLinear,\n        [CurveValueName[ECurveType.CurveBundle]]: 0,\n        [CurveValueName[ECurveType.CurveCardinal]]: 1,\n        [CurveValueName[ECurveType.CurveCatmullRom]]: 1\n    },\n    paramsConfig: getSelectToolParamsConfig(),\n});\n\n\n","import {handleActions} from \"redux-actions\";\nimport {ERoomsAction} from \"./actions\";\nimport {UpdateRoomsAction} from \"./types\";\n\nexport interface Room {\n    name: string\n}\n\nexport interface RoomsState {\n    rooms: Room[]\n}\n\nexport const roomsReducer = handleActions<RoomsState>({\n    [ERoomsAction.UPDATE_ROOMS]: (state: RoomsState, action: UpdateRoomsAction) => ({\n        rooms: action.rooms\n    })\n}, {\n    rooms: []\n});\n","import {handleActions} from \"redux-actions\";\nimport {AddCFAction, ChangeCFParamsAction, ChangeFunction, RemoveCFAction} from \"./types\";\nimport {EChangeFunctionsAction} from \"./actions\";\nimport {cfId, createCFInitialState} from \"./helpers\";\nimport {omit} from \"lodash\";\n\nexport interface ChangeFunctionsState {\n    functions: ChangeFunctions\n    namesList: string[]\n}\nexport interface ChangeFunctions {\n    [key: string]: ChangeFunction\n}\n\nexport const changeFunctionsReducer = handleActions<ChangeFunctionsState>({\n    [EChangeFunctionsAction.ADD_CF]: (state: ChangeFunctionsState, action: AddCFAction) => {\n        const id = cfId(action.cfType, state.functions);\n\n        return {\n            functions: {\n                ...state.functions,\n                [id]: createCFInitialState(id, action.cfType),\n            },\n            namesList: [...Object.keys(state.functions), id]\n        }\n    },\n    [EChangeFunctionsAction.REMOVE_CF]: (state: ChangeFunctionsState, action: RemoveCFAction) => {\n        const newFunctions = omit(state.functions, action.name);\n        return {\n            functions: newFunctions,\n            namesList: Object.keys(newFunctions)\n        }\n    },\n    [EChangeFunctionsAction.CHANGE_PARAMS]: (state: ChangeFunctionsState, action: ChangeCFParamsAction) => {\n        return {\n            ...state,\n            functions: {\n                ...state.functions,\n                [action.id]: {\n                    ...state.functions[action.id],\n                    params: action.params\n                }\n            }\n        }\n    }\n}, {\n    functions: {},\n    namesList: [],\n});","import {handleActions} from \"redux-actions\";\nimport {\n    ActivateValueChangingAction,\n    ChangingValue,\n    DeactivateValueChangingAction, SetStartValueAction,\n    SetValueInChangingListAction\n} from \"./types\";\nimport {EChangingValuesAction} from \"./actions\";\nimport omit from \"lodash/omit\";\nimport {EChangeFunctionsAction} from \"../changeFunctions/actions\";\nimport {RemoveCFAction} from \"../changeFunctions/types\";\n\nexport interface ChangingValuesState {\n    [path: string]: ChangingValue\n}\n\nexport const changingValuesReducer = handleActions<ChangingValuesState>({\n    [EChangingValuesAction.SET_VALUE_IN_CHANGING_LIST]: (state: ChangingValuesState, action: SetValueInChangingListAction) => {\n        if (!state[action.path]) {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        active: true,\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                        startValue: action.startValue,\n                    }\n                }\n            } else {\n                return state;\n            }\n        } else {\n            if (action.changeFunctionId) {\n                return {\n                    ...state,\n                    [action.path]: {\n                        ...state[action.path],\n                        path: action.path,\n                        changeFunctionId: action.changeFunctionId,\n                        range: action.range,\n                    }\n                }\n            } else {\n                return omit(state, action.path);\n            }\n        }\n    },\n    [EChangingValuesAction.SET_START_VALUE]: (state: ChangingValuesState, action: SetStartValueAction) => {\n        return state[action.path] ? {\n            ...state,\n            [action.path]: {\n                ...state[action.path],\n                startValue: action.startValue,\n            }\n        } : state\n    },\n    [EChangingValuesAction.ACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: ActivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: true\n        }\n    }),\n    [EChangingValuesAction.DEACTIVATE_VALUE_CHANGING]: (state: ChangingValuesState, action: DeactivateValueChangingAction) => ({\n        ...state,\n        [action.path]: {\n            ...state[action.path],\n            active: false\n        }\n    }),\n    [EChangeFunctionsAction.REMOVE_CF]: (state: ChangingValuesState, action: RemoveCFAction) => {\n        const toDelete = Object.values(state)\n            .filter(({changeFunctionId}) => changeFunctionId === action.name)\n            .map(({path}) => path);\n        return omit(state, ...toDelete);\n    }\n}, {});","import {handleActions} from \"redux-actions\";\nimport {EChangingAction} from \"./actions\";\nimport {ChangingMode} from \"./types\";\n\nexport interface ChangingState {\n    isChanging: boolean\n    mode: ChangingMode\n}\n\nexport const changingReducer = handleActions<ChangingState>({\n    [EChangingAction.START]: (state: ChangingState) => ({\n        ...state,\n        isChanging: true\n    }),\n    [EChangingAction.STOP]: (state: ChangingState) => ({\n        ...state,\n        isChanging: false\n    }),\n    [EChangingAction.SET_MODE]: (state: ChangingState, action) => ({\n        ...state,\n        mode: action.mode\n    }),\n}, {\n    isChanging: false,\n    mode: ChangingMode.OnDraw\n});\n","import {handleActions} from \"redux-actions\";\nimport {ChangeColorAction} from \"./types\";\nimport {EColorAction} from \"./actions\";\n\n\nexport interface ColorState {\n    value: string\n}\n\nexport const colorReducer = handleActions<ColorState>({\n    [EColorAction.CHANGE]: (state: ColorState, action: ChangeColorAction) => {\n\n        return {\n            ...state,\n            value: action.color\n        }\n    },\n}, {\n    value: \"#000000\"\n});","import {handleActions} from \"redux-actions\";\nimport * as immutable from 'object-path-immutable';\nimport {AppState} from \"../index\";\nimport {ChangeAction, ChangeToStartValueAction, EChangeAction} from \"./actions\";\nimport {changeFunctionByType} from \"../changeFunctions/helpers\";\nimport {act} from \"react-dom/test-utils\";\nimport {position} from \"../../components/Area/canvasPosition.servise\";\n\n\nexport const changeReducer = handleActions<AppState>({\n    [EChangeAction.CHANGE]: (state: AppState, action: ChangeAction) => {\n        // console.log(state, action.time, action.position);\n\n        const {changeFunctions: {functions: changeFunctions}, changingValues, patterns} = state;\n\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n\n            const pattern = patterns[action.position.patternId];\n            // console.log(path, active);\n            if (!active) return res;\n\n            const changeFunctionData = changeFunctions[changeFunctionId];\n\n            const changeFunction = changeFunctionByType[changeFunctionData.type];\n\n            // console.log(changeFunction(changeFunctionData.params, range, pattern)(startValue, action.time, action.position), changeFunctionData.params, range, pattern, startValue, action.time, action.position);\n\n            let nextValue = changeFunction({\n                params: changeFunctionData.params, range, pattern\n            })({\n                startValue,\n                time: action.time,\n                position: action.position\n            });\n            nextValue = Math.min(Math.max(nextValue, range[0]), range[1]);\n\n\n            return res.set(path, nextValue)\n        }, immutable.wrap(state)).value();\n    },\n    [EChangeAction.TO_START_VALUE]: (state: AppState, action: ChangeToStartValueAction) => {\n        const {path} = action;\n        const {changingValues} = state;\n\n        return changingValues[path]\n            ? immutable.wrap(state).set(path, changingValues[path].startValue).value()\n            : state;\n    },\n    [EChangeAction.ALL_TO_START_VALUE]: (state: AppState) => {\n        const {changingValues} = state;\n\n        return Object.values(changingValues).reduce((res, {active, path, range, changeFunctionId, startValue}) => {\n            return res.set(path, startValue)\n        }, immutable.wrap(state)).value();\n    },\n}, {});","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reduceReducers from 'reduce-reducers';\n\nimport {patternsReducer} from \"./patterns/reducer\";\nimport {ToolState, toolReducer} from \"./tool/reducer\";\nimport {BrushState, brushReducer} from \"./brush/reducer\";\nimport {LineState, lineReducer} from \"./line/reducer\";\nimport {SelectToolState, selectToolReducer} from \"./selectTool/reducer\";\nimport {RoomsState, roomsReducer} from \"./rooms/reducer\";\nimport {ChangeFunctionsState, changeFunctionsReducer} from \"./changeFunctions/reducer\";\nimport {ChangingValuesState, changingValuesReducer} from \"./changingValues/reducer\";\nimport {changingReducer, ChangingState} from \"./changing/reducer\";\nimport {colorReducer, ColorState} from \"./color/reducer\";\nimport {changeReducer} from \"./change/reducer\";\nimport {fullscreenReducer, FullScreenState} from \"./fullscreen\";\nimport {languageReducer, LanguageState} from \"./language\";\nimport {PatternsState} from \"./patterns/types\";\n\nexport interface AppState {\n    fullScreen: FullScreenState\n    language: LanguageState\n\n    patterns: PatternsState\n\n    color: ColorState\n\n    tool: ToolState\n    brush: BrushState\n    line: LineState\n\n    selectTool: SelectToolState\n\n    rooms: RoomsState\n\n    changeFunctions: ChangeFunctionsState\n    changingValues: ChangingValuesState\n    changing: ChangingState\n}\n\nconst rootReducer = reduceReducers(\n    combineReducers<AppState>({\n        fullScreen: fullscreenReducer,\n\n        language: languageReducer,\n\n        patterns: patternsReducer,\n\n        color: colorReducer,\n\n        tool: toolReducer,\n        brush: brushReducer,\n        line: lineReducer,\n\n        selectTool: selectToolReducer,\n\n        rooms: roomsReducer,\n\n        changeFunctions: changeFunctionsReducer,\n        changingValues: changingValuesReducer,\n        changing: changingReducer\n    }),\n    changeReducer\n);\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n// export const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport './App.scss';\nimport {Main} from \"./components/Main\";\nimport {Provider as ReduxProvider} from \"react-redux\";\nimport {store} from \"./store\";\n\nimport './store/language/translations';\n\nconst App: React.FC = () => (\n    <ReduxProvider store={store}>\n        {/*<I18nextProvider i18n={i18next}>*/}\n            <Main/>\n        {/*</I18nextProvider>*/}\n    </ReduxProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"path-data-polyfill\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}