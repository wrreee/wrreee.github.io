{"version":3,"sources":["img/1.jpg","img/2.jpg","img/3.jpg","img/4.jpg","img/5.jpg","img/6.jpg","img/7.jpg","img/8.jpg","img/9.jpg","img/10.jpg","img/11.jpg","img/12.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","className","height","src","img1","img2","img3","img4","img5","img6","img7","img8","img9","img10","img11","img12","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,8XCwD5BC,MAxCf,WACI,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAAUC,OAAQ,KACd,yBAAKC,IAAKC,OAEd,kBAAC,IAAD,CAAUF,OAAQ,KACd,yBAAKC,IAAKE,OAEd,kBAAC,IAAD,CAAUH,OAAQ,KACd,yBAAKC,IAAKG,OAEd,kBAAC,IAAD,CAAUJ,OAAQ,KACd,yBAAKC,IAAKI,QAGlB,yBAAKN,UAAU,OACX,kBAAC,IAAD,CAAUC,OAAQ,KACd,yBAAKC,IAAKK,OAEd,kBAAC,IAAD,CAAUN,OAAQ,KACd,yBAAKC,IAAKM,OAEd,kBAAC,IAAD,CAAUP,OAAQ,KACd,yBAAKC,IAAKO,OAEd,kBAAC,IAAD,KAAU,yBAAKP,IAAKQ,QAExB,yBAAKV,UAAU,OAEX,kBAAC,IAAD,KAAU,yBAAKE,IAAKS,OACpB,kBAAC,IAAD,KAAU,yBAAKT,IAAKU,OACpB,kBAAC,IAAD,KAAU,yBAAKV,IAAKW,OACpB,kBAAC,IAAD,KAAU,yBAAKX,IAAKY,UCtChBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de514032.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.ef54ab0d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.7ce56024.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.4eee792b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.c66c947f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0d999e11.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.9e25bdb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.b520d064.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.b867848b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.e0e73f79.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.f3b19975.jpg\";","module.exports = __webpack_public_path__ + \"static/media/11.38f1d420.jpg\";","module.exports = __webpack_public_path__ + \"static/media/12.59e9c54b.jpg\";","import React from 'react';\nimport LazyLoad from 'react-lazyload';\nimport './App.css';\nimport img1 from './img/1.jpg';\nimport img2 from './img/2.jpg';\nimport img3 from './img/3.jpg';\nimport img4 from './img/4.jpg';\nimport img5 from './img/5.jpg';\nimport img6 from './img/6.jpg';\nimport img7 from './img/7.jpg';\nimport img8 from './img/8.jpg';\nimport img9 from './img/9.jpg';\nimport img10 from './img/10.jpg';\nimport img11 from './img/11.jpg';\nimport img12 from './img/12.jpg';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className='row'>\n                <LazyLoad height={200}>\n                    <img src={img1}/>\n                </LazyLoad>\n                <LazyLoad height={200}>\n                    <img src={img2}/>\n                </LazyLoad>\n                <LazyLoad height={200}>\n                    <img src={img3}/>\n                </LazyLoad>\n                <LazyLoad height={200}>\n                    <img src={img4}/>\n                </LazyLoad>\n            </div>\n            <div className='row'>\n                <LazyLoad height={200}>\n                    <img src={img5}/>\n                </LazyLoad>\n                <LazyLoad height={200}>\n                    <img src={img6}/>\n                </LazyLoad>\n                <LazyLoad height={200}>\n                    <img src={img7}/>\n                </LazyLoad>\n                <LazyLoad><img src={img8}/></LazyLoad>\n            </div>\n            <div className='row'>\n\n                <LazyLoad><img src={img9}/></LazyLoad>\n                <LazyLoad><img src={img10}/></LazyLoad>\n                <LazyLoad><img src={img11}/></LazyLoad>\n                <LazyLoad><img src={img12}/></LazyLoad>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}