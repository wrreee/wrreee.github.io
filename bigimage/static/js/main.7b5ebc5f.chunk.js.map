{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["images","ComponentToTrack","isVisible","image","style","background","display","src","App","className","map","row","j","i","partialVisibility","once","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAiBMA,G,MAAS,CACX,CACI,qEACA,qEACA,qEACA,sEACD,CACC,qEACA,qEACA,qEACA,sEACD,CACC,qEACA,qEACA,qEACA,wEAKFC,EAAmB,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,MAC5BC,EAAQ,CACVC,WAAYH,EAAY,MAAQ,OAChCI,QAAS,QAEb,OAAO,yBAAKF,MAAOA,GAAO,yBAAKG,IAAKJ,MA4BzBK,MAzBf,WACI,OACI,yBAAKC,UAAU,OACVT,EAAOU,KAAI,SAACC,EAAKC,GAAN,OACR,yBAAKH,UAAU,OACVE,EAAID,KAAI,SAACP,EAAOU,GAOb,OACI,kBAAC,IAAD,CAAiBC,mBAAiB,EAACC,MAAI,EAACX,MAAO,CAACY,MAAO,SAClD,qBAAEd,UAA2B,kBAAC,EAAD,CAAkBC,MAAOA,IACnD,yBAAKC,MAAO,CAACY,MAAO,QAASH,EAAGD,eChDhDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7b5ebc5f.chunk.js","sourcesContent":["import React from 'react';\nimport LazyLoad from 'react-lazyload';\nimport TrackVisibility from 'react-on-screen';\nimport './App.css';\nimport img1 from './img/1.jpg';\nimport img2 from './img/2.jpg';\nimport img3 from './img/3.jpg';\nimport img4 from './img/4.jpg';\nimport img5 from './img/5.jpg';\nimport img6 from './img/6.jpg';\nimport img7 from './img/7.jpg';\nimport img8 from './img/8.jpg';\nimport img9 from './img/9.jpg';\nimport img10 from './img/10.jpg';\nimport img11 from './img/11.jpg';\nimport img12 from './img/12.jpg';\n\nconst images = [\n    [\n        'https://live.staticflickr.com/65535/49578555448_3c0340c746_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579061216_2c62c9b640_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579287737_cea539d9bb_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579061691_e75637ca40_o_d.jpg'\n    ], [\n        'https://live.staticflickr.com/65535/49579062066_65d7a78164_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579288517_257555a46e_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579288812_b9bd9bfb01_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579062781_a80d18c313_o_d.jpg',\n    ], [\n        'https://live.staticflickr.com/65535/49579289557_df952fbcea_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579063386_d21759736f_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579063701_71c107c52a_o_d.jpg',\n        'https://live.staticflickr.com/65535/49579290307_11aed4092e_o_d.jpg',\n    ]\n];\n\n\nconst ComponentToTrack = ({isVisible, image}: any) => {\n    const style = {\n        background: isVisible ? 'red' : 'blue',\n        display: 'flex'\n    };\n    return <div style={style}><img src={image}/></div>;\n};\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            {images.map((row, j) => (\n                <div className='row'>\n                    {row.map((image, i) => {\n\n\n                        // <LazyLoad>\n                        //     <img src={image}/>\n                        // </LazyLoad>)\n\n                        return (\n                            <TrackVisibility partialVisibility once style={{width: '25%'}}>\n                                {({isVisible}) => isVisible ? <ComponentToTrack image={image}/> :\n                                    <div style={{width: '25%'}}>{i}{j}</div>}\n                            </TrackVisibility>\n                        )\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}